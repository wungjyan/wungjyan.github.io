<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[vue中图片上传到阿里云oss记录]]></title>
    <url>%2F2019%2F03%2F26%2Fupload-oss%2F</url>
    <content type="text"><![CDATA[最近项目需求，做一个图片上传到阿里云oss的功能，由于之前没做过这样的功能，所以也是查阅了不少资料，边写demo边测试把基本功能完成了。现在来记录下，没做过的童鞋也可以简单参考下。我的使用场景是在vue项目中结合iview框架的上传组件来实现功能。 首先给大家一篇阿里云的文档 web端直传实践，它里面给出了三个上传的例子，如下图： 最开始我们后端让我自己看看这些例子，也没决定好用哪种方式，而我选择尝试的是第一种方式，因为不需要后端直接参与。那我就先从第一种方式开始说起，在这之前你需要开通好阿里云的对象存储功能，并新建了一个Bucket，这些我就直接略过了，给个文档：使用阿里云OSS JavaScript客户端签名直传这种方式不需要后端直接参与，你只需要配置好阿里云oss的后台就好，非常方便。但是客户端通过JavaScript把AccesssKeyID和AccessKeySecret写在代码里面有泄露的风险。关于AccesssKeyID和AccessKeySecret，参考上面给的文档里的介绍。 每种方式官方都给出了demo代码，你可以下载下来参考一下，不过我觉得例子代码有点多，就没用他那种方式。阿里云提供了一个sdk可以帮助我们来实现文件上传。这里是SDK参考 我是直接使用它的cdn引入的，在index.html中直接引入：1&lt;script src=&quot;https://gosspublic.alicdn.com/aliyun-oss-sdk.min.js&quot;&gt;&lt;/script&gt; 之前说了我是结合iview框架的上传组件的，我把上传功能单独写成了一个组件，为防止大家看的难受，这里只贴上部分核心代码： template：12345678910111213// iview上传组件&lt;Upload :before-upload=&quot;handleBeforUpload&quot; // before-upload 上传文件之前的钩子，参数为上传的文件 action=&quot;&quot;&gt; &lt;Button icon=&quot;ios-cloud-upload-outline&quot;&gt;选择文件&lt;/Button&gt;&lt;/Upload&gt;// 显示选择的图片名 &lt;div v-if=&quot;file&quot;&gt;已选择文件：&#123;&#123;file.name&#125;&#125; // 手动点击上传&lt;Button @click=&quot;upLoad&quot;&gt;点击上传&lt;/Button&gt; script：1234567891011121314151617181920212223242526272829303132333435data()&#123; return &#123; file:&apos;&apos; // 选择上传的文件 &#125;&#125;,methods:&#123; // 上传之前的操作 handleBeforUpload (file) &#123; this.file = file // 将回调的文件信息存入data.file return false // 返回false，表示手动上传，取消默认的自动上传 &#125;, // 点击上传按钮触发上传操作 upload()&#123; // sdk提供的创建客户端实例方法 const client = new OSS.Wrapper(&#123; region: &apos;oss-cn-hangzhou&apos;, // 创建Bucket时会选择不同地区，根据自己的选择填入对应名称 accessKeyId: &apos;********&apos;, // 填入你的accessKeyId accessKeySecret: &apos;********&apos;, // 填入你的accessKeySecret bucket: &apos;***&apos; // 填入你的bucket名 &#125;) const Name = this.file.name const suffix = Name.substr(Name.indexOf(&apos;.&apos;)) // 文件后缀 const filename = Date.parse(new Date()) + suffix // 组成新文件名 client.multipartUpload(filename, this.file).then(res =&gt; &#123; // 上传 console.log(&apos;上传成功：&apos;,res) // ... 你的操作，可以拼接图片url，用于显示等... &#125;).catch(err =&gt; &#123; console.log(&apos;上传失败：&apos;, err) &#125;) &#125;&#125; 以上就是一个最简单的上传图片功能，总结就是：取消iview组件默认的自动上传功能，选择手动上传，在上传之前拿到图片信息，在点击上传按钮时，借助sdk提供的方法，填入你的OSS参数，最后将图片上传。上传成功之后，可以到OSS管理控制台的文件管理中看到图片信息。 服务端签名直传并设置上传回调我和后端最终选择的方式就是这种，至于为啥，显然上面那种方法看起来不那么安全，更多的区别还是去看文档介绍的。同样的，这种方法也提供了demo，但是我依旧没用它的方式去实现我的功能。我还是先贴上少部分核心的代码，其中上面的template部分不用变，主要来看看js部分的实现： 首先handleBeforUpload中，我们需要加一步获取参数的方法，并组成要上传的数据12345678handleBeforUpload (file) &#123; this.file = file // 获取上传文件前服务器给的参数 this.$store.dispatch(&apos;handleGetAllOss&apos;).then(res =&gt; &#123; this.setParams(res.data) // 组装我们要上传的数据，方法的代码在下面 &#125;) return false&#125;, 我使用了vuex，所以请求都写在了actions里，handleGetAllOss这个action里会请求一些上传需要的参数，请求地址是需要后端提供的，所以如果用这种方式的话，后端大佬的大腿要抱牢。关于请求我就不多说了，就简单发个ajax的get请求拿到参数就好。想要知道会有哪些参数，我们重点来看setParams这个方法： 123456789101112131415161718192021222324setParams (data) &#123; // data 是我上一步骤传过来的参数object // 这个url是要上传时的地址，存在data的host上 this.url = data.host const Name = this.file.name const suffix = Name.substr(Name.indexOf(&apos;.&apos;)) // 文件后缀 const filename = Date.parse(new Date()) + suffix // 组成新的文件名 // 新建formData对象，使用append方法添加字段，在data中拿的都是请求回来的参数 let formData = new FormData() formData.append(&apos;key&apos;, data.dir + storeAs) formData.append(&apos;policy&apos;, data.policy) formData.append(&apos;OSSAccessKeyId&apos;, data.accessid) formData.append(&apos;success_action_status&apos;, &apos;200&apos;) formData.append(&apos;callback&apos;, data.callback) formData.append(&apos;signature&apos;, data.signature) formData.append(&apos;name&apos;, Name) // 文件名 formData.append(&apos;file&apos;, this.file) // 文件，选择时存在data上 this.formData = formData // 将formData对象存入data中，方便后续使用&#125;, 现在我们有了要上传的数据this.formData，有了上传地址：this.url，现在只要使用ajax的post请求就好了，当点击上传按钮时，调用upload方法：12345678upload()&#123; this.$store.dispatch(&apos;handleUploadImg&apos;, &#123; url: this.url, data: this.formData &#125;).then(res =&gt; &#123; console.log(&apos;上传成功：&apos;,res) // 你的操作 &#125;).catch(err =&gt; &#123; console.log(&apos;上传失败：&apos;,err) &#125;)&#125; 我还是把我的啰嗦的代码贴出来吧 handleUploadImg方法：123456789101112// 上传handleUploadImg (&#123; commit &#125;, &#123; url, data &#125;) &#123; return new Promise((resolve, reject) =&gt; &#123; uploadImg(&#123; url, data &#125;) // 方法在下面 .then(res =&gt; &#123; resolve(res) &#125;) .catch(err =&gt; &#123; reject(err) &#125;) &#125;)&#125; uploadImg方法：12345678const uploadImg = (&#123; url, data &#125;) =&gt; &#123; return axios.request(&#123; // axios.request 方法是简单的对axios的封装，看这配置也应该不需要多介绍 url, data, method: &apos;post&apos;, headers: &#123; &apos;Content-Type&apos;: &apos;multipart/form-data&apos; &#125; &#125;)&#125; 上面的流程就是这种上传方式的简单实现，你不必按照我的方式来，总结一下就是： 请求后端给你的地址，拿到上传时必要的参数 将获取的参数拼装至formData 使用post方法发送请求，带上formData数据，请求地址在步骤1的参数里，host参数。 post请求成功后的回调，是后端可控的，我让后端加了一个图片名返回，自己拼接图片url。 这个过程需要后端的参与。 图片处理（缩略图）本来没这步的，想想还是写上来，觉得阿里云这个功能挺好用的。 通过上面的两种方式可以成功上传图片到阿里云的对象存储，然后就可以使用url访问图片了。一般上传成功后，在页面上会显示一个缩略图，这个缩略图不仅仅是你设置宽高看起来小，实际上它真的可以变小。在阿里云OSS管理控制台，点击图片处理，点击新建样式，你会看到下面这样： 如图你可以在右侧添加一个图片样式，比如可以选择缩略比例，设置好后点确定就会生成一个图片样式，我图中已经有一个min_img名的样式，表示缩略图的意思，这样在我想要访问某个图片的缩略图时，在图片url后面加上?x-oss-process=style/min_img这个后缀就好了，min_img替换成你设置的样式名。 结语本人也是刚接触这个，实现的也是最基本的功能，实现过程也可能并不正确。有做过这个的童鞋们可以多给点意见，谢谢。🙏]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[十年]]></title>
    <url>%2F2019%2F03%2F09%2F19-3-9%2F</url>
    <content type="text"><![CDATA[与10年前的同桌在这异乡相聚了下，见面就被吐槽变丑了，变胖了，哎。 总体上是开心的，聊了很多以前的事，两个人都不敢相信已经过了10年。曾经的爱哭鬼还是爱哭鬼，但更坚强，更乐观了，同时也感叹生活的无奈，深深体会到成年人的世界没有容易一说。 不敢期望下个10年还能相聚，但还是有点憧憬。希望到时我们都活出自己想要的样子。祝福你，也祝福我。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[RN踩坑记录]]></title>
    <url>%2F2019%2F03%2F05%2Frn-test%2F</url>
    <content type="text"><![CDATA[这几天试用了下flutter和react-native，最后决定还是先学习react-native。虽说flutter的优点有很多，再加上谷歌出品，必属精品，但是RN依旧更成熟点，而且react的语法也没有额外的学习成本。对于快速构建一个app，RN现在更合适点。 开始使用RN，总免不了一些坑。由于我在安装RN配置前，捣鼓了flutter配置，所以相对而言安装部分没遇到坑了，但也遇到其他坑。本文准备长期更新，用以记录学习中的坑。 目前遇到的两处坑： 报错：Entry, “:CFBundleIdentifier”, Does Not Exist把这个错误去百度或谷歌，能够找到最多的答案就是去“下载boost 等几个第三方库编译”，原因是因为： ！！！注意！！！：init 命令默认会创建最新的版本，而目前最新的 0.45 及以上版本需要下载 boost 等几个第三方库编译。这些库在国内即便翻墙也很难下载成功，导致很多人无法运行iOS项目！！！中文网在论坛中提供了这些库的国内下载链接。如果你嫌麻烦，又没有对新版本的需求，那么可以暂时创建0.44.3的版本。 这是官网的说明，然后很多人用这个方法解决了。然而我发现我的下载都是正常的，哪怕我单独去下载文件也不能解决问题。最后我是把ios文件运行在Xcode上才找到原因 如图，由于我的电脑上安装了nginx，并且监听的是8081端口，而react-native运行时，也会默认监听一个8081端口，所以提示端口占用。知道原因就好办了，我把nginx的配置修改了下，释放端口，最后成功运行了项目。 所以遇到此类问题，可以在Xcode去运行下查错，每个人的原因可能都不一样。 React Navigation v3版注意这是一个导航插件，因为我在网上看的教程是v2版的，而默认安装的是最新版，所以一些差异导致项目无法运行。 目前主要一个大区别就是你需要在你的导航外面加上一层容器，在 v2 和更早版本中， React Navigation 中的容器由 create*Navigator 函数自动提供， 从 v3 开始, 需要直接使用容器，即createAppContainer。这个只是提一下，后面遇到的再记录。]]></content>
      <categories>
        <category>RN</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue 组件通信总结 (非vuex和Event Bus)]]></title>
    <url>%2F2019%2F02%2F14%2Fvue-state%2F</url>
    <content type="text"><![CDATA[此文章同步发布于掘金 我的掘金 方式一览 props &amp;&amp; emit v-model $children &amp;&amp; $parent $listeners &amp;&amp; $attrs .sync prop &amp;&amp; emit 方式父组件通过 props 传递数据给子组件，子组件通过 emit 发送事件传递数据给父组件。这是最常用的父子组件通信方式，符合单向数据流，即子组件不能直接修改 props， 而是必须通过发送事件的方式告知父组件修改数据。由于是常用的方式，在这也不多啰嗦了。 v-model 方式v-model实现的通信其本质上还是上面的props和emit方式，使用v-model更像是一种语法糖。文档介绍 先举个栗子：12345678910111213141516171819// 这是父组件&lt;template&gt; &lt;div&gt; &lt;child v-model=&quot;msg&quot;&gt;&lt;/child&gt; &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import child from &quot;../components/Child&quot;;export default &#123; data() &#123; return &#123; msg: &quot;hello&quot; &#125;; &#125;, components: &#123; child &#125;&#125;;&lt;/script&gt; 123456789101112// 这是子组件&lt;template&gt; &lt;div&gt; &lt;input :value=&quot;value&quot; @input=&quot;$emit(&apos;input&apos;,$event.target.value)&quot;&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; props: [&quot;value&quot;]&#125;;&lt;/script&gt; 父组件使用子组件时，使用v-model绑定父组件msg数据，这会在子组件里解析成名为 value 的 prop 和名为 input 的事件，所以子组件里的props选项里必须写成value，在$emit事件里也需写成input事件。此时当你在子组件输入时，就会改变父组件的msg值。 使用 model 选项自定义 props 和 event上面说了，props选项里必须写value，事件也必须是input。这是默认情况下的解析，其实我们也可以自定义 props 和 event，使用model选项，文档介绍。文档中以复选框为例，修改 props 和 event：1234model: &#123; prop: &apos;checked&apos;, event: &apos;change&apos;&#125; $children &amp;&amp; $parent 方式这两个是vue提供的api，见名知意，在父组件里使用 $children 访问子组件，在子组件里使用$parent访问父组件。 举个简单栗子：1234567891011121314151617181920// 这是子组件&lt;template&gt; &lt;div&gt; &#123;&#123;$parent.msg&#125;&#125; // 子组件显示父组件数据 &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data() &#123; return &#123; child_msg: &quot;我是子组件数据&quot; &#125;; &#125;, mounted() &#123; this.$parent.test(); // 子组件执行父组件方法 &#125;&#125;;&lt;/script&gt; 123456789101112131415161718192021222324252627// 这是父组件&lt;template&gt; &lt;div&gt; &lt;child/&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import child from &quot;../components/Child&quot;;export default &#123; data() &#123; return &#123; msg: &quot;我是父组件的数据&quot; &#125;; &#125;, components: &#123; child &#125;, methods: &#123; test() &#123; console.log(&quot;我是父组件的方法，被执行&quot;); &#125; &#125;, mounted() &#123; console.log(this.$children[0].child_msg); // 执行子组件方法 &#125;&#125;;&lt;/script&gt; 【注意】 $children 是数组，所以当只有一个子组件时，使用[0]获取。当有多个子组件时，它并不保证顺序，也不是响应式的。 $listeners 方式初看此api的定义，我也是似懂非懂： 包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=”$listeners” 传入内部组件——在创建更高层次的组件时非常有用 文档这里也描述了它的使用方法： 文档介绍 在查看一些博客时，要么拿官方例子，要么一大堆介绍，其实我看的也是一脸懵逼。后来自己慢慢试着用了下，也大概明白它是干嘛的。我的理解：在多层嵌套组件的业务中，使用$listeners可以使用更少的代码来完成事件通信。 还是以代码来说明，如下图，我们来实现组件B 到 父组件 的通信， 一般嵌套层级太多时，我们可能就会考虑vuex，但只传递数据，而不做中间处理，有点大材小用，所以如上图这样的，我们可能还是使用emit方式来通信，无非多传一层，多写点代码。那么现在，有了$listeners，我们可以更方便的来实现，我尽量用最少的代码来实现下： 就从最下面的B组件开始，它有一个按钮，点击时触发实例上的事件getFromB1234567891011121314151617// 组件B&lt;template&gt; &lt;div&gt; &lt;button @click=&quot;handleClick&quot;&gt;B组件按钮&lt;/button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; methods: &#123; handleClick() &#123; this.$emit(&quot;getFromB&quot;); &#125; &#125;&#125;;&lt;/script&gt; A组件 包裹 B组件，相当于是父组件与B组件的中转站，在不用$listeners时，我们可能会在这里再触发一个事件，现在不需要这样了，我们这样：12345678910111213141516171819// 组件A&lt;template&gt; &lt;div&gt; &lt;child-b v-on=&quot;$listeners&quot; /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import childB from &quot;../components/ChildB&quot;;export default &#123; components: &#123; childB &#125;, mounted() &#123; console.log(this.$listeners); &#125;&#125;;&lt;/script&gt; 只需要加一句v-on=&quot;$listeners&quot;即可。好奇的我们也可以 mounted 时打印一下$listeners。 父组件，显而易见，我们直接绑定getFromB事件即可：12345678910111213141516171819// 父组件&lt;template&gt; &lt;div&gt; &lt;child-a v-on:getFromB=&quot;fromB&quot;/&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import childA from &quot;../components/ChildA&quot;;export default &#123; components: &#123; childA &#125;, methods: &#123; fromB() &#123; console.log(&quot;B组件触发&quot;); &#125; &#125;&#125;;&lt;/script&gt; 这就是$listeners的简单用法，说到这里，你应该意识到，当组件嵌套很多层时，不借助 vuex，我们也可以较方便地实现通信了。 说到这里，我还要提一个api，就是$attrs。它与$listeners的关系就好比 props 与 emit 的关系，用来向底层组件传递属性。先贴上它的定义： 包含了父作用域中不作为 prop 被识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind=”$attrs” 传入内部组件——在创建高级别的组件时非常有用。 我们回想下，如果使用 props 向孙组件传递数据时，在中间组件里，我们是要一层层使用 props 选项来接收，然后再传递的。那么$attrs的作用就是在没到目标子组件时，不使用props接收数据，直到到达需要数据的组件时，再使用props接收。 在我看别的博客时，都是这两个api一起说的，代码比较多，为了清晰，我把上面代码多余的代码删掉，只演示$attrs的使用： 父组件传递一个属性toB，意为是给B组件用的：1234567891011121314// 父组件&lt;template&gt; &lt;div&gt; &lt;child-a toB=&quot;hello&quot;/&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import childA from &quot;../components/ChildA&quot;;export default &#123; components: &#123; childA &#125;&#125;;&lt;/script&gt; A组件使用v-bind=&quot;$attrs&quot;即可，不需要 props 接收，实际上也不可以接收，看定义1234567891011121314// 组件 A&lt;template&gt; &lt;div&gt; &lt;child-b v-bind=&quot;$attrs&quot; /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import childB from &quot;../components/ChildB&quot;;export default &#123; components: &#123; childB &#125;&#125;;&lt;/script&gt; B组件是我们的最后子组件，它用到toB属性，所以使用 props 选项接收了1234567891011&lt;template&gt; &lt;div&gt; &lt;p&gt;父组件传来数据：&#123;&#123;toB&#125;&#125;&lt;/p&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; props: [&quot;toB&quot;]&#125;;&lt;/script&gt; 从这个简单的例子，我们可以知道，当组件嵌套层级很多时，属性传递变得不要太方便。最后还要提一个inheritAttrs选项，它一般配合$attrs使用，这里我就不再多说了。文档介绍 .sync 方式此方法其实用的也不少，它在 Vue 1.x 里的作用是对一个 prop 进行“双向绑定“。但在 Vue 2 之后是只允许单向数据流的，所以现在即使它看起来像是真正的“双向绑定”，本质上也只是作为一个编译时的语法糖存在而已。 举个计数器的例子：1234567891011121314151617181920// 父组件&lt;template&gt; &lt;div&gt; &#123;&#123;num&#125;&#125; &lt;child-a :count.sync=&quot;num&quot; /&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import childA from &quot;../components/ChildA&quot;;export default &#123; data() &#123; return &#123; num: 0 &#125;; &#125;, components: &#123; childA &#125;&#125;;&lt;/script&gt; 1234567891011121314151617181920212223// 子组件&lt;template&gt; &lt;div&gt; &lt;div @click=&quot;handleAdd&quot;&gt;ADD&lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; data() &#123; return &#123; counter: this.count &#125;; &#125;, props: [&quot;count&quot;], methods: &#123; handleAdd() &#123; this.$emit(&quot;update:count&quot;, ++this.counter); &#125; &#125;&#125;;&lt;/script&gt; 嗯，看起来似乎更有逼格。 结语这么看下来，除了$children 和 $parent 是直接获取的，其他都跟 props 和 emit 息息相关。具体怎么用，自己看着办呗。 最后，新年快乐！]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于手写call，apply和bind]]></title>
    <url>%2F2019%2F02%2F02%2Fcall-apply-bind%2F</url>
    <content type="text"><![CDATA[今年到处看到关于手写bind函数的话题，似乎面试题也趋于跟风形式。这让我有种感觉，那就是不面试的问题都不会，只要扯上面试的话，那么问题就不是问题了。不禁感叹，前端要学的越来越多了～ 不扯太多，我也来试着实现一下bind，不过我觉得call和apply也可以实现下。 实现 call关于call函数的作用，我觉得不需要太多赘述，只要关注两点： 改变this指向 直接调用函数 代码实现：12345678Function.prototype.myCall = function(context) &#123; context = context || window // call函数第一个参数为this指向目标，若不传，指向window context.fn = this // 将要执行的函数赋值于context对象的fn属性，这样调用函数时，内部this就指向了context const args = [...arguments].slice(1) // 获取参数 const result = context.fn(...args) // call函数会调用原函数，所以我们也调用此函数，注意此时函数this指向了context delete context.fn // 删除context对象的fn属性 return result // 调用结果返回&#125; 实现 applyapply和call的区别只在于参数的传递方式，apply是以数组形式传入参数，代码实现：12345678910111213Function.prototype.myApply = function(context) &#123; context = context || window context.fn = this let result // 与call 的区别只在于参数传递方式 if (arguments[1]) &#123; result = context.fn(...arguments[1]) &#125; else &#123; result = context.fn() &#125; delete context.fn return result&#125; 实现 bindbind的实现稍微复杂点，它与前两个的主要区别在于：它不会调用函数，只改变了this指向，并且返回函数。因为返回了函数，那么就可以使用new方式来调用，我们先来看看原生bind的使用结果：12345678910111213141516var obj = &#123; a: 2&#125;function test() &#123; console.log(this)&#125;test.prototype.hello = function() &#123; console.log(&apos;hello&apos;)&#125;t = test.bind(obj)t() // &#123;a:2&#125;f = new t() f.hello // 使用new调用，关键在于实例可以访问原函数原型上的hello方法 那么，我们要做的有两步，第一是改变this指向，第二是new出来的实例继承原型，代码实现：123456789101112Function.prototype.myBind = function(context, ...args1) &#123; context = context || window const _this = this // 要返回的函数，内部直接借用apply改变this指向 function F(...args2) &#123; _this.apply(context, [...args1, ...args2]) &#125; F.prototype = Object.create(this.prototype) // 返回的函数的原型继承原函数的原型 // F.prototype.contructor = this // 此处可以不写，思考为什么？ return F&#125; 注意上述代码中的args1和args2，因为bind函数调用情况可能是这样test.bind(obj,1)(2)，所以为了好理解，我将两个参数列表都表示出来，最后参数是要合并的。 结束以上就是三种函数的实现方式，只是基于原理的简单实现。面试只是一个小目的，最关键的还是学好JavaScript这门语言啊。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[服务器相关安装]]></title>
    <url>%2F2019%2F01%2F12%2Fserver-config%2F</url>
    <content type="text"><![CDATA[主要是关于部署前端项目的。经常记得不清，记录下吧。我的服务器环境：阿里云ECS CentOS 7.3 64位 安装node找到资源打开nodejs中文网，点下载，找到阿里云镜像，如下图： 点开阿里云镜像，选择对应的版本，右键复制链接，如下图： 下载解压连接上服务器，使用 wget 下载，我在 / 目录下下载： wget 命令后面跟的是上面复制的链接，下载完成后，使用 ls 命令查看当前文件，发现有一个 node-v10.15.0-linux-x64.tar.gz 这样的压缩文件，执行解压命令：1tar xvf node-v10.15.0-linux-x64.tar.gz 注意不要输错。 创建软链接解压完成后，使用 ls 命令，发现当前文件下有一个不带 .tar.gz 后缀的文件夹。我们接下来创建软链接，使 node 和 npm 可以在任意目录下使用：12ln -s /node-v10.15.0-linux-x64/bin/node /usr/local/bin/nodeln -s /node-v10.15.0-linux-x64/bin/npm /usr/local/bin/npm 上面是两条命令，分别输入，注意输入后没有反馈信息代表执行成功了，没有反馈就是最好的反馈，再一个就是 /node-v10.15.0-linux-x64/bin/node 这个是你下载node的地址，也即是解压后的文件夹地址，用绝对路径，如果你不是在/目录下，比如在/root目录下下载的，那么你可能需要执行：1ln -s /root/node-v10.15.0-linux-x64/bin/node /usr/local/bin/node 后面 /usr/local/bin/node 是不变的。 验证切换到任意目录下：1node -v &amp;&amp; npm -v 看到版本号就成功了。 安装mongodb找到资源打开 https://www.mongodb.com/download-center/community，如下图，选择版本，复制最下面的链接： 下载解压与下载 node 一样，使用 wget 命令下载，注意自己的目录位置哦，我依旧在/下：1wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.5.tgz 解压1tar xvf mongodb-linux-x86_64-4.0.5.tgz 解压完毕后，有一个 mongodb-linux-x86_64-4.0.5 的没有.tgz后缀的文件夹。这个名字太长了，我们给它换个名字好方便操作，同时习惯性把这个文件放到 /usr/local/ 目录下，mv 命令要了解一下：1mv mongodb-linux-x86_64-4.0.5 /usr/local/mongodb 此时我们的操作就来到usr/local/mongodb这个目录下了 创建配置文件切换到/usr/local/mongodb目录下，创建三个文件夹：12345mkdir data //用来存放数据库数据mkdir logs //用来存放日志文件mkdir etc //用来存放配置文件 接下来，进入到 logs 文件夹里创建 mongo.log 文件：1touch mongo.log 再到 etc 文件夹里创建 mongo.conf 文件：1touch mongo.conf 通过 vim 命令打开 mongo.conf 编辑内容：1234567dbpath=/usr/local/mongodb/data logpath=/usr/local/mongodb/logs/mongo.log logappend=true journal=true quiet=true port=27017 bind_ip=0.0.0.0 保存退出。注意 dbpath 和 logpath 的路径，如果是按照我步骤来的，不需要改变，如果目录不一样，自行修改，这些都要自己注意。 启动还是在 mongodb 目录下，有一个bin目录，切换进入后使用ls命令： 看到熟悉的mongod了，使用配置文件启动：1./mongod -f /usr/local/mongodb/etc/mongo.conf 如你所见，没有反馈就是成功了（我自己都忘记了，以为出错了呢） 此时再打开一个窗口，同样进入/usr/local/mongodb/bin目录，运行：1./mongo 这样就成功了。 同时在浏览器端访问27017端口，是这样的： 如果访问失败，检查服务器 27017 端口是否打开。 创建软链接为了不要每次启动都先切换到/usr/local/mongodb/bin目录下，我们给它也创建软链接：12ln -s /usr/local/mongodb/bin/mongod /usr/local/bin/mongodln -s /usr/local/mongodb/bin/mongo /usr/local/bin/mongo 现在可以在任意目录使用mongod和mongo命令了，记住配置文件还是要加上的。 安装git找到资源安装 git 可以通过 yum 安装，不过版本太老，所以推荐源码安装。打开https://github.com/git/git/releases，复制最新版的下载链接： 下载解压1wget https://github.com/git/git/archive/v2.20.1.tar.gz 解压1tar xvf v2.20.1.tar.gz 注意解压后的文件名称变了，为git-2.20.1 安装依赖安装编译源码所需依赖：1yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker 安装依赖时，自动安装了git，版本是旧的，卸载它1yum remove git 安装git进入git-2.20.1目录，执行编译命令：1make prefix=/usr/local/git all 结束后，同目录，安装 Git 至 /usr/local/git 路径：1make prefix=/usr/local/git install 打开环境变量配置文件:1vim /etc/profile 在底部加入:12PATH=$PATH:/usr/local/git/binexport PATH 保存退出。 最后要刷新下环境变量：1source /etc/profile 验证1git --version 安装nginx推荐掘金上的一篇：https://juejin.im/post/5bd7a6046fb9a05d2c43f8c7]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用redux-thunk实现ajax数据请求]]></title>
    <url>%2F2018%2F09%2F23%2Fredux-thunk%2F</url>
    <content type="text"><![CDATA[前言redux-thunk 是一个流行的用来处理异步操作的redux中间件，作为一个新手，如果你并不知道具体哪些场景需要使用这个中间件，那么就不要用它，就像官方所说的这样： If you’re not sure whether you need it, you probably don’t. redux-thunk 常用来处理一些请求操作，这里以 axios 请求为例，来演示redux-thunk 的配置使用。 安装&amp;&amp;配置使用npm安装即可：1npm install --save redux-thunk 这里要讲下它的配置，按照官方文档很简单就能配置好：12345678910111213import &#123; createStore, applyMiddleware &#125; from &apos;redux&apos;// 在同级目录引入reducerimport reducer from &apos;./reducer&apos;// 引入redux-thunkimport thunk from &apos;redux-thunk&apos;// 创建storeconst store = createStore( reducer, applyMiddleware(thunk)) 上面的配置就是可以用的，参考文档：redux-thunk 在这里想补充一点的是多个中间件使用时怎么配置。由于我会用到 Redux DevTools 这个浏览器插件来调试 redux，这个也需要我们在代码端配置好的，现在的场景就是我要配置devtools的代码，也要配置redux-thunk 的代码，往后可能还要使用到其他中间件，所以需要了解一下它们结合的配置。好在也有文档给出示范，参考 redux-devtools-extension 我的具体配置为： 1234567891011121314import &#123; createStore, applyMiddleware, compose &#125; from &apos;redux&apos;const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(&#123;&#125;) : compose;const enhancer = composeEnhancers( applyMiddleware(thunk),);const store = createStore( reducer, enhancer)export default store 如果需要再使用其他中间件，加到 applyMiddleware 中 thunk 后面即可。 使用在不使用 redux-thunk 的情况下，axios 请求一般是放在 componentDidMount 这个生命周期里的，现在用到了 redux-thunk ，我们可以将请求放到 action里，我们创建一个文件 actionCreator.js，专门用来创建action所用，现在我们就来创建一个用来请求的action：12345678910import axios from &apos;axios&apos;export function getList()&#123; return ()=&gt;&#123; axios.get(&apos;https://www.easy-mock.com/mock/5ba7324d774ea0691ff86d5e/test/list&apos;) .then(res=&gt;&#123; console.log(res) &#125;) &#125;&#125; 使用redux-thunk中间件后，创建的action可以返回一个函数，函数里执行请求操作，此时在页面组件里即可使用这个action，如：12345678910111213141516// App.js文件，一个页面组件，代码不完整，仅供参考import store from &apos;./store&apos;import &#123; getList &#125; from &apos;./store/actionCreator.js&apos;class App extends Component &#123; // ... componentDidMount()&#123; const action = getList() store.dispatch(action) &#125; // ... &#125; 当我们dispatch这个action时，action里的函数会自动执行，可在浏览器端调试查看。但是目前提交并不会影响store状态，因为我们虽然执行了action的函数，但没有执行提交真正action的操作，所以我们需要回到actionCreator.js文件里继续完善我们的代码：1234567891011export function getList()&#123; return (dispatch)=&gt;&#123; axios.get(&apos;https://www.easy-mock.com/mock/5ba7324d774ea0691ff86d5e/test/list&apos;) .then(res=&gt;&#123; dispatch(&#123; type:&apos;CHANGE_LIST&apos;, data: res.data.data &#125;) &#125;) &#125;&#125; 上面代码中，返回的函数里可以把dispatch作为参数传进去，最终通过dispatch提交真实的action。 以上就是通过redux-thunk实现axios请求的简单流程。]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>redux-thunk</tag>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[服务器部署NeteaseCloudMusicApi]]></title>
    <url>%2F2018%2F09%2F02%2Fmusic-api%2F</url>
    <content type="text"><![CDATA[前言最近对 NeteaseCloudMusicApi 这个项目很感兴趣，它是一个网易云音乐api的服务端项目，通过它的封装我们可以很好的调用网易云音乐的相关api，从而实现一个音乐播放器小应用。 虽然一直想做一个自己的音乐播放器，但也一直没动手，现在准备找工作了也不想折腾了。有时间的话，倒是想在小程序上实现下。说到小程序，就想到小程序调用接口需要是https的（开发时可以使用http），如果想上线的话，就意味着买了服务器外，还要自己配置https。没接触过https的配置，就先把这个sercice在服务端跑起来吧～ node安装 &amp;&amp; 文件上传关于服务器端的node安装，我一开始也是忘记的，好在我以前写过博客，直接查看 Linux环境部署Node.js。由此可见，写博客不是一点用没有的，没人看也可以自己当笔记看啊。 node安装好后，需要把 NeteaseCloudMusicApi 这个项目上传到服务器。首先把这个项目从github上拉到本地：1git clone git@github.com:Binaryify/NeteaseCloudMusicApi.git 拷到本地后无需执行安装操作，这些操作放到服务器上再执行。嫌弃名字长，可以重命名下，我这里命名为 music-api。接下来就是上传文件的操作了。 上传文件可以使用ftp工具，操作更方便，这里就不多说了，可以搜索到很多资料。我这里是mac环境，使用 scp 命令：1scp -r ~/Desktop/music-api root@39.108.161.158:/root/project 格式就是：1scp -r 本地文件地址 ip地址: 要上传到服务器的目录 注意：-r 参数要加上，表示递归上传，因为上传的是文件夹 上传完毕后，cd 到项目目录，执行npm install将依赖安装上，然后执行：1node app.js 此时项目已经启动，可以看到是在3000端口启动的，我在浏览器中输入：139.108.161.158:3000 就可以看到效果了。注意要换成你的服务器ip地址。 使用pm2如果使用node来启动程序，确实是可行的，但问题就是当你关掉终端时程序也关闭了，我们需要让服务器一直在执行这个服务，这样才能随时访问api，所以要使用pm2这样的工具来帮助我们管理服务。关于pm2更多的介绍可自行搜索。 遇到的坑我开始用ip加端口访问服务器时被拒绝了，我以为是80端口的问题，可是经查看后，端口是正常的，之后网上各种搜还是找不到解决方法。最后才知道是防火墙没配置3000端口，要在服务器后台管理那里加上3000端口的访问权限。我是阿里云的服务器，其他的服务商平台找对应服务。 后续会尝试配置https。]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mongodb增删改查常用命令总结]]></title>
    <url>%2F2018%2F08%2F22%2Fmongodb%2F</url>
    <content type="text"><![CDATA[前言去年我还折腾过mongodb，后来用不到也就没碰了，这就导致了我忘的一干二净，不得不感叹，编程这东西只要不用，就会忘没了。现在我想重拾mongodb，来总结一下常用命令，主要就是增删改查。 另外，关于mongodb数据的安装配置，我就不赘述了，推荐我之前写过的两篇博客： Windows下图文详解Mongodb安装及配置 Linux环境安装mongodb 这是我的博客园文章，还是有人看的，哈哈，不像这里都没人看。 启动数据库如果你还不会，看完我上面推荐的就会了～我自己目前的平台是mac，由于我是通过homebrew安装的，所以我的启动步骤是：123brew services start mongodbmongo 启动后打开http://localhost:27017/ 当你在浏览器页面看到下面这句，就说明启动成功了：1It looks like you are trying to access MongoDB over HTTP on the native driver port. 更多安装教程可以自行搜索，接下来我们就来看看一些常用命令。 创建数据库创建之前，我们看看当前有哪些数据库，使用：1show dbs 接下来创建一个新的数据库：1234567// 使用这个数据库，没有则会创建use test// 此时还没有创建成功，只有在其中创建一个集合时，这个新数据库才会创建成功db.user.insert(&#123;&quot;name&quot;:&quot;wj&quot;,&quot;age&quot;:18&#125;)// 上面命令在test数据库里新建了一个user集合，并插入了数据，此时再执行show dbs ，已经有了test数据库 插入（增加）数据前面已经提及了，格式如下：1db.集合名.insert(&#123;&quot;name&quot;:&quot;wj&quot;&#125;) 注意在使用这条命令前，要切换到对应数据库，比如：1use test 这样新增的集合就在这个数据库下，可以使用命令：1show collections 来查看当前数据库下有哪些集合 删除 删除当前数据库 1db.dropDatabase() 删除集合 1db.集合名.drop() 删除数据 1234db.集合名.remove(条件)// 比如要删除user集合下name为wj的数据，则db.user.remove(&#123;&quot;name&quot;:&quot;wj&quot;&#125;) 修改修改前要按条件查找的，例如我要把名为小明的同学的年龄修改为3岁，那么命令如下：1234db.user.update(&#123;&quot;name&quot;:&quot;小明&quot;&#125;, &#123;$set:&#123;&quot;age&quot;:3&#125;&#125;)// 上面命令的格式db.集合名.update(&#123;条件&#125;, &#123;$set:&#123;修改的值&#125;&#125;) 注意花括号不要写错，另外加上$set是修改，如果不加的话，就是后面的替换前面的，如：12345678// 修改前&#123; &quot;name&quot;:&quot;小明&quot;&#125;// 修改db.user.update(&#123;&quot;name&quot;:&quot;小明&quot;&#125;,&#123;&quot;age&quot;:20&#125;)// 修改后&#123; &quot;age&quot;:20&#125; 默认情况下，只会修改满足条件的第一条数据，如果希望修改所有满足条件的数据，加上{multi:true}，如：1db.user.update(&#123;&quot;sex&quot;:&quot;男&quot;&#125;, &#123;$set:&#123;&quot;age&quot;:30&#125;&#125;, &#123;multi:true&#125;) 查找关于查询的方式就比较多啦。 查询集合下所有数据 1db.user.find() //user是集合名 查询 age == 20 的数据 1db.user.find(&#123;&quot;age&quot;:20&#125;) 查询 age &gt; 20 的数据 （大于） 1db.user.find(&#123;&quot;age&quot;:&#123;$gt:20&#125;&#125;) 查询 age &lt; 20 的数据 （小于） 1db.user.find(&#123;&quot;age&quot;:&#123;$lt:20&#125;&#125;) 查询 age &gt;= 30 的数据 （大于或等于） 1db.user.find(&#123;&quot;age&quot;:&#123;$gte:20&#125;&#125;) 查询 age &lt;= 30 的数据 （小于或等于） 1db.user.find(&#123;&quot;age&quot;:&#123;$lte:20&#125;&#125;) 查询 age &gt;= 20 并且 age &lt;= 30 的数据 （且） 1db.user.find(&#123;&quot;age&quot;:&#123;$gte:20,$lte:30&#125;&#125;) 查询 name 中包含 wj 的数据 1db.user.find(&#123;&quot;name&quot;:/wj/&#125;) 查询 name 中以 w 开头的数据 1db.user.find(&#123;&quot;name&quot;:/^w/&#125;) 查询指定列的数据 12345678// 只查看name列db.user.find(&#123;&#125;,&#123;&quot;name&quot;:1&#125;) // 只查看age列db.user.find(&#123;&#125;,&#123;&quot;age&quot;:1&#125;) // 只查看name和age列db.user.find(&#123;&#125;,&#123;&quot;name&quot;:1,&quot;age&quot;:1&#125;) 查询指定列的数据，带条件（age &gt; 20） 1db.user.find(&#123;&quot;age&quot;:&#123;$gt:20&#125;&#125;,&#123;&quot;name&quot;:1,&quot;age&quot;:1&#125;) 排序 12345// 按照年龄来排序db.user.find().sort(&#123;&quot;age&quot;:1&#125;) // 升序db.user.find().sort(&#123;&quot;age&quot;:-1&#125;) // 降序 多条件查询 123db.user.find(&#123;&quot;name&quot;:&quot;wj&quot;,&quot;age&quot;:20&#125;)// 应该好理解，查询同时满足这两个条件的数据，前面忘记说了 查询前三条数据 1db.user.find().limit(3) 查询五条之后的数据 123db.user.find().skip(5)// 好理解，跳过前5条，显示的就是五条之后的数据 查询 5-10 之间的数据 1db.user.find().skip(5).limit(5) 或 查询 1db.user.find(&#123;$or:[&#123;&quot;age&quot;:20&#125;,&#123;&quot;age&quot;:30&#125;]&#125;) 查询第一条数据 1234db.user.findOne()//这样也可以哦db.user.find().limit(1) 总结我将遇到的增删改查命令都总结出来了，可能还有漏掉的，如果有人可以告诉我，那最好不过了。不过上面列出的基本够用了，如果上面的哪条命令不可实现，请注意符号是否写对，尤其是花括号的书写。如果真是我的错误，谁能告诉我一声呢？可惜，这里没人看啊。。。。。。]]></content>
      <categories>
        <category>mongodb</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo博客迁移到另一台电脑]]></title>
    <url>%2F2018%2F08%2F17%2Fmove-hexo%2F</url>
    <content type="text"><![CDATA[前言感觉好久没更新博客了，最近换了台新电脑，开心的同时就是要把一些数据做迁移了，其中最惦记的就是hexo博客怎么迁移，参考了网上的一些文章后，终于成功迁移，现在就把过程记录下，很简单的。 复制原电脑上的数据复制旧电脑上的hexo数据，注意不用全部复制，只需复制以下几个：12345_config.ymlpackage.jsonscaffolds/source/themes/ 把这些文件复制到新电脑上的新建文件夹里，如：hexo文件夹 安装 新电脑上需先安装有node环境 全局安装hexo 12// mac环境sudo npm install -g hexo 进入hexo目录，依次执行以下安装命令： 1234npm installnpm install hexo-deployer-git --savenpm install hexo-generator-feed --savenpm install hexo-generator-sitemap --save 检查： 12hexo ghexo s 此时可访问浏览器：http://localhost:4000/ 就可以看到博客了。整个过程还是很简单的，不确定是否所有情况都可以成功，但可一试。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[了解react中的虚拟DOM]]></title>
    <url>%2F2018%2F07%2F12%2Freact08%2F</url>
    <content type="text"><![CDATA[在我学习vue框架的时候，就时常听到虚拟DOM的概念，后来了解到vue2.0新增了虚拟DOM，那时我并不知道这会有什么意义，因为我只想关心怎么使用框架。时至今日，我在学习react，在网上浏览react相关文章的时候，虚拟DOM这一词汇也是被时常提及，可能是因为react框架是使用虚拟DOM的先行者吧。于是我就花了一些时间，简单地了解了一下，如果不去追究代码的实现，我也可以简单说说我的理解。 为什么需要虚拟DOM？可能本来我应该先说说什么是虚拟DOM，但这其实没啥可说的，我们就可以把它定义为js对象，但真要说起来可能也有很多东西可以说，关于这个网上已有一大堆好文，我就不去照搬了。我就想说说为啥需要虚拟DOM？其实很多像我这样的人可能不了解虚拟DOM，但是我们却知道它可以提高性能，那么它到底是怎么提高性能呢？ 设计一个框架在这里，我不写代码，我们来假设一下，如果我们自己来实现一个react框架，那么我们会怎么来实现？好吧，我们先借鉴一下react框架，来理个思路： state（数据层），本着不直接操作DOM而是操作数据的原则，我们会有一个数据存放的地方； jsx（模板），模板最终会生成DOM结构用于展示，其实jsx语法实现的内容就相当于模板； 数据 + 模板 结合，生成DOM结构，用于显示； state数据发生变化； 数据 + 模板 结合，生成新的DOM结构，并替换掉原先的DOM结构。 按照上面这五个步骤去设计我们的框架，这完全是没有大问题的。功能是可以实现了，但缺点也是很明显的，很多时候页面只会变化一小部分，如果每次变化都要重新渲染整个DOM结构，这显然大大消耗了性能。要知道我们在使用js时都是尽量避免直接操作DOM的，所以我们需要尝试改进。 改进框架我们知道上面步骤中需要改进的地方就是最后一步，我们不应该在数据变化时替换掉整个DOM结构，而是替换需要更改的地方，于是我们可以按如下步骤实现： state（数据层），本着不直接操作DOM而是操作数据的原则，我们会有一个数据存放的地方； jsx（模板），模板最终会生成DOM结构用于展示，其实jsx语法实现的内容就相当于模板； 数据 + 模板 结合，生成DOM结构，用于显示； state数据发生变化； 数据 + 模板 结合，生成新的DOM结构，不直接替换原先的DOM结构； 新的DOM和原始DOM作对比，找出差异部分； 找到差异的部分后，只替换需要变化的DOM结构； 上面的步骤，前四步还和以前一样，到了第五步时，我们先不直接替换整个DOM，而是在接下来比较新旧DOM，找到需要变更的地方，然后实现部分更新替换。现在，我们解决了这个整体替换DOM结构的大隐患，实现了局部更新，这听起来似乎性能嗖嗖的上去了。然鹅~聪明的你一定发现了，这里面有一个步骤似乎并不讨喜，那就是第六步，新旧DOM做对比。对比啥？是在对比DOM结构啊！这也是相当消耗性能的。搞了半天，其实性能并没有提升多少，说不定还下降了。所以，我们还需要改进！ 虚拟DOM的引入吁~终于扯到虚拟DOM上了，没错，接下来我们就加入虚拟DOM的概念来改进我们的框架。还记得我上面开始说的嘛，虚拟DOM你可以理解为就是一个js对象，不过这个对象里保存了DOM信息，我们一步一步看。 首先，前两步我们总是需要的： state（数据层）； jsx（模板）； 接下来，我们要结合数据和模板，但是这次我们先不直接生成DOM结构，而是生成虚拟DOM： 数据 + 模板 生成虚拟DOM （虚拟DOM是js对象，用来描述真实DOM信息），如： 123[&apos;div&apos;,&#123;id:&apos;root&apos;&#125;,[&apos;span&apos;,&#123;&#125;,&apos;hello world&apos;]]//上面对象所描述的信息就是：&lt;div id=&quot;root&quot;&gt; &lt;span&gt;hello world&lt;/span&gt; &lt;/div&gt; 用虚拟DOM结构生成真实的DOM结构，来显示，即 1&lt;div id=&quot;root&quot;&gt; &lt;span&gt;hello world&lt;/span&gt; &lt;/div&gt; state发生变化； 数据 + 模板 生成新的虚拟DOM，如： 123[&apos;div&apos;,&#123;id:&apos;root&apos;&#125;,[&apos;span&apos;,&#123;&#125;,&apos;hi&apos;]]//hello world 变成 hi 比较原始虚拟DOM和新的虚拟DOM，区别就是span中内容的变更； 直接改变DOM中span中的内容。 看到这，我想你对虚拟DOM有了大概的了解了。查看上面步骤，你可能也会疑问，生成虚拟DOM这里不会消耗性能吗？其实肯定会消耗一些性能的，但相比较直接生成真实DOM结构，肯定是大大降低消耗的，而且后面的对比差异就是直接对比js对象，不涉及DOM操作，这里也是大大提升了效率的。 以上就是我对虚拟DOM的简单理解，一些地方可能说的不太对，但我的意思应该是明显的吧，嘿嘿~ 最近在忙找新工作的事，其实也不忙。虽然收到几个offer，但不是自己喜欢的，哎，大家还是对应届生的能力有所怀疑啊，我表示无力，只能说我能力还是不足啊。多学学，继续加油。]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[redux体验]]></title>
    <url>%2F2018%2F06%2F18%2Freact07%2F</url>
    <content type="text"><![CDATA[在网上看过不少资料文档后，确认redux基础概念并不是想象中的难，为啥这么说呢，因为在我还没接触react时就到处听人说redux很难，所以我一直以为它很难上手。但在实际接触后，发现基本的概念并不难，甚至比当初刚接触vuex时更简单。当然了，难的我也还没接触到，现在只说最基础的。 核心概念关于redux的概念其实我也讲不好的，为了好理解，我尽量用自己的话描述下，到底对不对，说不好~ store：可以看成是一个容器，保存数据的地方，要注意的是，整个应用只能有一个 Store state：包含具体的数据，通过store.getState()可以拿到当前的数据，并且一个 State 对应一个 View action：state的变化会导致view的更新，页面中我们是不能直接接触state的，应该是触发view才能导致state变化，可以理解为action就是view发出的通知，表示state要变化了 reducer：在发出action通知后，要更新state了，这个更新state的过程就是reducer，它是一个函数，接收action和state作为参数，对应更新state 我知道，刚来就看这么多概念是没用的，可以结合下面说的例子慢慢看。 感受一下redux通常人们都把redux和react在一起说，但事实上这两个是解耦的，redux不一定要用在react应用上。为了演示方便，我们还是使用create-react-app脚手架，不过开始时，我们不结合react，而是单独看看它的使用。 将脚手架src目录下的所有文件全删除，新建一个index.js文件，写入：1234567891011121314151617181920// 引入createStore，用以创建storeimport &#123;createStore&#125; from &apos;redux&apos;// 创建reducerfunction reducer(state=0, action)&#123; switch(action.type)&#123; case &apos;ADD&apos;: return state+1 case &apos;REMOVE&apos;: return state-1 default: return 10 &#125;&#125;// 新建storeconst store = createStore(reducer)//查看当前stateconsole.log(store.getState()) 当你敲完这些代码，运行后，可以在控制台看到输出了10。我们来一行行看。 首先，引入了createStore，只看名字我们也知道了，是用来创建store的，它是一个函数，传入reducer作为参数即可创建出store。 再来看reducer函数，它并不是一定要以reducer作为函数名的，你可以自定义。它有两个参数，一个是state，它就是包含具体数据的，可以初始化为0，它可以是字符串，对象等多种类型。第二个参数action是view层传过来的，它包含通知信息，保存在type属性中，它的type属性值也是我们自己定义的，根据传来的信息进行不同的state更新。上面代码还没涉及到action的分发，后面再说。 接下来，就是把新建的reducer作为参数传入到createStore中，从而创建store了，store中的getState方法可以拿到当前state。输出的结果是10，因为我们并没有发送action来提示更新state，所以默认返回了10，这些看代码也很好理解。那么接下来，我们尝试发送一次更新需求：12345// 发送ADD需求store.dispatch(&#123;type:&apos;ADD&apos;&#125;)// 再查看当前stateconsole.log(store.getState()) 结合reducer的代码，也可以明白现在打印的就是11了，action就是通过dispatch发送的，它本质上就是一个对象，一般type属性必写，之后也可以自定义其他属性。好了，现在redux的基本概念已经走了一遍，当然实际中不可能这么简单，这里只做演示。接下来，我们结合react再来写一个实际的小例子。 简单计数器结合react来做一个简单的计数器吧，把index.js文件改成如下：1234567891011121314151617181920212223242526272829303132import React from &apos;react&apos;import ReactDOM from &apos;react-dom&apos;import &#123;createStore&#125; from &apos;redux&apos;import reducer from &apos;./reducer.js&apos;const store = createStore(reducer)class App extends React.Component&#123; remove()&#123; store.dispatch(&#123; type:&apos;REMOVE&apos; &#125;) &#125; add()&#123; store.dispatch(&#123; type:&apos;ADD&apos;, text:2 &#125;) &#125; render()&#123; return ( &lt;div&gt; &lt;input type=&quot;button&quot; value=&quot;-&quot; onClick=&#123;this.remove.bind(this)&#125;/&gt; &lt;span&gt;&#123;store.getState()&#125;&lt;/span&gt; &lt;input type=&quot;button&quot; value=&quot;+&quot; onClick=&#123;this.add.bind(this)&#125;/&gt; &lt;/div&gt; ) &#125;&#125;ReactDOM.render(&lt;App/&gt;,document.getElementById(&apos;root&apos;)) 上面代码也没有啥可说的，都看得懂，注意的是我在add函数中的action里多加了一个text属性，这个属性也是能被传到reducer里的，可以用于state的计算。 再来新建一个reducer.js文件，用来写reducer文件：12345678910export default function reducer(state=0,action)&#123; switch(action.type)&#123; case &apos;ADD&apos;: return state + action.text case &apos;REMOVE&apos;: return state - 1 default: return state &#125;&#125; 现在运行浏览器，可以看到页面效果了，但点击按钮时，你会发现数字并没有增加，打开控制台，也没有报错。这是什么原因呢？ 原因是在于没有监听state的变化，view是不会自动更新state的，我们需要手动监听state的变化，这时我们需要store.subscribe这个方法，Store 允许使用store.subscribe方法设置监听函数，一旦 State 发生变化，就自动执行这个函数。那么想一想，我们监听谁呢？ 其实监听的方式不止一种，在这里有一种比较好理解的。每当state变化时，监听函数就会自动执行，那我们让组件重新渲染不就行了，重新渲染的组件一定是最新的state，所以我们可以将index.js文件的最后改造一下： 1234567function render()&#123; ReactDOM.render(&lt;App/&gt;,document.getElementById(&apos;root&apos;))&#125;render()store.subscribe(render) 这时，我们就可以在页面中执行数字的加减了。注意到，当点击加时，会加2个数，是因为执行加的时候，是加上了action.text，参考代码。 好了，redux的基本使用就这些了，一些更高级的用法以后再说。（其实看我懒不懒了~）]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Redux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[react路由]]></title>
    <url>%2F2018%2F06%2F14%2Freact06%2F</url>
    <content type="text"><![CDATA[react与vue一样，做SPA就要用到路由功能。我们做WEB端路由，需要用到的是react-router-dom这个库，它帮助我们实现react路由功能。另外，为了方便起见，代码演示使用react脚手架create-react-app。关于脚手架的使用可自己搜索。废话不多说，直接撸~ 基本使用首先我修改下脚手架，将/src/index.js入口文件清空，用来写我们的演示代码，将/public/index.html模板文件删掉不必要的干扰代码，如下：123456789101112&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#000000&quot;&gt; &lt;title&gt;React App&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;root&quot;&gt;&lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 切换到index.js文件，首先引入我们需要的模块：123import React from &apos;react&apos;;import ReactDOM from &apos;react-dom&apos;;import &#123;BrowserRouter as Router, Route, Link&#125; from &apos;react-router-dom&apos; 前两个不必多说了，而第三个就是我们要用到的路由库，在引入前别忘记下载了：1npm install --save react-router-dom 我们在react-router-dom中引入了三个东西，其中，Router是容器，它里面就包含了我们的路由内容，Route是定义真正路由组件的，而Link就是定义切换链接的，类似vue中的router-link，简单使用如下： 123456789101112131415161718192021222324252627282930// 首页组件const Home = () =&gt; ( &lt;div&gt; &lt;h1&gt;这是首页&lt;/h1&gt; &lt;/div&gt;)// 用户页组件const User = () =&gt; ( &lt;div&gt; &lt;h1&gt;这是用户页&lt;/h1&gt; &lt;/div&gt;)ReactDOM.render( &lt;Router&gt; &lt;div&gt; &lt;ul&gt; &lt;li&gt;&lt;Link to=&quot;/home&quot;&gt;首页&lt;/Link&gt;&lt;/li&gt; &lt;li&gt;&lt;Link to=&quot;/user&quot;&gt;用户页&lt;/Link&gt;&lt;/li&gt; &lt;/ul&gt; &lt;Route path=&quot;/home&quot; component=&#123;Home&#125;&gt;&lt;/Route&gt; &lt;Route path=&quot;/user&quot; component=&#123;User&#125;&gt;&lt;/Route&gt; &lt;/div&gt; &lt;/Router&gt;, document.getElementById(&apos;root&apos;)) 代码中也可以看到，Router起到容器作用，其本身也是一个组件，需要注意的是，Router下只能有一个根元素，这里即div。先看Link，它有一to属性，很明显代表的是要链接的地址，再看Route，它的path属性表明路由的路径，与Link的to属性值要对应起来，而component属性指出当前路径所对应的界面（其本质就是对应到一个组件，当链接到当前路径后，展示组件内容）。 怎么样，react路由是不是很简单？其实刚接触时，我有点不习惯这种写法，毕竟受vue影响大了，哈哈~不过当我再写一遍时，我觉得react的路由上手更简单点，至少很直观 ，也许当初我先学react的话，会对vue的路由更不习惯。 嵌套路由如果说当初刚学vue路由时，我可能不知道怎么定义嵌套路由，但是现在初学react路由时，我自己按着想法，却也把嵌套路由搞出来了，一切也是因为它很直观。因为react路由也是组件形式，那么我在父路由组件里，再写一个子路由不就行了嘛，形式都是一样的，如下：1234567891011121314151617181920212223242526272829303132// xiaomingconst Xiaoming = () =&gt; ( &lt;div&gt; 我是小明 &lt;/div&gt;)// xiaohongconst Xiaohong = () =&gt; ( &lt;div&gt; 我是小红 &lt;/div&gt;)// 用户页组件const User = () =&gt; ( &lt;div&gt; &lt;h1&gt;这是用户页&lt;/h1&gt; &lt;Router&gt; &lt;div&gt; &lt;ul&gt; &lt;li&gt;&lt;Link to=&quot;/user/xiaoming&quot;&gt;小明&lt;/Link&gt;&lt;/li&gt; &lt;li&gt;&lt;Link to=&quot;/user/xiaohong&quot;&gt;小红&lt;/Link&gt;&lt;/li&gt; &lt;/ul&gt; &lt;Route path=&quot;/user/xiaoming&quot; component=&#123;Xiaoming&#125;&gt;&lt;/Route&gt; &lt;Route path=&quot;/user/xiaohong&quot; component=&#123;Xiaohong&#125;&gt;&lt;/Route&gt; &lt;/div&gt; &lt;/Router&gt; &lt;/div&gt;) 如上，我在/user路由组件里，再写了两个子路由，形式和父路由完全一样，这样就完成了嵌套路由的实现，同理也可继续嵌套下去。而嵌套路由在vue里的实现是配置children，很明显刚学时，我肯定是不知道是要配置children的。不过用这么久vue了，我还是很喜欢vue这个框架的，也习惯了它的设计思想，而react让我看到了不同的设计思想。我相信存在即合理，这两种模式我都喜欢，哈哈又扯多了。 动态路由react的动态路由匹配与vue的基本类似，也是以冒号开头加参数。我们将上述例子中的user子路由修改下，我们不明确指向是xiaoming还是xiaohong，而是使用动态路由来自动识别，如下：1234567const Person = () =&gt; ( &lt;div&gt; // .... &lt;/div&gt;)&lt;Route path=&quot;/user/:name&quot; component=&#123;Person&#125; &gt;&lt;/Route&gt; 现在，我要求输入不同的name时，浏览器会显示不同的内容。其实关键就是Person组件该怎么写了，再进一步就是怎么拿到name的值了，这时候我们也会想到react应该会替我们做好这些的。其实，name参数值会被传入到Person组件里，存在props里，而函数定义的组件中，props是以参数形式传进去的。我们可以打印props就会知道name值存在props.match.params中：12345const Person = (props) =&gt; ( &lt;div&gt; &#123;props.match.params.name&#125; &lt;/div&gt;) 知道了怎么获得动态参数，我们就把这个例子完善好：12345678910111213141516171819202122232425262728const Person = (props) =&gt; &#123; if(props.match.params.name === &apos;xiaoming&apos;)&#123; var a = &apos;我是小明&apos; &#125;else&#123; var a = &apos;我是小红&apos; &#125; return ( &lt;div&gt;&#123;a&#125;&lt;/div&gt; )&#125; // 用户页组件const User = () =&gt; ( &lt;div&gt; &lt;h1&gt;这是用户页&lt;/h1&gt; &lt;Router&gt; &lt;div&gt; &lt;ul&gt; &lt;li&gt;&lt;Link to=&quot;/user/xiaoming&quot;&gt;小明&lt;/Link&gt;&lt;/li&gt; &lt;li&gt;&lt;Link to=&quot;/user/xiaohong&quot;&gt;小红&lt;/Link&gt;&lt;/li&gt; &lt;/ul&gt; &lt;Route path=&quot;/user/:name&quot; component=&#123;Person&#125; &gt;&lt;/Route&gt; &lt;/div&gt; &lt;/Router&gt; &lt;/div&gt;) 上述代码的功能与之前写的一样，只是用动态路由来实现的。当然我这种写法是很 low的，实际开发中应该不会这么写，我只是把过程讲出来，方便理解。 react路由就先讲这么多了，我也实在讲不出花来~]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React React-Router</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[react组件设置样式]]></title>
    <url>%2F2018%2F06%2F03%2Freact05%2F</url>
    <content type="text"><![CDATA[本篇主要介绍给组件设置样式时，准确说是给JSX里的标签设置样式时要注意的地方。 class当要给组件添加class时，不能直接写成class，应该写成className:12345class Demo extends React.Component&#123; render()&#123; return &lt;div className=&apos;div1&apos;&gt;&lt;/div&gt; &#125;&#125; 这主要因为class是JavaScript的保留字。而且JSX 的特性更接近 JavaScript 而不是 HTML , 所以 React DOM 使用 camelCase 小驼峰命名来定义属性的名称，而不是使用 HTML 的属性名称。 style除了通过添加class来设置样式外，我们也可以使用style内联样式。只不过这跟以往写的有些不同，你需要将样式内容用双花括号包起来，如下：12345class Demo extends React.Component&#123; render()&#123; return &lt;div style=&#123;&#123;color:&apos;white&apos;,fontSize:&apos;16px&apos;&#125;&#125;&gt;&lt;/div&gt; &#125;&#125; 这跟vue里的mustache语法很像，也是双大括号，但是这里应该理解为一层花括号里包含一个对象，react将这个对象渲染为内联样式。另外你需要注意的是，遇到font-size这种的要写成小驼峰命名形式，不然会出错。]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[react组件通信]]></title>
    <url>%2F2018%2F06%2F01%2Freact04%2F</url>
    <content type="text"><![CDATA[说到组件，那就不能不说组件通信。个人觉得相对于vue，react的通信比较容易理解。 父组件向子组件通信react是单向数据流，数据主要从父节点传递到子节点（通过props）。这种传递方式也是比较简单：123456789101112131415// 子组件class Son extends React.Component&#123; render()&#123; return &lt;div&gt;&#123;this.props.title&#125;&lt;/div&gt; &#125; &#125;// 父组件class Parent extends React.Component&#123; render()&#123; return &lt;Son title=&quot;我是父组件传给子组件的值&quot;/&gt; &#125;&#125;ReactDOM.render(&lt;Parent/&gt;,app) 子组件向父组件通信因为react是单向数据流，数据只能有父组件传递到子组件，所以要想从子组件更新父组件，需要一个取巧的方法，那就是利用回调函数，简单概述就是：父组件通过props传递一个回调函数到子组件中，这个回调函数可以更新父组件，子组件就是通过触发这个回调函数，从而使父组件得到更新 123456789101112131415161718192021222324252627282930// 子组件 class Son extends React.Component&#123; render()&#123; return &lt;button onClick=&#123;this.props.handleChange&#125;&gt;点我可以改变父组件的状态值&lt;/button&gt; &#125; &#125; // 父组件 class Parent extends React.Component&#123; constructor()&#123; super() this.state=&#123; val:0 &#125; &#125; change()&#123; let newVal = this.state.val + 1 this.setState(&#123; val:newVal &#125;) &#125; render()&#123; return &lt;div&gt; &lt;Son handleChange=&#123;this.change.bind(this)&#125;/&gt; &lt;p&gt;&#123;this.state.val&#125;&lt;/p&gt; &lt;/div&gt; &#125; &#125; 这次，父组件通过props传一个回调函数给子组件，子组件通过触发这个回调函数来更新父组件的状态。 除了这两种最普遍的通信外，还有其他情况的通信，比如兄弟组件等，这里先不说了，准备等我遇到了再说。]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[react事件]]></title>
    <url>%2F2018%2F05%2F30%2Freact03%2F</url>
    <content type="text"><![CDATA[事件处理React 元素的事件处理和 DOM元素很相似，主要有两点不同： React事件绑定属性的命名采用驼峰式写法，而不是小写 如果采用 JSX 的语法你需要传入一个函数作为事件处理函数，而不是一个字符串(DOM元素的写法) 123456//DOM元素&lt;button onclick=&quot;test()&quot;&gt;&lt;/button&gt;//react&lt;button onClick=&#123;test&#125;&gt;&lt;/button&gt; 写个小例子：123456789101112class Demo extends React.Component&#123; show()&#123; alert(&apos;hello&apos;) &#125; render()&#123; return &lt;button onClick=&#123;this.show&#125;&gt;点击&lt;/button&gt; &#125; &#125;ReactDOM.render(&lt;Demo/&gt;,app) 上例中，当点击按钮时，调用 show函数，注意要用this调用，this指向组件本身。关于this，来单独说下。 this我们来改变一下上面的例子： 12345678910111213141516171819202122class Demo extends React.Component&#123; constructor()&#123; super() this.state = &#123; val:0 &#125; &#125; show()&#123; this.setState(&#123; val:this.state.val+1 &#125;) &#125; render()&#123; return &lt;div&gt; &lt;button onClick=&#123;this.show&#125;&gt;点击&lt;/button&gt; &lt;p&gt;&#123;this.state.val&#125;&lt;/p&gt; &lt;/div&gt; &#125; &#125; 此例中，我们为组件添加状态，并显示在页面中，当点击按钮时，状态的数值加1。不过运行的结果可能不会如意，报一个错误：1...Cannot read property &apos;setState&apos; of undefined 提示setState未定义，为了验证，我们在show函数里打印一下this，结果显示时 undefined。到这里，其实我开始也是比较迷惑的，函数里的this指向undefined还是第一次见。 在查看文档后才知道，原来在react里，类的方法默认是不会绑定 this 的，也就是说我们必须手动绑定this。绑定到哪？我们的一切操作都是基于这个组件的，所以应该绑定到当前类上。怎么绑定？直接在JSX 回调函数上绑定，如下：1&lt;button onClick=&#123;this.show.bind(this)&#125;&gt;点击&lt;/button&gt; 这里的this还是指向当前类的，只是类的方法不会默认绑定this而已。 默认行为和事件冒泡说到事件，就不得不说默认行为和事件冒泡，因这两点在react里也有些不同。 取消默认行为在react里，必须明确的使用 preventDefault来取消默认行为，像return false是没用的。 写个例子，阻止a标签的跳转： 12345678handleClick(e)&#123; e.preventDefault() console.log(&apos;hello&apos;)&#125;render()&#123; return &lt;a href=&quot;https://www.baidu.com&quot; onClick=&#123;this.handleClick&#125;&gt;点击&lt;/a&gt;&#125; 事件冒泡在react里，使用e.stopPropagation()阻止事件冒泡可能会没效，因为这里的冒泡分为三种情况，情况不同方法也不同，在这里我找到一篇文章，说的很详细，我就不多啰嗦了，其实是偷懒，哈哈~传送门]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[react组件]]></title>
    <url>%2F2018%2F05%2F29%2Freact02%2F</url>
    <content type="text"><![CDATA[学习react应该就是学习它的组件化开发了，看看它和vue的组件相比有何不同？ 组件react组件有两种，分别是函数定义和类定义。 函数定义组件123function Demo()&#123; return &lt;h1&gt;hello world&lt;/h1&gt;&#125; 上面代码就创建了一个有效的组件，它是用函数返回了一个React元素，这种类型的组件为函数定义组件，我们可以正常使用它： 1234ReactDOM.render( &lt;Demo/&gt;, app) 记住ReactDOM.render()的第一个参数是要渲染的内容，组件不就是要展示的内容吗？只是组件的使用应写成标签形式，这点应该很熟悉，跟vue的一样。 这里有一个特别需要注意的地方，那就是组件名称必须以大写字母开头，不然无法渲染。 看到上面的代码，不知道你会不会有一种想法，一种下意识的想法，看代码：12345function Demo()&#123; return &lt;h1&gt;hello world&lt;/h1&gt;&#125;ReactDOM.render(Demo(),app) 看到了吗？我不把Demo写成标签形式，而是直接调用了，结果依然正确渲染了。细想下，这本该如此啊，因为函数返回的是JSX啊，这与直接写JSX并没有本事区别。此时，你要是把函数名写成小写也不会有影响了，因为它已经不是一个组件了：12345function demo()&#123; return &lt;h1&gt;hello world&lt;/h1&gt;&#125;ReactDOM.render(demo(),app) 类定义组件相对于函数定义组件，类定义组件才是最常用的，因为它允许我们更多的扩展。 类定义组件，其实就是es6中定义类的方法，只是react加入了一些东西：1234567class Demo extends React.Component&#123; render()&#123; return &lt;h1&gt;hello world&lt;/h1&gt; &#125;&#125;ReactDOM.render(&lt;Demo/&gt;,app) 上面就是类定义组件，熟悉es6的话，应该比较熟悉这种形式，在定义一个组件时，我们必须让它继承React.Component这个类，这样才能使用react的一些功能。 关于类定义组件，要讲得东西其实还是有几个的，在这之前，我们要了解两个和组件息息相关的概念：属性和状态。 组件的属性和状态组件有属性和状态，分别表示为props和state，它们的区别： 属性是由父组件传递给子组件的 状态是子组件内部维护的数据，当状态发生变化的同时，组件也会进行更新。当状态发生转换时会触发不同的钩子函数，从而让开发者有机会做出相应 属性（props）属性是写在父组件上的，可以传递给子组件：1234function Demo(props)&#123; return &lt;h1&gt;&#123;props.msg&#125;&lt;/h1&gt;&#125;ReactDOM.render(&lt;Demo msg=&apos;hello world&apos;/&gt;,app) 上面是函数定义组件的属性传递写法，Demo函数接收一个单一的“props”对象，这里包含了所有的父组件的属性，我们多写几个属性，打印props看看：12345678910111213function Demo(props)&#123; console.log(props) return &lt;h1&gt;&#123;props.msg&#125;&lt;/h1&gt;&#125;ReactDOM.render(&lt;Demo msg=&apos;hello world&apos; name=&apos;wj&apos; age=&apos;18&apos;/&gt;,app)//props打印结果&#123;age:&quot;18&quot;,msg:&quot;hello world&quot;,name:&quot;wj&quot;&#125; 需要注意的是，在react里要输出数据到模板里，用一个花括号即可，在vue里是两个花括号。 属性不仅仅可以是字符串，还可以是js的表达式：12const num = 5ReactDOM.render(&lt;Demo msg=&#123;num&gt;3?&apos;大于3&apos;:&apos;小于3&apos;&#125; name=&apos;wj&apos; age=&apos;18&apos;/&gt;,app) 这里就不多说了，react相对于vue，做了更少的限制，大胆去尝试吧，很多你觉得可以的，在react确实可以做到。 再来看看在类定义组件里使用props：1234567class Demo extends React.Component&#123; render()&#123; return &lt;h1&gt;&#123;this.props.msg&#125;&lt;/h1&gt; &#125; &#125;ReactDOM.render(&lt;Demo msg=&apos;hello world&apos; /&gt;,app) 这里使用props的唯一区别就是要使用this来调用，其他跟函数定义组件一样。 props有一个限制，那就是它的只读性，无论是使用函数或是类来声明一个组件，它决不能修改它自己的props。如果需要改变props值来更新视图显然是不行的。这就需要state状态。 状态（state）状态适用于类定义的组件，状态是私有的，完全受控于当前组件。我们需要使用状态，则需要定义类组件。12345678910111213class Demo extends React.Component&#123; constructor()&#123; super() this.state=&#123; msg:&apos;hello world&apos; &#125; &#125; // 注意这里不要写逗号，详见es6之class render()&#123; return &lt;div&gt;&#123;this.state.msg&#125;&lt;/div&gt; &#125; &#125;ReactDOM.render(&lt;Demo/&gt;,app) 上面代码添加了状态，在这里你可能需要知道一些es6的class知识，推荐阮一峰老师的es6教程。我们知道Demo类式继承React.Component这个类的，算子类，它必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类自己的this对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用super方法，子类就得不到this对象。 在this对象上添加状态state，这个状态是属于Demo私有的，使用this.state.xxx的方式调用。 状态受控于当前组件，是可以改变的，这里我们来改变下状态，注意这里会使用到事件，以后会详细介绍react事件：12345678910change()&#123; this.state.msg = &apos;改变了&apos;&#125;render()&#123; return &lt;div&gt; &lt;input type=&apos;button&apos; value=&apos;改变&apos; onClick=&#123;this.change.bind(this)&#125; /&gt;&lt;br/&gt; &lt;p&gt;&#123;this.state.msg&#125;&lt;/p&gt; &lt;/div&gt;&#125; 上面代码中，当我们点击按钮时，state数据会改变，同时视图也会更新。但是当你运行后，会发现视图并不会更新。原因在哪里？ 其实问题就出在了this.state上，我们不能直接使用this.state来变更状态，这样不会重新渲染组件，我们需要使用setState()方法来更新状态：1234567change()&#123; //this.state.msg = &apos;改变了&apos; this.setState(&#123; msg:&apos;改变了&apos; &#125;)&#125; 这样，当状态更新后，组件才会重新渲染。 总结我也不知道怎么总结了，很多细节我也没说到，这算是自己的一个回顾吧。与vue相比，react似乎限制地更少，这也意味着我们可以更灵活地组织我们的代码。学习过程中应该大胆尝试，你想到的，react作者们可能也想到了。另外在vue里，组件不是必须的，更多的关注点是在数据层上，但在react里，组件是不可缺少的，一切开发都是基于组件的（至少现在我是这么觉得），这也反映了两大框架的不同思想吧，不管如何，多学学总不会差。]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[react初体验]]></title>
    <url>%2F2018%2F05%2F28%2Freact01%2F</url>
    <content type="text"><![CDATA[前言在我的日常开发中，我用的只有vue，对于大名鼎鼎的react和angular，我一点都不了解。想当初开始学框架时，纠结许久，无非是react更具挑战性，学会了再学vue更容易，而vue简单易上手且功能也不输react。当然这些都是从度娘听说的。 使用vue许久，感觉还是很爽的，虽然开始时有点困难，毕竟那时es6也不熟悉。我不止一次庆幸我学的是vue，不仅是因为它易学易用，关键是它的生态也越来越好，国内很多新东西出来，都是先基于vue的，比如现在很火的mpvue小程序框架，就是基于vue的，这使得我学会一个vue就可以容易地做很多事。 之所以有庆幸学的是vue的心态，可能也是因为不了解其他两大框架，先入为主地觉得vue才是王道。我不知道其他两个框架是否很难入手，是否更加强大，但是vue已经能够解决我的日常开发了，我本来也不想去接触react和angular的，可能觉得舍易求难是浪费时间。不过另一方面，我又很好奇，它们真的那么难吗？和vue比到底有什么区别？思来想去，我觉得还是直接试水比较好，不就是一个框架吗？想学就学咯！于是，我选择了react，因为angula似乎真的难点！ hello world当初学vue时，我只要引入一个文件vue.js就好了，学react，我竟然要引入三个文件，天啊，我第一想法就是这个好复杂啊。 react.js：实现React核心逻辑，且于具体的渲染引擎无关，从而可以跨平台公用。 react-dom.js：包含了具体的DOM渲染更新逻辑，以及服务端渲染的逻辑，与浏览器相关。 browser.js：支持JSX语法必须。 在这里，我用的react是15.6.2版本，听说稳定点，browser.js是5.8.38版本，莫名不敢用新的，哈哈~ 1234567891011121314&lt;body&gt; &lt;div id=&quot;app&quot;&gt;&lt;/div&gt; &lt;script src=&quot;./common/react.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;./common/react-dom.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;./common/browser.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/babel&quot;&gt; ReactDOM.render( &lt;h1&gt;hello world&lt;/h1&gt;, document.getElementById(&apos;app&apos;) ) &lt;/script&gt;&lt;/body&gt; 注意：script标签的type属性应写成text/babel，不然识别不了react语法 上面代码是截取body部分，此时已经可以在浏览器里输出hello world了。虽然这段代码看起来很简单，但是我开始写时，我是恐慌的，因为ReactDOM.render()看起来很复杂的样子，为啥不是vue那样，直接两个花括号写到html里呢，那样多简单。 确实很容易受vue影响，对于这种方法有点接受不了，但这其实并不复杂。ReactDOM.render()的第一参数很明显就是我们要输出到浏览器的内容，那么第二个参数其实是要输出到的位置。 当我们明白两个参数的意义时，可能觉得懂了，其实不然。这里面可是有一个核心的东西，那就是JSX。在我还没接触JSX，总是听别人说JSX时，我觉得它可能是一个很复杂的语法。但当我接触后才知道，这货很“纯”，是一个奇怪的变量：1var ele = &lt;h1&gt;hello world&lt;/h1&gt; 这种看起来可能有些奇怪的标签语法既不是字符串也不是 HTML，它就是JSX。那么不禁想问，它到底是什么数据类型？123console.log(typeof ele)//object 显然，它是一个对象，这么看的话，JavaScript是在内部给它处理了。事实也确实如此： 12345678910ReactDOM.render( React.createElement(&apos;h1&apos;,null,&apos;hello world&apos;), document.getElementById(&apos;app&apos;))ReactDOM.render( &lt;h1&gt;hello world&lt;/h1&gt;, document.getElementById(&apos;app&apos;)) 上面两种方法结果完全相同。React.createElement()的第一个参数是标签，第二个参数是标签属性，第三个参数是标签内容。很显然这样写比较繁琐，且不直观。所以我们应该直接使用JSX语法，这也是官方建议的。 其实我们直接写JSX语法，Babel 转译器也会把 JSX 转换成为 React.createElement() 方法的调用，而这个方法会返回一个对象，类似这样：123456&#123; type: &apos;h1&apos;, props: &#123; children: &apos;Hello, world&apos; &#125;&#125; 这样的对象被称为 “React 元素”。它代表所有你在屏幕上看到的东西。React 通过读取这些对象来构建 DOM 并保持数据内容一致。 关于JSX还有两点需要注意： 当有多个标签时，在最外层需加上一个包裹标签，例如： 1const ele = &lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt; JSX允许自由分段 1234const ele = &lt;div&gt; &lt;span&gt;&lt;/span&gt; &lt;p&gt;&lt;/p&gt; &lt;/div&gt; 总结在react里使用ReactDOM.render()来向页面渲染内容，它有两个参数，第一个参数是渲染内容，第二个参数是渲染位置。 JSX是JavaScript的一种扩展语法，让一个变量直接赋值为标签。它与React.createElement()方法调用的结果是一样的，返回一个对象，叫做“React元素”。react推荐使用JSX语法。 啰嗦一大堆，其实是表达自己的心情，初见react让我觉得复杂不好用，但是越接触越发现它是有它独特的魅力的。不管哪一个框架，我们都没资格去评定好不好，只有适不适合自己。]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[koa初体验]]></title>
    <url>%2F2018%2F05%2F23%2Fkoa%2F</url>
    <content type="text"><![CDATA[出于对koa的好奇，于是想要了解下。 koa 是由 Express 原班人马打造的，致力于成为一个更小、更富有表现力、更健壮的 Web 框架。 如果说koa是下一代web开发框架，那么上一代毫无疑问就是express了，其实用哪个都无所谓啦，只要自己用的顺手就好。反正我哪个都用不到，至少目前是的，哈哈。 开始新建一个文件夹koaDemo，其内执行：123npm init -ynpm install koa 我们讨论的是koa2。而koa默认安装的就是2的版本，所以无需指定为koa2。 用koa来输出“hello world”，新建一个文件server.js，输入以下内容：12345678const Koa = require(&apos;koa&apos;)const app = new Koa()app.use(async ctx =&gt; &#123; ctx.body = &apos;hello world&apos;&#125;)app.listen(3000) node server.js执行文件，此时打开浏览器，访问：http://localhost:3000/，熟悉的hello world就显示出来啦。 可以看到，koa真的很精简，短短几行就能启动一个服务，虽然这些express都能办到，但是koa肯定也是有它的独到之处的。其中之一就是使用 async+await 处理异步，上面代码中已用到了async，接下来就介绍下async和await。 async与awaitkoa的一大优点就是No Callback，很多人使用koa也是因为这个。没有回调得力于async和await的使用，关于它们的概念我也讲不好，网上有很多文档可以参考，你只需要知道它可以解决回调地狱的问题，使异步操作更优雅。具体怎么个优雅法，我们来慢慢看。 回调函数处理异步在最初的时候，我们使用回调函数来处理异步，来看个例子：123456789101112function test() &#123; setTimeout(()=&gt;&#123; console.log(&apos;执行了&apos;) &#125;, 2000)&#125;test()console.log(&apos;结束&apos;)// 执行结果结束执行了 上面代码的执行结果显然不符合预期的，所以我们需要借助回调函数：1234567891011121314function test(fn) &#123; setTimeout(()=&gt;&#123; console.log(&apos;执行了&apos;) fn() &#125;, 2000)&#125;test(()=&gt;&#123; console.log(&apos;结束&apos;)&#125;)// 执行结果执行了结束 显然，这才是我们想要的结果，回调虽然看起来很简单，但是当业务逻辑多起来时，容易形成回调地狱，比如：1234567ajax(()=&gt;&#123; ajax(()=&gt;&#123; ajax(()=&gt;&#123; // ... &#125;) &#125;)&#125;) 三层，不能再多了！三层都快受不了了，更别说更复杂的了，当维护这样的代码时，是真的难受。所以后来es6给了一个好的解决方法，那就是promise。 promise关于promise诞生的前前后后我就不介绍了，因为我也不太熟悉啊，不过它的使用方法我们还是要掌握的，推荐阮一峰老师的es6教程，传送门：promise 来写一个promise的例子，假设三个异步操作，依次执行：12345678910111213141516171819202122232425function delay(val)&#123; return new Promise((resolve, reject)=&gt;&#123; setTimeout(()=&gt;&#123; resolve(val) &#125;,2000) &#125;)&#125;delay(&apos;第一步执行&apos;) .then((val)=&gt;&#123; console.log(val) return delay(&apos;第二步执行&apos;) &#125;) .then((val)=&gt;&#123; console.log(val) return delay(&apos;第三步执行&apos;) &#125;) .then((val)=&gt;&#123; console.log(val) &#125;) // 结果第一步执行第二步执行第三步执行 promise的使用，解决了一层层回调嵌套的窘境，这很大程度上解决了回调地狱的问题，清晰的代码结构也容易维护。 promise很好用，但是代码量还是有点的，如果可以，何不试试async+await呢？ async+await虽然我也想把这两个概念讲的很明白，但是我不能啊，网上有大佬讲的很清楚，在这我就简单说下。 你需要知道的是，async用来定义一个异步函数，它总会返回异步对象，即promise，而await必须在async内部使用，用来处理异步结果。 说不如做，就拿上面的例子来试下async的方法：123456789101112131415161718192021222324function delay(val)&#123; return new Promise((resolve, reject)=&gt;&#123; setTimeout(()=&gt;&#123; resolve(val) &#125;,2000) &#125;)&#125;async function start()&#123; let result1 = await delay(&apos;第一次执行&apos;) console.log(result1) let result2 = await delay(&apos;第二次执行&apos;) console.log(result2) let result3 = await delay(&apos;第三次执行&apos;) console.log(result3)&#125;start() // 结果第一步执行第二步执行第三步执行 如上代码，同步的方式写异步，再也看不到回调了，是不是很爽。在koa中，重点使用async+await的方式，所以不懂得童鞋还得加把劲啊。即使不用koa，但这么炫酷的方法你确定不试试？ 总结写完后才发现，我不是介绍koa的，反而介绍了async，虽然没讲得明白。麻雀虽小五脏俱全，koa的更多使用，下次再说咯。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>koa</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[express中实现文件上传]]></title>
    <url>%2F2018%2F03%2F19%2Fupload-file%2F</url>
    <content type="text"><![CDATA[介绍之所以要单独说下文件上传，是因为body-parser中间件不支持文件类型获取。我们平时都是用这个中间件去获取post数据，但是如果post过来的是一个文件，那它就不管用了。所以，我们需要新的中间件，那就是multer。 multerMulter 是一个 node.js 中间件，用于处理 multipart/form-data 类型的表单数据，它主要用于上传文件。 关于它的用法，可以参考文档：multer 注意：Multer 不会处理任何非 multipart/form-data 类型的表单数据。 什么是 multipart/form-data类型？表单标签form上有一个enctype属性，它有三种值： application/x-www-form-urlencoded：在发送前编码所有字符（默认） multipart/form-data：不对字符编码。在使用包含文件上传控件的表单时，必须使用该值。 text/plain：空格转换为 “+” 加号，但不对特殊字符编码。 上传一个文件现在就来实现一个文件上传。在这之前，确保你已经安装了express和multer。 app.js12345678910111213141516171819202122const express = require(&apos;express&apos;)const app = express()//引入multerconst multer = require(&apos;multer&apos;)//注册一个对象，dest里放的是上传的文件存储的位置，可以在当前目录下，建立一个static目录，上传的文件都放在这里const upload = multer(&#123;dest: &apos;./static/&apos;&#125;)//使用中间件，没有挂载路径，应用的每个请求都会执行该中间件。any表示接受一切，具体参考文档。app.use(upload.any())//在req.files中获取文件数据app.post(&apos;/&apos;,function(req, res)&#123; console.log(req.files) res.send(&apos;上传成功&apos;)&#125;)app.listen(3000) 现在准备一个表单1234567891011121314&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form action=&quot;http://localhost:3000/&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; 选择文件： &lt;input type=&quot;file&quot; name=&quot;file1&quot;&gt;&lt;br&gt; &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 注意：在form里的enctype属性上必须填”multipart/form-data”。 现在执行app.js文件1node app.js 在浏览器打开表单html文件，并上传一个文件，我上传了一张图片，然后在命令行里可以看到打印的数据，比如我的是：12345678[ &#123; fieldname: &apos;file1&apos;, originalname: &apos;html5.jpg&apos;, encoding: &apos;7bit&apos;, mimetype: &apos;image/jpeg&apos;, destination: &apos;./static/&apos;, filename: &apos;2047b375bfaa68f984af6ac19e8df455&apos;, path: &apos;static\\2047b375bfaa68f984af6ac19e8df455&apos;, size: 9029 &#125; ] 可以看到req.files是一个数组，因为可能不止传一个文件，每个文件的信息也很清晰就不多介绍了。 需要注意的是filename这个属性，它就是上传后的文件名，可以到static目录里去看，它就是这样一个文件名且没有后缀，我们现在打不开它的，如果加上后缀，就可以打开了。我的图片是jpg格式，我在文件名后面加上.jpg就可以正常打开了。 手动添加后缀名太麻烦了，既然用了node，那我们何不进一步处理，直接拿到有后缀名的文件呢？ 优化其实思路很简单，看打印出的文件信息，我们可以从originalname里拿到文件后缀名，又可以在path里拿到文件路径。好了，要做的无非就是拿到后缀名再重命名嘛。使用node中的path和fs模块，很容易实现。 123456789101112131415161718192021222324252627282930313233const express = require(&apos;express&apos;)const app = express()const multer = require(&apos;multer&apos;)//引入 path 和 fsconst path = require(&apos;path&apos;)const fs = require(&apos;fs&apos;)const upload = multer(&#123;dest: &apos;./static/&apos;&#125;)app.use(upload.any())app.post(&apos;/&apos;,function(req, res)&#123; console.log(req.files) //拿到后缀名 var extname = path.extname(req.files[0].originalname); //拼接新的文件路径，文件加上后缀名 var newPath = req.files[0].path + extname; //重命名 fs.rename(req.files[0].path, newPath, function(err)&#123; if(err)&#123; res.send(&apos;上传失败&apos;) &#125;else&#123; res.send(&apos;上传成功&apos;) &#125; &#125;)&#125;)app.listen(3000)]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>express</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[target与currentTarget的区别]]></title>
    <url>%2F2018%2F03%2F10%2Ftarget_currentTarget%2F</url>
    <content type="text"><![CDATA[介绍在事件处理函数的event对象中，有一个target属性，我们都知道它是指事件目标。其实在event中还有一个currentTarget属性，不知道这个属性还好，知道的话可能会弄混与target的区别。 先看下定义（参考JS高级程序设计）： target：事件的目标 currentTarget：其事件处理程序当前正在处理事件的那个元素 看完这两个定义，或许还是似懂非懂的感觉，我一直觉得实践是最好的验证方法，所以来写个极其简单的例子吧。 实例html文件，写一个简单的列表12345&lt;ul&gt; &lt;li&gt;111&lt;/li&gt; &lt;li&gt;222&lt;/li&gt; &lt;li&gt;333&lt;/li&gt;&lt;/ul&gt; js文件1234567var aUl = document.getElementsByTagName(&apos;ul&apos;)[0];aUl.addEventListener(&apos;click&apos;,function(event)&#123; console.log(this); console.log(&apos;target: &apos;,event.target); console.log(&apos;currentTarget: &apos;,event.currentTarget);&#125;,false) 当看到这个例子，你或许就明白我要说啥了。运行程序，会发现，target指向你所点击的那个li元素，而currentTarget始终指向ul元素。 所以，我可以用自己的话再来定义一下这两个属性了： target：指向触发事件的元素。上例中，是li触发的事件，冒泡到ul上执行的 currentTarget：指向添加事件的元素。很好懂啊，上例中，事件是绑定在ul上的 另外需要注意的是，this始终等于currentTarget，在上例中，始终指向ul，不信的话也可以试下啊，我们将事件绑定到第二个li上试试：12345678var aUl = document.getElementsByTagName(&apos;ul&apos;)[0];var aLi = aUl.getElementsByTagName(&apos;li&apos;)[1];aLi.addEventListener(&apos;click&apos;,function(event)&#123; console.log(this); console.log(&apos;target: &apos;,event.target); console.log(&apos;currentTarget: &apos;,event.currentTarget);&#125;,false) 结果就不用多说了。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js中对象的属性类型]]></title>
    <url>%2F2018%2F02%2F20%2Fprop-type%2F</url>
    <content type="text"><![CDATA[简介在 javaScript 中，对象的属性分为两种类型：数据属性和访问器属性。 数据属性它包含的是一个数据值的位置，在这可以对数据值进行读写。数据属性包含 4 个特性： configurable：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或能否把属性修改为访问器属性，默认为 true enumerable:表示能否通过 for-in 循环返回属性 writable：表示能否修改属性的值 value：包含该属性的数据值。默认为 undefined 查看对应属性的特性Object.getOwnPropertyDescriptor()函数 Object.getOwnPropertyDescriptor() 方法返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性） 12345678910111213141516//定义一个对象var obj = &#123; name:&apos;w&apos;, age:18&#125;//查看name属性的特性console.log(Object.getOwnPropertyDescriptor(obj, &apos;name&apos;))//结果&#123;configurable:true,enumerable:true,value:&quot;w&quot;,writable:true&#125; 修改属性特性Object.defineProperty()函数 Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。 123456789101112131415161718//修改name属性特性Object.defineProperty(obj, &apos;name&apos;, &#123; configurable: false, enumerable: false, value: &quot;ww&quot;, writable: false&#125;)//查看console.log(Object.getOwnPropertyDescriptor(obj, &apos;name&apos;))//结果&#123;configurable: false,enumerable: false,value: &quot;ww&quot;,writable: false&#125; 访问器属性这个属性不包含数据值，包含的是一对 get 和 set 方法，在读写访问器属性时，就是通过这两个方法来进行操作处理的。它也包含 4 个属性特性： configurable：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或能否把属性修改为访问器属性，默认为 false enumerable:表示能否通过 for-in 循环返回属性,默认为 false get：在读取属性时调用的函数,默认值为 undefined set：在写入属性时调用的函数,默认值为 undefined 注意：访问器属性不能直接定义，要通过 Object.defineProperty()这个方法来定义。 在上面对象上定义 hello 属性，为访问器属性 1234567891011121314151617181920212223242526var obj = &#123; name: &apos;w&apos;, age: 18&#125;;//定义hello访问器属性Object.defineProperty(obj, &apos;hello&apos;, &#123; get: function () &#123; console.log(&apos;get被触发了&apos;) &#125;, set: function (val) &#123; console.log(&apos;set被触发了，参数是：&apos; + val) &#125;&#125;)//console.log(Object.getOwnPropertyDescriptor(obj, &apos;name&apos;))console.log(Object.getOwnPropertyDescriptor(obj, &apos;hello&apos;))//结果&#123;configurable:false,enumerable:false,get:ƒ (),set:ƒ (val)&#125; 检测 get 和 set（在控制台操作更直观） 1234567//赋值obj.hello = &apos;hi&apos;;//==&gt; set被触发了，参数是：hi//查看obj.hello//==&gt; get被触发了 可知，set 函数的参数既是所赋的值，赋值即传参]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript严格模式]]></title>
    <url>%2F2018%2F01%2F13%2Fes-strict%2F</url>
    <content type="text"><![CDATA[介绍ECMAscript 5添加了“严格模式”，会使得Javascript在更严格的条件下运行，设立”严格模式”的目的，主要有以下几个： 消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为; 消除代码运行的一些不安全之处，保证代码运行的安全； 提高编译器效率，增加运行速度； 为未来新版本的Javascript做好铺垫。 说明此文参考了阮一峰的Javascript 严格模式详解，对于原文中的例子我都一一测试了，有个别测试结果是不一样的，后面已做说明。那些我也是比较迷惑的，如果有错误，希望指出。 开始启用严格模式很简单，只需要一个字符串1&quot;use strict&quot;; 但是这个字符串的位置不是随意放的，有两种： 全局严格模式，放在脚本文件的第一行 局部严格模式，放在函数内第一行（推荐） 为什么推荐使用在函数内的严格模式呢？因为全局严格模式不利于代码的合并，团队多人开发时，合并代码可能会使别人某些代码失效。 所以更好的做法是，借用局部严格模式方法，将整个脚本文件放在一个立即执行的匿名函数之中：123456(function ()&#123; &quot;use strict&quot;; // some code here&#125;)(); 思考 为什么是一个字符串启用严格模式？是为了兼容老旧的浏览器，一行字符串不会对不兼容严格模式的浏览器产生影响。 改变严格模式带来了很多语法的改变。 变量赋值前必须声明通常我们可以直接对一个变量赋值而不需要提前var声明，此时这个变量就是全局变量。严格模式禁止这种用法，全局变量必须显式声明。123&quot;use strict&quot;a = 2; //报错 因此，严格模式下，变量都必须先用var命令声明，然后再使用。 禁止使用with正常模式下，我们可以使用with来改变作用域链，如：12345678910var obj = &#123; num:1&#125;function test()&#123; var num = 2; with(obj)&#123; console.log(num); &#125;&#125;test(); //1 但是在严格模式下，禁用了with，报错：1234&quot;use strict&quot;;test();//Strict mode code may not include a with statement 创建eval作用域正常模式下，Javascript语言有两种变量作用域（scope）：全局作用域和函数作用域。严格模式创设了第三种作用域：eval作用域。 正常模式下，eval语句的作用域，取决于它处于全局作用域，还是处于函数作用域。严格模式下，eval语句本身就是一个作用域，不再能够生成全局变量了，它所生成的变量只能用于eval内部。1234567&quot;use strict&quot;;var x = 5;console.log(eval(&apos;var x = 10;console.log(x)&apos;)); //10console.log(x); //5 局部this必须赋值正常模式下，函数编译时，内部this指向的是全局window对象，但是严格模式时，this不再指向window，而是undefined。你需要自己手动赋值，赋值是什么，this就是什么。123456789&quot;use strict&quot;;console.log(&apos;window: &apos;,this); //windowfunction test()&#123; console.log(&apos;test: &apos;,this); //undefined&#125;test(); 因此，使用构造函数时，如果忘了加new，this不再指向全局对象，而是报错。12345function fn()&#123; &quot;use strict&quot;; this.a = 1;&#125;;fn(); // 报错 arguments对象的限制arguments是函数的参数对象，严格模式对它的使用做了限制。 不允许对arguments赋值1234567&quot;use strict&quot;;var arguments = 5; //报错function arguments()&#123; //报错 //some code&#125; arguments不再追踪参数的变化1234567891011121314151617181920//正常模式function test(a)&#123; a = 5; console.log([a,arguments[0]])&#125;test(2); //[5,5]//严格模式&quot;use strict&quot;;function test(a)&#123; a = 5; console.log([a,arguments[0]])&#125;test(2); //[5,2] 禁止使用arguments.calleearguments.callee可以返回正被执行的函数对象123456789//正常模式function test()&#123; console.log(arguments.callee);&#125;test();// test()&#123;// console.log(arguments.callee);//&#125; 严格模式不允许再使用arguments.callee 禁止使用caller正常模式下，可以使用caller返回一个函数对象，这个函数调用了当前函数：123456789101112function test()&#123; demo();&#125;function demo()&#123; console.log(demo.caller);&#125;test(); // test()&#123;// demo();//&#125; 严格模式禁止再使用caller。所以两个长得很像的callee和caller在严格模式下都不能再使用。 函数必须声明在顶层什么意思呢？ 我们都只到es6引入了块级作用域，为了与新版本接轨，严格模式只允许在全局作用域或函数作用域的顶层声明函数。也就是说，不允许在非函数的代码块内声明函数。 1234567891011//正常模式if(true)&#123; function fn()&#123; console.log(&apos;fn&apos;); &#125; fn(); // fn&#125;fn(); // fn 1234567891011&quot;use strict&quot;;if(true)&#123; function fn()&#123; console.log(&apos;fn&apos;); &#125; fn(); // fn&#125;fn(); // 报错 fn is not defined 重名错误对象不能有重名属性按照 阮一峰的文章，在严格模式下，对象是不准有重名属性的，会报错。但实际测试中（谷歌浏览器），严格模式下，对象属性重名并不会报错，而是像正常模式一样，后面的覆盖前面的。12345678&quot;use strict&quot;;var obj = &#123; a:1, a:2&#125;console.log(obj.a); //2 后来了解到，ES6中的严格模式已经允许对象有重名的属性。如果有了解的，可以告诉我下。 函数不能有重名的参数正常模式下，参数重名，后面的覆盖前面的：12345function test(a,a,b)&#123; console.log(a,a,b);&#125;test(1,2,3); // 2 2 3 但在严格模式下，会报错：12345678&quot;use strict&quot;;function test(a,a,b)&#123; console.log(a,a,b);&#125;test(1,2,3);// 报错 Duplicate parameter name not allowed in this context 禁止删除变量按照 阮一峰的文章，严格模式下无法删除变量。只有configurable设置为true的对象属性，才能被删除。 但是即使在正常模式下，用var声明的变量也是无法删除的，不管是全局声明还是局部声明，不过可以删除对象属性：1234567var obj = &#123; a:2&#125;delete obj.a; //trueobj //&#123;&#125; 在严格模式下，用var声明的变量也是无法删除的，但对象的属性也是可以删除的123456789&quot;use strict&quot;;var obj = &#123; a:2&#125;delete obj.a; //trueobj //&#123;&#125; 需要注意的是，在正常模式下，即使变量不可以删除，你也可以写入 delete，不会报错，但是严格模式下，删除不了的变量不可以用delete：123456789&quot;use strict&quot;;var a = 2;var obj = &#123; b:3&#125;delete a; //报错，不可删除就不能使用delete 禁止八进制表示法正常模式下，整数的第一位如果是0，表示这是八进制数，比如0100等于十进制的64。严格模式禁止这种表示法，整数第一位为0，将报错。123&quot;use strict&quot;;var num = 0100;console.log(num); // 报错 但是es6提供了一种八进制数的新表示法，就是在数值前加上0o（第一个是数字0，第二个是字母o） 123&quot;use strict&quot;;var num = 0o100;console.log(num); 保留字为了向将来Javascript的新版本过渡，严格模式新增了一些保留字：implements, interface, let, package, private, protected, public, static, yield。 使用这些词作为变量名将会报错。123&quot;use strict&quot;;var let; //报错 说到保留字let，我们知道es6已经加入了let和const，const不管是在正常模式还是严格模式下都不可作为变量名。因为各大浏览器自行增加的const保留字，所以不能作为变量名的。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[数组去重（只讲两种方法）]]></title>
    <url>%2F2018%2F01%2F12%2Farray-unique%2F</url>
    <content type="text"><![CDATA[介绍数组去重的方法不少，每个人都有自己喜欢用的方法，我只讲两种我喜欢用的方法。 方法一123456789101112131415Array.prototype.unique = function()&#123; var obj = &#123;&#125;; var arr = []; var len = this.length; for(var i=0;i&lt;len;i++)&#123; if(!obj[this[i]])&#123; obj[this[i]] = &apos;a&apos;; arr.push(this[i]); &#125; &#125; return arr; &#125; 此方法利用对象属性不能重复的性质，将数组值遍历到对象的属性上，如果属性名的属性值已存在，则忽略，如果属性值不存在，则添加新属性，并赋值（注意赋的值不能为假），然后将这个属性名push到新数组里，遍历结束，返回新数组。 方法二123Array.prototype.unique = function()&#123; return Array.from(new Set(this))&#125; ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。 同时ES6为数组新增了Array.from方法，用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。 new Set可以将数组转化为Set数据结构，并去重，如：123new Set([1,2,3,3])//&#123;1, 2, 3&#125; 再用Array.from将Set转回为数组]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[判断数组类型的方法]]></title>
    <url>%2F2018%2F01%2F11%2Fisarray%2F</url>
    <content type="text"><![CDATA[介绍我们都知道js中可以使用typeof来判断数据类型，但是有时它并不很精确，就拿数组来说，判断的结果是object。所以我们需要用其他方法来准确判断到底是不是一个数组。 方法有四个方法，很简单： instanceof 语法：object instanceof constructor意思是说object的原型链上是否有constructor的prototype，object是检测的对象，constructor是一个构造函数，结果返回布尔值 12var arr = [];arr instanceof Array; //true constructor 语法：object.constructor 返回object的构造函数 12var arr = [];arr.constructor == Array; //true Object.prototype.toString.call()12var arr = [];Object.prototype.toString.call(arr); //&quot;[object Array]&quot; Array.isArray()12var arr = [];Array.isArray(arr); //true 此方法可能有兼容问题 总结综合上面提到的方法，写一个比较完善的方法： 1234567891011function isArrayFn(v)&#123; if(Array.isArray)&#123; return Array.isArray(v) &#125;else&#123; return Object.prototype.toString.call(v) === &apos;[object Array]&apos;; &#125;&#125;var arr=[];console.log(isArrayFn(arr)); //true]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[构造函数的继承]]></title>
    <url>%2F2018%2F01%2F10%2Finherit%2F</url>
    <content type="text"><![CDATA[什么是继承 简单来说，就是一个对象使用另一个对象的属性和方法，并且不要影响原对象的功能。 构造函数的继承属性继承一般属性继承是通过call或apply方法，将父对象的构造函数绑定在子对象上 有一个父对象：1234function Father(hobby, lastName)&#123; this.hobby = hobby this.lastName = lastName&#125; 有一个子对象需继承父对象的属性：1234567function Son(hobby, lastName)&#123; Father.call(this,hobby,lastName)&#125;var son = new Son(&apos;reading&apos;,&apos;wang&apos;);// &#123;hobby: &quot;reading&quot;, lastName: &quot;wang&quot;&#125; 方法继承方法的继承是通过原型（prototype）来完成 直接继承prototype还是上面的例子，我们在Father的原型上添加一个showHobby的方法：12345678function Father(hobby, lastName)&#123; this.hobby = hobby this.lastName = lastName&#125;//添加Father.prototype.showHobby = function()&#123; alert(this.hobby);&#125; 现在子对象需要继承这个方法，可以将子对象的原型指向父对象，即：12345function Son(hobby, lastName)&#123; Father.call(this,hobby,lastName)&#125;//添加Son.prototype = Father.prototype; 此时Son的实例上就有showHobby方法了：1234var son = new Son(&apos;reading&apos;,&apos;wang&apos;);son.showHobby();//reading 现在虽然实现了方法的继承，但是上面这个方法还是有问题的： 第一个问题：constructor的指向问题 constructor是对象的一个属性，指向它的构造函数，每个prototype对象上都有这个属性 按理说，Son的实例，即son，它的构造函数就是Son，然而在这里，它指向了Father：1son.constructor == Father 出现这样的原因也很明了，因为Son的原型对象指向了Father的原型对象，Father的prototype上的constructor显然是Father。 这结果会导致继承链的紊乱，son明明是Son构造的。所以我们需要手动修改constructor指向，即添加：1Son.prototype.constructor = Son; 第二个问题：任何对Son.prototype的修改都反应到了Father.prototype上我们在Son的原型上添加一个name属性：1Son.prototype.name = &apos;John&apos;; 查看Father原型的变化： 1Father.prototype 现在，Father的原型上也有了name属性，且值也为john，而且第一个问题中的在Son原型上修改constructor也会反应到Father上，现在Father实例上的constructor也指向了Son。 这下更乱套了，所以为了同时解决这两个问题，有个改进的方法。 利用空对象做中介整个例子完整代码：123456789101112131415161718192021222324252627282930313233343536function Father(hobby, lastName)&#123; this.hobby = hobby this.lastName = lastName&#125; Father.prototype.showHobby = function()&#123; alert(this.hobby);&#125;//创建 Father的实例var father = new Father(&apos;eating&apos;,&apos;wang&apos;);function Son(hobby, lastName)&#123; Father.call(this,hobby,lastName)&#125;//创建中介空对象，并将它的原型指向 Father的原型var F = function()&#123;&#125;F.prototype = Father.prototype;//Son的原型指向为 F的实例Son.prototype = new F();//修改 Son的 constructor指向Son.prototype.constructor = Son;//Son实例var son = new Son(&apos;reading&apos;,&apos;wang&apos;);//验证 console.log(son.constructor); //Son //Son原型添加 name属性 Son.prototype.name = &apos;John&apos;; console.log(son.name); //jhon console.log(father.name); //undefined 关键部分就是：1234567//创建中介空对象，并将它的原型指向 Father的原型var F = function()&#123;&#125;F.prototype = Father.prototype;//Son的原型指向为 F的实例Son.prototype = new F();//修改 Son的 constructor指向Son.prototype.constructor = Son; 这样就可以无错地实现了构造函数的继承。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>构造函数</tag>
        <tag>继承</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于构造函数]]></title>
    <url>%2F2018%2F01%2F06%2FconstructedFn%2F</url>
    <content type="text"><![CDATA[介绍对于构造函数的使用很多人都很熟悉，但是对其原理很多也是比较模糊的，虽然这并不影响使用，但是熟悉了原理，才会少犯错。简单叙述下，算是给自己加深个印象。 构造函数的使用想必都很熟悉1234567function Foo(name, age)&#123; this.name = name; this.age = age;&#125;var foo = new Foo(&apos;xiaoming&apos;, 15)// &#123;name: &quot;xiaoming&quot;, age: 15&#125; 构造函数名的首字母是大写，但却并不是非得是大写，只是一种惯例，为了区别其他函数，构造函数始终都应该以一个大写字母开头，而非构造函数则应该以一个小写字母开头。所以即使你小写也不会有问题，但是肯定不建议这么做，提出来也只是为了让你注意不要小写首字母。 构造函数也是函数，只不过它可以用来创建对象。不过必须使用new操作符，使用new创建实例会经历4个步骤： 创建一个新对象 将构造函数的作用域赋给新对象（this指向新对象） 执行构造函数中的代码（this赋值） 返回新对象 总结： 函数名首字母大写 没有显示创建对象 直接将属性和方法赋给了this对象 没有return 语句（默认存在） 内部原理根据上面的4个步骤，不难知道构造函数的内部原理，每当声明一个构造函数时： 在函数体最前面隐式的加上this = {} 执行this.xxx = xxx 隐式地返回this 如：123456function Foo(name, age)&#123; var this = &#123;&#125;; //隐式加上 this.name = name; this.age = age; return this; //隐式返回&#125; 为了验证是否正确，我们可以自己实现一个构造函数，不过不是使用this，而是使用that： 123456789function Foo(name, age)&#123; var that = &#123;&#125;; that.name = name; that.age = age; return that;&#125;var foo = Foo(&apos;xiaoming&apos;, 15);console.log(foo.name); //&apos;xiaoming&apos; 注意，这时我们不需要使用new操作符了，因为所有需要的步骤我们都已经添加了，这就是一个普通的函数，返回一个对象。 关于返回值我们都知道，构造函数默认返回了this，那么假使我们自己不小心添加了return语句会怎么样呢。不妨试一下： 12345678function Foo(name, age)&#123; this.name = name; this.age = age; return this;&#125;var foo = new Foo(&apos;xiaoming&apos;, 15);console.log(foo); //&#123;name: &quot;xiaoming&quot;, age: 15&#125; 显然，添加return this是不会有什么问题的。 现在我们返回一个普通值：1return 123; 如果你试了，会发现也不会影响结果，如果你再顺便试了一下返回字符串和布尔值，发现依旧不会影响结果。现在你知道我想说啥了，没错，当你试着返回一个对象时，结果就是那个对象了，继续试着返回数组和函数，也会影响结果，使得构造函数失去应有的作用。 总结 构造函数默认返回了this 如果手动返回了值类型，对结果没影响 如果手动返回了引用类型，该构造函数失效]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>构造函数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6函数和对象]]></title>
    <url>%2F2017%2F12%2F26%2Fes6-3%2F</url>
    <content type="text"><![CDATA[介绍本次介绍ES6函数和对象的一些扩展，更多详情参考：函数的扩展，对象的扩展 函数函数参数的默认值直接为函数的参数指定默认值123456function test(x,y=&apos;world&apos;)&#123; console.log(x,y);&#125;test(&apos;hello&apos;); //hello worldtest(&apos;hello&apos;,&apos;hello&apos;); //hello hello 参数变量是默认声明的，所以不能用let或const再次声明1234function test(x,y=&apos;world&apos;)&#123; let y = &apos;world&apos;; //error console.log(x,y); //error&#125; 参数默认值的位置 12345678910function f(x = 1, y) &#123; return [x, y];&#125;f() // [1, undefined]f(2) // [2, undefined])f(, 1) // 报错f(undefined, 1) // [1, 1]//带有默认值的参数应该放在末尾，这样才可以省略 作用域1234567891011121314151617181920212223242526//一旦设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域（context）。//等到初始化结束，这个作用域就会消失。var x = 1;function f(x, y = x) &#123; console.log(y);&#125;f(2) // 2f() //undefined//上面代码中，参数y的默认值等于变量x，在作用域里，x指向的是第一个参数x，而不是全局变量x。x没赋值时，y就是undefined。//另一种情况var x = 1;function f(y = x) &#123; console.log(y);&#125;f(2); //2f(); //1//这个作用域里面，变量x本身没有定义，所以指向外层的全局变量x rest 参数ES6 引入 rest 参数（形式为…变量名），用于获取函数的多余参数，这样就不需要使用arguments对象了。 当你不确定参数个数时，你可以这样做123456789101112131415var sum;function add(...args)&#123; for(var v of args)&#123; sum+=v; &#125; return sum;&#125;add(1,2); //3add(1,2,3); //6add(1,2,3,4,5,6); //21//add函数是一个求和函数，利用 rest 参数，可以向该函数传入任意数目的参数。//这就是扩展运算符的使用，rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中 箭头函数这个使用率很高的。ES6 允许使用“箭头”（=&gt;）定义函数123456let fn = v =&gt; v*2;//等同于let fn = function(v)&#123; return v*2;&#125;console.log(fn(2)); //4 如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。1234567891011let fn = () =&gt; 2;//等同于let fn = function()&#123; return 2;&#125;let fn = (num1,num2) =&gt; num1+num2//等同于let fn = function(num1,num2)&#123; return num1+num2;&#125; 如果加上{}，return不能省略的 1234567891011//当不写&#123;&#125;，且没有其他操作时，默认返回值let fn = () =&gt; 2;console.log(fn()) //2//当加上&#123;&#125;时，return不可省略let fn = () =&gt; &#123;2&#125;;console.log(fn()) //undefined//&#123;&#125;里要写完整的代码let fn = () =&gt; &#123;return 2&#125;console.log(fn()) //2 如果箭头函数只有一行语句，且不需要返回值1let fn = () =&gt; alert(1) this尤其要注意箭头函数里的this指向，函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象12345678910111213141516171819function foo() &#123; setTimeout(() =&gt; &#123; console.log(&apos;id:&apos;, this.id); &#125;, 100);&#125;var id = 21;foo.call(&#123; id: 42 &#125;); // id: 42//定时器里有个箭头函数，它的this指向的是定义时的对象，即foo。而foo的this指向了&#123;id：42&#125;这个对象，所以结果是42。//现在换回ES5的写法setTimeout(function()&#123; console.log(&apos;id:&apos;, this.id); &#125;, 100); //此时this指向的是window对象，所以this.id指的就是全局变量id，为21。 另外要注意的： 箭头函数不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。 不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。 不可以使用yield命令，因此箭头函数不能用作 Generator 函数。 对象属性的简洁表示法ES6 允许直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。 123456789101112131415161718192021222324252627282930//属性简写let name = &apos;xiaoming&apos;;let age = 20;let obj = &#123; name, age&#125;//等同于let obj = &#123; name:name, age:age&#125;//只要属性名和属性值变量同名即可//方法简写let obj = &#123; showName()&#123; alert(&apos;xiaoming&apos;); &#125;&#125;//等同于let obj = &#123; showName:function()&#123; alert(&apos;xiaoming&apos;); &#125;&#125; 属性名表达式在ES5中，使用字面量方式定义对象（使用大括号），只能使用标识符定义属性名：1234var obj = &#123; foo: true, abc: 123&#125;; 现在ES6允许字面量定义对象时，用表达式作为对象的属性名，即把表达式放在方括号内：12345678let key = &apos;num&apos;;let obj = &#123; [key]:123, [&apos;na&apos; + &apos;me&apos;]:&apos;jhon&apos;&#125;console.log(obj); // &#123;num: 123, name: &quot;jhon&quot;&#125; 表达式还可以用于定义方法名:1234567let obj1 = &#123; [&apos;h&apos; + &apos;ello&apos;]()&#123; console.log(&apos;hi&apos;); &#125;&#125;obj1.hello(); //hi 注意，属性名表达式如果是一个对象，默认情况下会自动将对象转为字符串[object Object]:123456const keyA = &#123;a:1&#125;;let obj2 = &#123; [keyA]:&apos;A&apos;&#125;console.log(obj2); //&#123;[object Object]: &quot;A&quot;&#125; Object.assign合并对象Object.assign方法用于对象的合并，将源对象的所有可枚举属性，复制到目标对象。第一个参数是目标对象，后面的参数都是源对象。123456789let o1 = &#123;&apos;a&apos;:1&#125;;let o2 = &#123;&apos;b&apos;:2&#125;;let o3 = &#123;&apos;c&apos;:3&#125;;Object.assign(o1,o2,o3);console.log(o1); //&#123;a: 1, b: 2, c: 3&#125; 如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。 12345678910//将上面例子改变一下let o1 = &#123;&apos;a&apos;:1,&apos;b&apos;:2&#125;;let o2 = &#123;&apos;b&apos;:3,&apos;c&apos;:4&#125;;let o3 = &#123;&apos;c&apos;:5&#125;;Object.assign(o1,o2,o3);console.log(o1); //&#123;a: 1, b: 3, c: 5&#125; 拷贝12345678var obj1 = &#123; &apos;a&apos;:1, &apos;b&apos;:2&#125;var obj2 = Object.assign(&#123;&#125;,obj1);console.log(obj2); //&#123;a: 1, b: 2&#125; 需要注意的是，Object.assign方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。1234567891011var obj1 = &#123; &apos;a&apos;:&#123; &apos;b&apos;:1 &#125;&#125;var obj2 = Object.assign(&#123;&#125;,obj1);obj1.a.b = 2;console.log(obj2.a.b); //2]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux环境安装mongodb]]></title>
    <url>%2F2017%2F12%2F23%2Flinux-mongodb%2F</url>
    <content type="text"><![CDATA[介绍上篇介绍了Linux环境下安装Node.js的步骤，紧接着来安装mongodb。另外，推荐我的另一篇 Windows下图文详解Mongodb安装及配置，先在Windows下熟悉下mongodb，再来看这篇文章会更容易明白。 安装步骤对应自己的服务器系统，去官网下载对应版本的mongodb，我是CentOS 7.4的，由于没找到CentOS的，我下载的是 mongodb-linux-x86_64-amazon-3.6.0.tgz 上传解压将下载好的安装包，通过ftp工具上传到服务器，我还是上传到/root目录下，上传后，执行解压命令：1tar -zxvf mongodb-linux-x86_64-amazon-3.6.0.tgz 解压后，会多了一个没有后缀的文件，即非压缩文件包，为了方便，我将它重命名为：mongodb-linux。 创建配置文件在/root目录里（你安装包的位置，可随意），此时有一个mongodb-linux文件，我们再新建一个mongodb文件夹：1mkdir mongodb 然后将mongodb-linux文件移入到这个文件夹：1mv mongodb-linux mongodb 之所以这么做，是为了更好的管理mongodb相关的文件，不要和其他要安装的文件搞混了。 在mongodb文件夹再里创建三个文件夹： 12345mkdir data //用来存放数据库数据mkdir logs //用来存放日志文件mkdir etc //用来存放配置文件 接下来，进入到logs文件夹里创建 mongo.log文件1touch mongo.log 再到etc文件夹里创建 mongo.conf文件1touch mongo.conf 通过vi命令打开mongo.conf编辑内容：1vi mongo.conf 输入上面命令后，进入编辑模式，按下 i 即可输入，输入的内容为：1234567dbpath=/root/mongodb/datalogpath=/root/mongodb/logs/mongo.loglogappend=truejournal=truequiet=trueport=27017 输入完后，按下esc退出编辑，再输入:wq 回车保存 此时整个文件夹的结构如下：1234567|-mongodb| |-data| |-etc| | |-mongo.conf| |-logs| | |-mongo.log| |-mongodb-linux 创建软链接同样，我们也为mongodb的命令创建软链接：123ln -s /root/mongodb/mongodb-linux/bin/mongo /usr/local/bin/mongoln -s /root/mongodb/mongodb-linux/bin/mongod /usr/local/bin/mongod 如果输入命令没报错，就是软链接成功了，你也可以到 /usr/local/bin 目录下查看一下123cd /usr/local/binls -la 此时你会看到你所创建的所有软链接，比如我的是： 包括了上次node的软链接 执行由于执行一个命令的时候不能再去执行下一个，所以可以开两个窗口测试 在第一个窗口，任意目录下输入：1mongod -f /root/mongodb/etc/mongo.conf -f指定了配置文件，在windows下是--config 此时再去第二个窗口，输入1mongo 此时熟悉的界面就出来了，可以执行数据库操作了，输入show dbs来检测一下吧。]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux环境部署Node.js]]></title>
    <url>%2F2017%2F12%2F23%2Flinux-node%2F</url>
    <content type="text"><![CDATA[介绍先前在阿里云ECS上部署Node.js，碰到不少坑，都是自己不仔细造成的，所以准备再部署一遍，并记录下来。我将我的服务器重置了，这次选择的是CentOS 7.4 64位，上次的是7.2的。 使用到的工具：Xshell5 ，链接服务器；Xftp5，上传工具 安装步骤你可以选择本地下载node.js，然后上传到服务器，也可以通过wget直接在服务器端下载。 wget命令下载Node.js安装包1wget http://cdn.npm.taobao.org/dist/node/v8.9.0/node-v8.9.0-linux-x64.tar.xz 对应版本的下载，你可以去node.js下载 该安装包是编译好的文件，解压之后，在bin文件夹中就已存在node和npm，无需重复编译。且默认下载到/root目录下。 解压文件切换到root目录，查看是否已有node-v8.9.0-linux-x64.tar.xz文件 123cd root/ ls -la 当文件存在时，直接解压1tar xvf node-v8.9.0-linux-x64.tar.xz 此时再次查看，你会发现多了一个没有后缀的文件node-v8.9.0-linux-x64 创建软链接通过创建软链接的方法，使得在任意目录下都可以直接使用node和npm命令：123ln -s /root/node-v8.9.0-linux-x64/bin/node /usr/local/bin/nodeln -s /root/node-v8.9.0-linux-x64/bin/npm /usr/local/bin/npm 注意后面的路径是 /usr/local/bin/node（或npm），路径不要写错 检查此时在任意目录下输入：12node -vnpm -v 都可以查看版本号了，此时node.js已部署成功。 如果没有成功，请注意一些路径问题，为了减少出错，你也可以将安装包重命名，比如：node。然后按照上面步骤重试。]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6数组]]></title>
    <url>%2F2017%2F12%2F22%2Fes6-2%2F</url>
    <content type="text"><![CDATA[介绍本次介绍数组的一些扩展方法，都是简单地总结下一些方法的使用，详细的请参考：数组的扩展 数组扩展运算符扩展运算符（spread）是三个点（…），将一个数组转为用逗号分隔的参数序列 12345console.log(...[1, 2, 3])// 1 2 3console.log(1, ...[2, 3, 4], 5)// 1 2 3 4 5 有了扩展运算符，对于许多操作能更方便了12345678910111213141516171819202122232425262728293031323334353637//复制数组const a1 = [1, 2];const a2 = [...a1];// 或const [...a2] = a1; //合并数组var arr1 = [&apos;a&apos;, &apos;b&apos;];var arr2 = [&apos;c&apos;];var arr3 = [&apos;d&apos;, &apos;e&apos;];var arr4 = [...arr1,...arr2,...arr3]// [ &apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;, &apos;e&apos; ]//还记得解构赋值吧，你也可以结合扩展运算符一起用const [first, ...rest] = [1, 2, 3, 4, 5];first // 1rest // [2, 3, 4, 5]//注意：如果将扩展运算符用于数组赋值，只能放在参数的最后一位，否则会报错const [...rest,first] = [1, 2, 3, 4, 5]; //报错//扩展运算符还可以将字符串转为真正的数组[...&apos;hello&apos;]// [ &quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot; ]//还有一个很棒的功能let oLi = document.querySelectorAll(&apos;li&apos;);let array = [...oLi];//看明白了吗，可以将类数组转为真正的数组 //当然只有部署了 Iterator 接口的对象才可以才能用扩展运算符转为真正的数组 Array.from()Array.from方法用于将两类对象转为真正的数组，分别是类似数组的对象和可遍历的对象 用于类似数组的对象123456789101112131415161718192021222324252627let obj = &#123; &apos;0&apos;:1, &apos;1&apos;:2, &apos;2&apos;:3, length:3&#125;;let arr = Array.from(obj);console.log(arr); //[1,2,3]//注意：对象的键值须是序号，不能是其他的，末尾要指定长度//键值不为序号let obj = &#123; &apos;a&apos;:1, &apos;b&apos;:2, &apos;c&apos;:3, length:3&#125;let arr = Array.from(obj); //[undefined, undefined, undefined]//不指定长度let obj = &#123; &apos;0&apos;:1, &apos;1&apos;:2, &apos;2&apos;:3&#125;let arr = Array.from(obj); //[] 用于可遍历的对象1234567891011let oLi = document.querySelectorAll(&apos;li&apos;);Array.from(obj).forEach(function (li) &#123; console.log(li);&#125;);//querySelectorAll方法返回的是一个类似数组的对象，可以将这个对象转为真正的数组，再使用forEach方法//只要是部署了 Iterator 接口的数据结构，Array.from都能将其转为数组Array.from(&apos;hello&apos;)// [&apos;h&apos;, &apos;e&apos;, &apos;l&apos;, &apos;l&apos;, &apos;o&apos;] Array.of()Array.of方法用于将一组值，转换为数组123456789Array.of(3, 11, 8) // [3,11,8]Array.of(3) // [3]Array.of(3).length // 1//注意它与new Array()的区别let arr1 = new Array(); //[]let arr2 = new Array(2); //[ , ,]let arr3 = new Array(1,2,3); //[1,2,3] fill()fill方法使用给定值，填充一个数组。123456789[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;].fill(7)// [7, 7, 7] 数组中已有的元素，会被全部抹去new Array(3).fill(7)// [7, 7, 7]//fill方法还可以接受第二个和第三个参数，用于指定填充的起始位置和结束位置[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;].fill(7, 1, 2)// [&apos;a&apos;, 7, &apos;c&apos;] includes()includes方法返回一个布尔值，表示某个数组是否包含给定的值123[1, 2, 3].includes(2) // true[1, 2, 3].includes(4) // false[1, 2, NaN].includes(NaN) // true]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ES6常用知识点总结（一）]]></title>
    <url>%2F2017%2F12%2F19%2Fes6-1%2F</url>
    <content type="text"><![CDATA[介绍 ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。 ES6新增的东西很多，我们不可能马上就掌握所有知识点，所以在这把常用到的知识点总结下。 let 和 constletlet和var类似，都是用来声明变量的，但它和var又有些不同： let 声明的变量仅在包含它的代码块里有效 123456789//let实际上为 JavaScript 新增了块级作用域，let声明的变量只在包含它的 &#123;&#125; 里有效，在代码块外面访问不到它&#123; var a = 1; let b = 2;&#125;console.log(a); //1console.log(b); //Uncaught ReferenceError: b is not defined let 不存在变量提升 1234567//var情况console.log(a); //undefinedvar a = 1;console.log(b); //Uncaught ReferenceError: b is not definedlet b = 2; 暂时性死区 12345678910111213141516//只要块级作用域内存在let命令，它所声明的变量就“绑定”这个区域，不再受外部的影响，所以在let声明变量之前，这个变量都是不可用的，这块区域就是“暂时性死区”if(true)&#123; a = 1; //ReferenceError console.log(a); //ReferenceError let a; //此处结束死区 console.log(a); //undefined a = 2; console.log(a); //2 //上面代码中，在 let 命令声明变量 a 之前，都属于变量 a 的“死区”。 //其实就是不允许变量提升的结果。&#125; let 不允许重复声明 1234567891011121314151617&#123; var a = 1; var a = 2; //不报错&#125;&#123; let a = 1; var a = 2; //Identifier &apos;a&apos; has already been declared&#125;&#123; let a = 1; let b = 2; //Identifier &apos;a&apos; has already been declared&#125;//只要同作用域里有let声明了同一个变量，就会报错 constconst声明一个只读的常量。一旦声明，常量的值就不能改变。1234const a = 1;console.log(a); //1a = 2; //&quot;a&quot; is read-only 值得注意的是，不是变量的值不可改动，而是变量指向的那个内存地址不得改动。 对于简单类型的数据（数值、字符串、布尔值），一旦被赋值就不可改动，但是对于引用类型，主要是对象和数组，可以修改里面的属性值。 1234567891011121314151617181920212223242526const arr = [1,2,3];arr[0] = 0;arr[3] = 4;console.log(arr); //[0, 2, 3, 4]const obj = &#123; a:1&#125;obj.a = 2;obj.b = 3;console.log(obj); //&#123;a: 2, b: 3&#125;//由上可知，对于引用类型，不管是修改属性值，还是添加值，都不会出错。//但这并不代表你可以直接重新赋值，如下：const obj = &#123; a:1&#125;obj = &#123; a:2&#125; //报错你懂了吗！！！ const其他特性和let相同，即上面let中的四点。 结构赋值官方点说，ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。 其实讲得明白点，就是左右匹配赋值，举个例子就明白了。 数组解构123456789101112131415161718192021222324252627282930313233343536373839404142//先前给变量赋值，你需要一个一个赋值let a = 1;let b = 2;let c = 3;//ES6的结构赋值let [a,b,c] = [1,2,3]; //上面情况就是从数组中提取值，按照对应位置，对变量赋值//你可以嵌套，只要等号两边的模式相同let [a, [[b], c]] = [1, [[2], 3]];a //1b //2c //3//如果解构不成功，变量的值就等于 undefinedlet [b] = []; let [a, b] = [1]; //这两种情况 b 都是undefined，解构不成功，但第二种 a 成功了，为1//等号左边的模式，只匹配一部分的等号右边的数组let [x, y] = [1, 2, 3];x // 1y // 2let [a, [b], d] = [1, [2, 3], 4];a // 1b // 2d // 4//你也可以指定默认值let [a = 1] = [];a // 1//很好理解不是嘛 对象解构对于对象，同数组，需要注意的就是，数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。 不就是属性名相同吗 1234567let &#123;a,b&#125; = &#123;&apos;a&apos;:1, &apos;b&apos;:2&#125;a //1b //2let &#123;a,b&#125; = &#123;&apos;b&apos;:1, &apos;a&apos;:2&#125;a //2b //1 字符串解构123456const [a, b, c, d, e] = &apos;hello&apos;;a // &quot;h&quot;b // &quot;e&quot;c // &quot;l&quot;d // &quot;l&quot;e // &quot;o&quot; 模板字符串ES6在字符串中扩展了不少东西，其中模板字符串简直就是神器 在之前拼接一个字符串，你需要这样： 1&apos;hello&apos;+obj.name+&apos;,&apos;+&apos;i am your friend&apos; ES6中你可以这样： 1234`hello $&#123;obj.name&#125; ,i am your friend`// ` 是反引号，在键盘数字 1 键左边，Tab键上面；// $&#123;&#125;用来放变量 这样你或许看不出来这种优势，但是如果字符串很长时，这就是利器：123456`&lt;ul&gt; &lt;li&gt;first&lt;/li&gt; &lt;li&gt;second&lt;/li&gt;&lt;/ul&gt;` 没错，它可以直接输出html结构，记住是保留空格和缩进的哟。当然如果你不想保留，也可以使用trim方法消除它，但我想用了这个方法的就不会想像之前那样一大串吧，所以就不多赘述了。 模板字符串中嵌入变量，需要将变量名写在${}之中。大括号内部可以放入任意的 JavaScript 表达式，可以进行运算，以及引用对象属性。123456789101112let x = 1;let y = 2;`$&#123;x&#125; + $&#123;y&#125; = $&#123;x + y&#125;`// &quot;1 + 2 = 3&quot;`$&#123;x&#125; + $&#123;y * 2&#125; = $&#123;x + y * 2&#125;`// &quot;1 + 4 = 5&quot;let obj = &#123;x: 1, y: 2&#125;;`$&#123;obj.x + obj.y&#125;`// &quot;3&quot; 也可以调用函数12345function fn() &#123; return &quot;Hello&quot;;&#125;`$&#123;fn()&#125; world` //hello world 参考：http://es6.ruanyifeng.com/]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[webpack初体验之模块化开发]]></title>
    <url>%2F2017%2F12%2F12%2Fwebpack-note%2F</url>
    <content type="text"><![CDATA[写在前面的话上次写过一篇关于webpack入门的博客，当时只是说借助node来完成开发，并用webpack打包以让浏览器识别。其实其主要思想就是实现前端模块化开发。众所周知，历史上，JavaScript 一直没有模块（module）体系，无法将一个大程序拆分成互相依赖的小文件，再用简单的方法拼装起来。这在开发大型的、复杂的项目时就变得很困难。这就需要一种模块加载机制，在ES6之前，就有一些模块加载方案，比如CommonJS和AMD，上篇文章就是用到CommonJS规范。但现在，ES6已经填补了Module这块空白。下面就简单说下利用webpack实现前端模块化开发。 实例介绍本文主要介绍webpack的入门，因为我自己也是刚上手webpack，还在学习阶段，所以会讲得很基础。对于没用过webpack的童鞋，看完能懂就是我的目的。你也可以参考我的上篇博客webpack入门。另外关于ES6模块化,我觉得你应该要提前会懂，我就不讲了，这里有更好的文档 ES6 Module 使用webpack之前的准备新建一个文件夹，比如叫webpack-demo，这个就是你的项目目录，然后在这个文件夹里再新建一个src文件夹，名字可任意，在src文件夹里，如图新建几个文件： 每个文件其实都是一个模块，a.js中：123export default function()&#123; console.log(&apos;Module A&apos;);&#125; b.js中：123export default function()&#123; console.log(&apos;Module B&apos;);&#125; index.js中：12345import A from &apos;./a.js&apos;import B from &apos;./b.js&apos;A();B(); index.html中：12345678910&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Webpack模块化开发&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script src=&quot;./index.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 很显然，这就是一个模块化开发过程，html文件引入index.js，而index.js又依赖于a.js和b.js。我们想要的结果是在浏览器中打开html文件时，控制台中打印出：12Module AModule B 然而事实上，当我们打开控制台时，显示： 这是因为目前我们前端开发，浏览器还不支持模块化，想要实现模块化功能，需借助webpack。 安装webpack在此之前，你需要安装好node，并对npm有些了解，node安装完就自带了npm。 终端进入 webpack-demo 文件夹里，执行：1npm init 输入这个命令后，终端会问你一系列诸如项目名称，项目描述，作者等信息，一路回车默认即可。你也可以执行：1npm init -y 以避免问一些问题。 这个命令执行后，会自动生成一个package.json文件，这是一个标准的npm说明文件，里面蕴含了丰富的信息，包括当前项目的依赖模块，自定义的脚本任务等等。 接下来，就在本项目里安装webpack依赖，同样是在 webpack-demo 文件夹里，执行：1npm install webpack --save-dev 可能会等一会儿，执行完毕后会生成一个node_modules文件夹，可能还有一个package-lock.json文件，你先不必在意它们干嘛的。 安装完webpack后，还需要新建一个webpack配置文件，默认文件名是webpack.config.js。 完成以上所有步骤后，文件夹的内容如下： 配置webpack.config.js文件接下来，我们来配置一下 webpack.config.js 这个文件：123456789var path = require(&apos;path&apos;);module.exports = &#123; entry:&apos;./src/index.js&apos;, output:&#123; path:path.join(__dirname,&apos;dist&apos;), filename:&apos;main.js&apos; &#125;&#125; entry是入口文件地址，本项目中，需引用的是index.js文件，所以它就是入口文件； output定义出口，path是打包后的文件存储路径，它必须是一个绝对路径，可以借助node中的path模块，来拼接一个绝对路径。dist是一个文件夹，用来存储打包文件，没有则自动创建。filename则定义打包后的文件名，此文件就是存储在dist中的。 打包配置好文件后，在终端执行命令：1webpack 如图： 此时就是打包成功了，我们去项目目录看一下，会发现多了一个dist目录，里面有main.js文件: 此时我们就可以用这个main.js文件了，将它引入index.html中，替换index.js：1&lt;script src=&quot;../dist/main.js&quot;&gt;&lt;/script&gt; 保存，在浏览器中打开，控制台中： 发现此时已经达到我们的预期效果。 补充默认的配置文件名是webpack.config.js，如果你修改了这个名字，比如修改为 config.js，此时打包，你需要这样写：1webpack --config config.js 指定一下文件名，效果一样。 结尾这就是webpack的简单打包功能，看起来是不是很简单。其实它并不是像本文中介绍的这样简单，很多强大的功能都需要通过配置文件来实现。在这之前，了解上面的知识应该能够入门的。更多的知识，我也会慢慢记录，你也可以参考文档webpack中文文档]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vuex详解]]></title>
    <url>%2F2017%2F12%2F10%2Fvuex%2F</url>
    <content type="text"><![CDATA[什么是Vuex？ Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。 在Vue中，多组件的开发给我们带来了很多的方便，但同时当项目规模变大的时候，多个组件间的数据通信和状态管理就显得难以维护。而Vuex就此应运而生。将状态管理单独拎出来，应用统一的方式进行处理，在后期维护的过程中数据的修改和维护就变得简单而清晰了。这个状态管理模式包含以下三个部分： state，驱动应用的数据源； view，以声明方式将 state 映射到视图； actions，响应在 view 上的用户输入导致的状态变化。 简单说，就是用户界面触发动作（Action)进而改变对应状态（State），从而反映到视图（View）上，所以Vuex采用的是单向数据流的方式来管理数据的。官网给出以下图，很好做出示意： 使用Vuex下面我是通过直接引用vue.js和Vuex.js本地文件来介绍Vuex的使用，如果是使用vue脚手架的，你可以这样来使用： 安装：1npm install --save vuex 引入：123456789101112131415import Vuex from &apos;vuex&apos;import Vue from &apos;vue&apos;Vue.use(Vuex) //作为插件使用//定义容器const store = new Vuex.Store(&#123; state:&#123;...&#125;, mutations:&#123;...&#125;, actions:&#123;...&#125; ...&#125;)export default store 注入根实例：123456import store from xxxnew Vue(&#123; // 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件 store&#125;) 不管是否使用脚手架，Vuex的使用方法是一样的。接下来，就用具体的例子来介绍Vuex的使用。 不过在这之前，我们需要知道五个Vue的核心概念，它们分别是： State Mutation Action Getter Module 我们学习Vuex的使用，就是基于这五个概念的，深入理解所有的概念对于使用 Vuex 来说是必要的。 让我们开始吧。 State包含所有应用级别状态的对象，简单说，就是这个对象里存储了整个应用的状态数据，也就是我们要传递使用的数据。使用state，需要一个容器，定义容器：123var store = new Vuex.Store(&#123; ...&#125;); state对象就是放在这个容器里，不仅是state，上面介绍的五个核心概念，分别对应五个对象，它们都是放在这个容器里的。最重要的，我们要把这个容器注入根实例里，这样所有的子组件才可以使用。注入根实例：1234new Vue(&#123; // 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件 store&#125;) 注意：一个页面只能有一个容器 例子123456789101112131415161718192021222324252627282930313233343536&lt;div id=&quot;app&quot;&gt; &lt;counter&gt;&lt;/counter&gt;&lt;/div&gt;&lt;script src=&quot;./vue.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;./vuex.js&quot;&gt;&lt;/script&gt;&lt;script&gt; //定义子组件 var counter = &#123; template:`&lt;div&gt;Number:&#123;&#123; count &#125;&#125;&lt;/div&gt;`, computed:&#123; count()&#123; return this.$store.state.count; &#125; &#125; &#125; //容器 var store = new Vuex.Store(&#123; state:&#123; count: 100 &#125; &#125;); //根实例 new Vue(&#123; el:&apos;#app&apos;, // 把 store 对象提供给 “store” 选项，这可以把 store 的实例注入所有的子组件 store, components:&#123; counter //注册子组件 &#125; &#125;);&lt;/script&gt; 上面例子中，state中定义了一个状态，即count，若想获取这个状态，需要在子组件的计算属性中，通过this.$store.state来返回，然后才能反应到试图中。state中可以定义多个状态：1234state:&#123; count: 100, name:&apos;Jack&apos;&#125; 如果这俩个状态都需获取，那么在子组件中：12345678910111213141516var counter = &#123; template:` &lt;div&gt; Number:&#123;&#123; count &#125;&#125; Name:&#123;&#123;name&#125;&#125; &lt;/div&gt; `, computed:&#123; count()&#123; return this.$store.state.count; &#125;, name()&#123; return this.$store.state.name; &#125; &#125;&#125; 总结：state对象用来存储整个应用的状态数据；当需要用到state中状态时，需要使用this.$store.state来获取，哪个组件需要，就在那个组件的计算属性中获取。 Mutation更改 Vuex 的 store 中的状态的唯一方法是提交 mutation，就是说若需要改变state中的状态，不能简单的诸如count++这样操作，唯一的方法是在mutations中更改状态。mutations跟state一样，需要写在容器里。 例子我们在上面的例子中增加一个按钮，每次点击时会增加 count数值，这就需要用到mutations 12345&lt;div id=&quot;app&quot;&gt; //增加按钮，绑定add事件 &lt;a href=&quot;javascript:;&quot; @click=&apos;add&apos;&gt;点击增加&lt;/a&gt; &lt;counter&gt;&lt;/counter&gt;&lt;/div&gt; 123456789101112131415161718//容器const store = new Vuex.Store(&#123; state:&#123; count:10 &#125;, mutations:&#123; increment(state)&#123; state.count++; &#125; &#125;&#125;);//在根实例中添加方法methods:&#123; add()&#123; this.$store.commit(&apos;increment&apos;); &#125;&#125; 这个例子中，在mutations中定义方法increment，通过传参state获取到state中的状态，并实行更改操作，当点击按钮时，触发add事件，通过this.$store.commit提交更改，使视图更新。 提交载荷（Payload）即increment方法中可以添加参数，this.$store.commit中对应提交参数，即 mutation 的 载荷（payload）。比如，现在我需要点击按钮时，count数值增加10，可以通过参数来实现：12345mutations:&#123; increment(state,num)&#123; state.count += num; //传一个参数 &#125;&#125; 12345methods:&#123; add()&#123; this.$store.commit(&apos;increment&apos;,10); &#125;&#125; 但在大多数情况下，参数应该是一个对象，这样可以包含多个字段并且记录的 mutation 会更易读：12345mutations:&#123; increment(state,payload)&#123; state.count += payload.num; &#125;&#125; 1234567methods:&#123; add()&#123; this.$store.commit(&apos;increment&apos;,&#123; num:10 &#125;); &#125;&#125; 对象风格的提交方式提交 mutation 的另一种方式是直接使用包含 type 属性的对象：1234this.$store.commit(&#123; type:&apos;increment&apos;, num:10&#125;); 当使用对象风格的提交方式，整个对象都作为载荷传给 mutation 函数，因此 mutations 保持不变：12345mutations:&#123; increment(state,payload)&#123; state.count += payload.num; &#125;&#125; Mutation 必须是同步函数一条重要的原则就是要记住 mutation 必须是同步函数。 总结：mutations用于更改state中状态，是唯一可以更改状态的事件回调函数；在this.$store.commit(函数名,载荷)中提交mutation；对象风格提交，this.$store.commit({type:函数名,参数名:参数值})；Mutation 必须是同步函数。 ActionAction 类似于 mutation，不同在于： Action 提交的是 mutation，而不是直接变更状态。 Action 可以包含任意异步操作。 例子注册一个action：12345678910111213141516//容器const store = new Vuex.Store(&#123; state:&#123; count:10 &#125;, mutations:&#123; increment(state,payload)&#123; state.count += payload.num; &#125; &#125;, actions:&#123; incrementAction(context)&#123; context.commit(&apos;increment&apos;,&#123;num:10&#125;); &#125; &#125;&#125;); Action 函数接受一个与 store 实例具有相同方法和属性的 context 对象，因此你可以调用 context.commit 提交一个 mutation，提交之后，通过 store.dispatch方法触发，即在add中：123456789methods:&#123; add()&#123; //直接提交mutation改变状态时 // this.$store.commit(&apos;increment&apos;,&#123;num:10&#125;); //通过action提交mutation，进而改变状态 this.$store.dispatch(&apos;incrementAction&apos;); &#125;&#125; 对比一下，发现使用action有点多次一举，确实，大部分情况我们是不需要用action来分发的，但是重要的一点是mutation 必须同步执行，如果想执行异步操作，就得使用action：1234567actions:&#123; incrementAction(context)&#123; setTimeout(()=&gt;&#123; context.commit(&apos;increment&apos;,&#123;num:10&#125;); &#125;,1000) &#125;&#125; 关于context，它类似store，但是不是store，打印一下context，结果：发现它包含了commit等几个方法，这样在实践中，如果需要多次调用commit，我们可以通过ES6的参数解构，来简化context.commit,即：1234567actions:&#123; incrementAction(&#123;commit&#125;)&#123; setTimeout(()=&gt;&#123; commit(&apos;increment&apos;,&#123;num:10&#125;); &#125;,1000) &#125;&#125; 总结：Action类似于mutation，但不是直接变更状态，是通过提交mutation；通过this.$store.dispatch(函数名)来触发；Action可以包含任意异步操作，mutation必须是同步的；context不是store，它包含commit等多个方法，可以通过ES6参数解构，简化context.commit。 Getter有时候我们需要从 store 中的 state 中派生出一些状态，假设还是上面的计数程序，现在增加一个count2，它与count的区别是增加到30后就不再增大，这时就可以用到Getter： 注册Getter1234567891011121314151617181920212223//容器const store = new Vuex.Store(&#123; state:&#123; count:10 &#125;, getters:&#123; filterCount(state)&#123; return state.count &gt; 30 ? 30 : state.count; &#125; &#125;, mutations:&#123; increment(state,payload)&#123; state.count += payload.num; &#125; &#125;, actions:&#123; incrementAction(&#123;commit&#125;)&#123; setTimeout(()=&gt;&#123; commit(&apos;increment&apos;,&#123;num:10&#125;); &#125;,1000) &#125; &#125;&#125;); getters中定义方法filterCount，通过参数state得到state中的状态，实行过滤。当我们需要用的时候，在子组件中：1234567891011121314151617const counter = &#123; template:` &lt;div&gt; &#123;&#123; count &#125;&#125; &#123;&#123; count2 &#125;&#125; &lt;/div&gt; `, computed:&#123; count()&#123; return this.$store.state.count &#125;, count2()&#123; return this.$store.getters.filterCount; &#125; &#125; &#125; 可以看到，在计算属性中，多添加了一个count2，返回的数据是从store.getters中获取的，不同于count是从store.state中获取的，这样其实很清晰明了了。此时点击按钮，当数值大于30后，count2便不会再增加了。 总结：getter可以认为是store的计算属性，就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算；getter没有更改状态；getters中的数据要在store.getters中获取。 Module一个页面中只能有一个store，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。 为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：1234567891011121314151617181920//模块Avar moduleA = &#123; state: &#123; ... &#125;, mutations: &#123; ... &#125;, actions: &#123; ... &#125;, getters: &#123; ... &#125;&#125;//模块Bvar moduleB = &#123; state: &#123; ... &#125;, mutations: &#123; ... &#125;, actions: &#123; ... &#125;&#125;//容器var store = new Vuex.Store(&#123; modules: &#123; a: moduleA, b: moduleB &#125;&#125;) 获取状态时，对应模块取得12store.state.a // -&gt; moduleA 的状态store.state.b // -&gt; moduleB 的状态]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[对数组中的对象排序]]></title>
    <url>%2F2017%2F12%2F04%2Farray-sort%2F</url>
    <content type="text"><![CDATA[需求：设计一个列表，包含：地域、百分比、人数、时间。请实现按照 人数 与 时间 的排序算法。 数据结构1234567891011121314151617181920212223242526var data = [ &#123; area: &apos;深圳&apos;, percentage: 15, number: 80, staytime: 2 &#125;, &#123; area: &apos;北京&apos;, percentage: 30, number: 150, staytime: 4 &#125;, &#123; area: &apos;广州&apos;, percentage: 25, number: 60, staytime: 3 &#125;, &#123; area: &apos;上海&apos;, percentage: 30, number: 100, staytime: 4 &#125;]; 封装排序函数12345678910111213141516171819202122232425262728/** 根据指定的字段和规则排序数据* data Array 要排序的数据* field string 排序依据的字段* rule string 排序规则 DESC（降序） / ASC（增序） * throw * data is invalid : 要排序的数据不存在或类型不正确* field is invalid : 排序参考字段不存在* return Array 排序后的数据*/var mySort = function (data, field, rule)&#123; if ( !(data instanceof Array) ) &#123; alert(&apos;数据不存在&apos;) &#125; if ( !(field in data[0]) ) &#123; alert(&apos;排序参考字段不存在&apos;); &#125; if ( !rule || [&apos;DESC&apos;,&apos;ASC&apos;].indexOf( (rule=rule.toString().toUpperCase()) ) == -1 ) &#123; rule = &apos;DESC&apos;; //默认为降序 &#125; data.sort(function (a, b)&#123; var v = a[field] - b[field]; return rule == &apos;ASC&apos;? v:-v; &#125;)&#125; 使用123mySort(data,&apos;number&apos;,&apos;ASC&apos;); // 若第三个参数不写，则默认为DESCconsole.log(data);]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js脚本测试动画]]></title>
    <url>%2F2017%2F11%2F30%2Fjs-test%2F</url>
    <content type="text"><![CDATA[前言在使用css来给页面添加动画时，如果样式和动画一起写，很容易出错，最后可能在整体上达不到预期的效果，修修改改很费时，可以先写一个js脚本来测试动画效果，再去一次性写好所有动画。 测试过程这里举一个小例子，来看看怎么先测试动画效果。 HTML1234567891011121314151617&lt;div class=&quot;screen1&quot; style=&quot;background-color: #FFFF00;&quot;&gt; &lt;h2 style=&quot;color: red;&quot;&gt;这是第一屏&lt;/h2&gt; &lt;p class=&quot;screen1_p1&quot;&gt;第一段文字&lt;/p&gt; &lt;p class=&quot;screen1_p2&quot;&gt;第二段文字&lt;/p&gt; &lt;p class=&quot;screen1_p3&quot;&gt;第三段文字&lt;/p&gt;&lt;/div&gt;&lt;hr&gt;&lt;div class=&quot;screen2&quot; style=&quot;background-color: #BDB76B;&quot;&gt; &lt;h2 style=&quot;color: red;&quot;&gt;这是第二屏&lt;/h2&gt; &lt;p class=&quot;screen2_p1&quot;&gt;第一段文字&lt;/p&gt; &lt;p class=&quot;screen2_p2&quot;&gt;第二段文字&lt;/p&gt; &lt;p class=&quot;screen2_p3&quot;&gt;第三段文字&lt;/p&gt;&lt;/div&gt; 两个div代表两个屏，分别有不同的动画 CSS12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849/*第一屏*/.screen1_p1,.screen1_p2,.screen1_p3&#123; transition: all 1s;&#125;.screen1_p1_animate_init&#123; opacity: 0; transform: translate(0,-100%);&#125;.screen1_p2_animate_init&#123; opacity: 0; transform: translate(-100%,0);&#125;.screen1_p3_animate_init&#123; opacity: 0; transform: translate(0,100%);&#125;.screen1_p1_animate_done,.screen1_p2_animate_done,.screen1_p3_animate_done&#123; opacity: 1; transform: translate(0,0);&#125;/*第二屏*/.screen2_p1,.screen2_p2,.screen2_p3&#123; transition: all 1s;&#125;.screen2_p1_animate_init&#123; opacity: 0; transform: translate(0,100%);&#125;.screen2_p2_animate_init&#123; opacity: 0; transform: translate(100%,0);&#125;.screen2_p3_animate_init&#123; opacity: 0; transform: translate(0,-100%);&#125;.screen2_p1_animate_done,.screen2_p2_animate_done,.screen2_p3_animate_done&#123; opacity: 1; transform: translate(0,0);&#125; 给每个需要动画的元素写好控制动画的class，init表示初始化样式，done表示最终展示样式，通过js来切换init状态还是done状态，就可以看到动画展现过程。接下来就写js部分。 JavaScript12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970//所有有动画的元素var screenAnimateElements = &#123; &apos;.screen1&apos;:[ &apos;.screen1_p1&apos;, &apos;.screen1_p2&apos;, &apos;.screen1_p3&apos; ], &apos;.screen2&apos;:[ &apos;.screen2_p1&apos;, &apos;.screen2_p2&apos;, &apos;.screen2_p3&apos; ] &#125;//封装动画函数var setAnimate = function(cls) &#123; var screen = document.querySelector(cls); //获取当前屏 var animateElements = screenAnimateElements[cls]; //需要设置动画的元素 var isSetAnimateClass = false; //是否有初始化子元素的样式 var isAnimateDone = false; //当前屏幕下所有子元素的状态是否是done //点击当前屏，测试动画 screen.onclick = function() &#123; //初始化样式，增加init if (isSetAnimateClass === false) &#123; for(var i=0;i&lt;animateElements.length;i++) &#123; var element = document.querySelector(animateElements[i]); var baseCls = element.getAttribute(&apos;class&apos;); element.setAttribute(&apos;class&apos;, baseCls + &apos; &apos; + animateElements[i].substr(1)+&apos;_animate_init&apos;); &#125; isSetAnimateClass = true; return; &#125; //切换所有 animateElements 的 init -&gt; done if (isAnimateDone === false) &#123; for(var i=0;i&lt;animateElements.length;i++) &#123; var element = document.querySelector(animateElements[i]); var baseCls = element.getAttribute(&apos;class&apos;); element.setAttribute(&apos;class&apos;, baseCls.replace(&apos;_animate_init&apos;,&apos;_animate_done&apos;)); &#125; isAnimateDone = true; return; &#125; //切换所有 animateElements 的 done -&gt; init if (isAnimateDone === true) &#123; for(var i=0;i&lt;animateElements.length;i++) &#123; var element = document.querySelector(animateElements[i]); var baseCls = element.getAttribute(&apos;class&apos;); element.setAttribute(&apos;class&apos;, baseCls.replace(&apos;_animate_done&apos;,&apos;_animate_init&apos;)); &#125; isAnimateDone = false; return; &#125; &#125; &#125;//循环所有需要动画的元素 加上动画for(var k in screenAnimateElements) &#123; setAnimate(k);&#125; 此时就可以单独点击各屏，切换init和done状态，来查看动画展现效果。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue自定义指令]]></title>
    <url>%2F2017%2F11%2F22%2Fvue-directives%2F</url>
    <content type="text"><![CDATA[什么是指令？指令 (Directives) 是带有 v- 前缀的特殊属性。它可以写在DOM元素上，对html进行操作。常用的指令比如有：v-if，v-else，v-show，v-for等。这些都是官方直接给定的，另外Vue也允许注册自定义指令，有时这很有用。 自定义指令方法自定义一个指令很简单,官网给出一个简单的例子，自定义一个聚焦指令v-focus12345678// 注册一个全局自定义指令 `v-focus`Vue.directive(&apos;focus&apos;, &#123; // 当被绑定的元素插入到 DOM 中时…… inserted: function (el) &#123; // 聚焦元素 el.focus() &#125;&#125;) 上面几行代码就全局注册了一个指令并可以执行，当给一个输入框加上这个指令时，页面加载就会使该框获得焦点。1&lt;input v-focus&gt; 说明： focus：如你所见，是指令的名称，不带v-前缀； inserted：这是一个钩子函数，表示被绑定元素插入父节点时调用，指令定义函数提供了多个钩子函数，下面再介绍。 另外，你也可以局部注册指令，组件中也接受一个 directives 的选项：12345678directives: &#123; focus: &#123; // 指令的定义 inserted: function (el) &#123; el.focus() &#125; &#125;&#125; 钩子函数介绍指令定义函数提供了几个钩子函数（可选） bind：只调用一次，指令第一次绑定到元素时调用。 inserted：被绑定元素插入父节点时调用。 update：所在组件的VNode更新时调用，但是可能发生在其子 VNode 更新之前。 componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用。 unbind：只调用一次，指令与元素解绑时调用。 他们中每一个都有相同的三个参数：el，binding和vnode，在update和componentUpdated中，还会有参数oldVnode，以区分传递的旧值和新值。 el：指令所绑定的元素，可以用来直接操作 DOM 。 binding：一个对象，包含以下属性：name，value，oldValue，expression，arg和modifiers。 vnode：Vue 编译生成的虚拟节点。 oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。 注意：除了 el 之外，其它参数都应该是只读的。 其中，你注意到binding参数中有多个属性，要搞清楚他们分别代表了什么，这很重要。 123&lt;div id=&quot;app&quot;&gt; &lt;p v-demo:foo.a.b=&quot;message&quot;&gt;&lt;/p&gt;&lt;/div&gt; 1234567891011121314151617181920Vue.directive(&apos;demo&apos;,&#123; bind(el, binding, vnode)&#123; //给绑定的元素添加内容 el.innerHTML = ` name:$&#123;binding.name&#125;;&lt;br&gt; value:$&#123;binding.value&#125;;&lt;br&gt; expression:$&#123;binding.expression&#125;;&lt;br&gt; argument:$&#123;binding.arg&#125;;&lt;br&gt; modifiers:$&#123;JSON.stringify(binding.modifiers)&#125;; ` &#125;&#125;);new Vue(&#123; el:&apos;#app&apos;, data:&#123; message:&quot;hello&quot; &#125;&#125;); 结果：12345name:demo; //指令名，不包括 v- 前缀value:hello; //指令的绑定值expression:message; //字符串形式的指令表达式argument:foo; //传给指令的参数，可选。modifiers:&#123;&quot;a&quot;:true,&quot;b&quot;:true&#125;; //一个包含修饰符的对象。 还有一个oldValue是指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。 到这里，你可能有点糊涂了，东西看起来有点多，其实并不是，你只是不熟悉。这些官网介绍的很清楚，你需要的是一个更具体的例子。 写一个自己的指令现在来创建一个自定义指令，比如我想创建一个可以操作定位的指令，就叫他 v-position。123456Vue.directive(&apos;position&apos;,&#123; bind(el, binding, vnode)&#123; el.style.position = &apos;fixed&apos;; el.style.top = binding.value + &apos;px&apos;; &#125;&#125;); 123&lt;div id=&quot;app&quot;&gt; &lt;p v-position=&apos;100&apos;&gt;我距离顶部100px&lt;/p&gt;&lt;/div&gt; 现在v-position只能控制到顶部的距离，我们还可以自由控制方向：1&lt;p v-position:left=&apos;50&apos;&gt;我距离左侧50px&lt;/p&gt; 1234567Vue.directive(&apos;position&apos;,&#123; bind(el, binding, vnode)&#123; el.style.position = &apos;fixed&apos;; let d = (binding.arg == &apos;top&apos;?&apos;top&apos;:&apos;left&apos;); el.style[d] = binding.value + &apos;px&apos;; &#125;&#125;); 另外，你还可以控制多个值：1&lt;p v-position=&quot;&#123;top:&apos;100&apos;,left:&apos;50&apos;&#125;&quot;&gt;我距离左侧50px，距离顶部100px&lt;/p&gt; 1234567Vue.directive(&apos;position&apos;,&#123; bind(el, binding, vnode)&#123; el.style.position = &apos;fixed&apos;; el.style.top = binding.value.top + &apos;px&apos;; el.style.left = binding.value.left + &apos;px&apos;; &#125;&#125;); 这就是vue自定义指令的一些简单应用，你可以创建出更高级灵活的自定义指令。]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[webpack入门]]></title>
    <url>%2F2017%2F10%2F14%2Fwebpack-study%2F</url>
    <content type="text"><![CDATA[写在前面的话：这不是一个很系统的教程，但是作为入门，我觉得够够了，至少知道怎么下手使用 为什么？（重要）为什么要用webpack？答案网上一大堆。我不想说了，好吧，我也说不好，毕竟也才刚接触。 在这里，我觉得还是举个例子说明下吧，看完这个例子，你至少知道webpack还是有用的 （例子简单易懂哦~~） 首先新建一个目录，目录下建3个文件，分别是： a.js： 123(function() &#123; var msg = &apos;hello world&apos;&#125;)() b.js： 1console.log( msg ) index.html： 123456789101112&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;webpack study&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script src=&quot;a.js&quot;&gt;&lt;/script&gt; &lt;script src=&quot;b.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 你看，代码多简单，肯定懂。其实就是在a中定义一个变量，然后要在b中打印出来，在html文件中先后引入a.js和b.js，这样看起来很合理，其实你又知道，这样根本打印不出来，甚至抛给你一个错误： 这是JavaScript语言性质决定的，我也不说了，很显然a.js和b.js没有关联，如果希望在b.js中访问到msg，办法是将msg定义到全局变量中，即修改a.js为： 123(function() &#123; window.msg = &apos;hello world&apos;&#125;)() 这时候再去控制台，绝对打印出来了~~但是问题也很明显，这样定义到全局变量中的做法是不明智，为什么，我也不说了，你应该知道。 就在这时候，nodejs出现了，它解决了这个历史问题。可以用后台知识去写前端，这时分别修改a.js 和 b.js： a.js: 123var msg = &apos;hello world&apos;module.exports = &#123;msg: msg&#125; b.js: 123var msg = require(&apos;./a&apos;).msgconsole.log( msg ) 然后打开命令行工具进入当前目录，用node运行b.js： 结果正常打印了。 虽然问题解决了，不用定义全局变量了，但是更大的问题来了，就是这个是用node运行的，浏览器识别不了它，此时控制台是这样的： 啊哦，白忙活了，浏览器识别不了，玩个啥~ 其实，这才引出主题嘛，没错，到了这里，终于说到正题了，那就是为什么用webpack？ 因为webpack就可以将这种好用的，但浏览器识别不了的东西编译成浏览器能够识别的东西，并使用。 使用webpack安装：12345//全局安装npm install -g webpack//安装到你的项目目录npm install --save-dev webpack 可以选择全局安装，也可以安装在项目目录里，这里推荐安装到项目目录里： 首先新建一个文件夹,比如叫：webpack_study（即项目文件夹），然后进入文件夹，使用命令：1npm init -y 这个命令会自动生成一个package.json文件，这是一个标准的npm说明文件，里面蕴含了丰富的信息，包括当前项目的依赖模块，自定义的脚本任务等等。先不管它，这时在目录里安装webpack：12// 安装Webpacknpm install --save-dev webpack 安装完成后，目录里多了一个node_modules文件夹。现在将前面例子中的a.js，b.js和index.html等文件放入到目录中： a.js： 123var msg = &apos;hello world&apos;module.exports = &#123;msg: msg&#125; b.js： 123var msg = require(&apos;./a&apos;).msgconsole.log( msg ) index.html：（注意：这里引用路径改变了，只引用了bundle.js） 1234567891011&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;webpack study&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 现在整个目录结构如下： 正式使用webpack：此时执行命令： 12// 非全局安装的情况node_modules/.bin/webpack b.js bundle.js b.js是入口文件，bundle.js是我们要打包成的文件，即是我们在index.html中引用的文件。打包完成后，目录里多了一个bundle.js文件，这个时候再在浏览器里打开控制台，发现可以打印出“hello world了”，说明webpack已经帮我们处理好了依赖关系，浏览器可以正常工作了。当然，webpack的功能远比想像的强大。 现在学会了使用webpack打包文件，但是在终端输入了一堆命令，太复杂也容易出错，现在来看一种简单的打包方法。 通过配置文件来使用webpack： 在目录里新建一个js文件：webpack.config.js。这个是webpack的配置文件，内容为： 1234567891011module.exports = &#123; entry: __dirname + &quot;/b.js&quot;, //唯一入口文件 output: &#123; path: __dirname, //打包后的文件存放的地方 filename: &quot;bundle.js&quot; //打包后输出文件的文件名 &#125;// 注：“__dirname”是node.js中的一个全局变量，它指向当前执行脚本所在的目录。&#125; 有了这个配置之后，再打包文件，只需在终端里运行(非全局安装需使用node_modules/.bin/webpack)命令就可以了，这条命令会自动引用webpack.config.js文件中的配置选项，示例如下： 现在打包就不用输入烦人的命令行参数了，是不是感觉很爽，但如果连 node_modules/.bin/webpack 都不用输入，是不是更爽，其实还真可以~ 使打包更快捷： 方法就是在package.json文件中对scripts对象进行相关设置，设置方法如下： 12345678910111213141516&#123; &quot;name&quot;: &quot;webpack_study&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;scripts&quot;: &#123; &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;, &quot;start&quot;: &quot;node_modules/.bin/webpack&quot; &#125;, &quot;keywords&quot;: [], &quot;author&quot;: &quot;&quot;, &quot;license&quot;: &quot;ISC&quot;, &quot;devDependencies&quot;: &#123; &quot;webpack&quot;: &quot;^3.7.1&quot; &#125;&#125; 现在再执行 1npm run start 就可以打包了，如下： 是不是很方便。其实通过修改配置文件，还可以实现很多webpack的强大功能。都说webpack难，难就难在去配置文件吧。等我们需要用到某种功能时，再去学习怎么配置吧。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[childNodes、children、firstChild和firstElementChild]]></title>
    <url>%2F2017%2F10%2F06%2Fchildnode%2F</url>
    <content type="text"><![CDATA[这是一段html代码：12345678910&lt;div id=&quot;div1&quot;&gt; hello world &lt;div&gt; &lt;p&gt;第一个p&lt;/p&gt; &lt;/div&gt; &lt;div&gt; &lt;p&gt;第二个p&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; childNodes：返回节点的子节点集合，以 NodeList 对象 1console.log(div1.childNodes.length); //5 因为childNodes会把文本算入节点，即使文本为空 children：返回节点的子节点，只返回元素节点 1console.log(div1.children.length); //2 firstChild：返回指定节点的首个子节点，以 Node 对象 1234console.log(div1.firstChild); //// hello world// 返回的是第一个文本节点 firstElementChild：返回指定节点的首个子节点，只返回元素节点 1234console.log(div1.firstElementChild);// &lt;div&gt;// &lt;p&gt;第一个p&lt;/p&gt;// &lt;/div&gt;]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[二叉树节点查找与删除]]></title>
    <url>%2F2017%2F09%2F30%2Fbinarytree2%2F</url>
    <content type="text"><![CDATA[在上一篇关于二叉树的js实现的基础上，增加二叉树节点查找与删除操作。 代码如下： 注意：接口写在BinaryTree()中，部分代码已省略 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122function BinaryTree()&#123; //... //最小值查找 this.min = function()&#123; return minNode(root); &#125; function minNode(node)&#123; if (node) &#123; while(node &amp;&amp; node.left !== null)&#123; node = node.left; &#125; return node.text; &#125; return null; &#125; //最大值查找 this.max = function()&#123; return maxNode(root); &#125; function maxNode(node)&#123; if (node) &#123; while(node &amp;&amp; node.right !== null)&#123; node = node.right; &#125; return node.text; &#125; return null; &#125; //判断某值是否存在 this.search = function(text)&#123; return searchNode(root,text); &#125; function searchNode(node,text)&#123; if (!node) &#123; return false; &#125;else if(text&gt;node.text)&#123; return searchNode(node.right,text); &#125;else if(text&lt;node.text)&#123; return searchNode(node.left,text) &#125;else&#123; return true; &#125; &#125; //删除节点 this.remove = function(text)&#123; root = removeNode(root,text); &#125; function removeNode(node,text)&#123; if (node === null) &#123; return null; &#125; if (text&lt;node.text) &#123; node.left = removeNode(node.left,text); return node; &#125;else if (text&gt;node.text) &#123; node.right = removeNode(node.right,text); return node; &#125;else &#123; if (node.left === null &amp;&amp; node.right === null) &#123; node = null; return node; &#125; if (node.left === null) &#123; node = node.right; return node; &#125;else if (node.right === null) &#123; node = node.left; return node; &#125; var aux =findMinNode(node.right); node.text = aux.text; node.right = removeNode(node.right,aux.text); return node; &#125; &#125; function findMinNode(node)&#123; if (node) &#123; while(node &amp;&amp; node.left !== null)&#123; node = node.left; &#125; return node; &#125; return null; &#125; //...&#125; //查找最小值//console.log(binaryTree.min());//查找最大值//console.log(binaryTree.max());//判断值是否存在//console.log(binaryTree.search(7) ? &apos;7 is found&apos; : &apos;7 is no found&apos;);//console.log(binaryTree.search(9) ? &apos;9 is found&apos; : &apos;9 is no found&apos;);//删除节点//binaryTree.remove(10);]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js实现二叉树及遍历]]></title>
    <url>%2F2017%2F09%2F28%2Fbinarytree%2F</url>
    <content type="text"><![CDATA[什么是二叉树今天在做百度前端技术学院的任务时，遇到一题涉及二叉树算法的，然而我是一脸懵逼，因为没接触过二叉树算法，所以无存下手。后来上网找资料，渐渐明白了是个什么东西。 这是一篇关于二叉树的详细介绍文章 搞清楚了二叉树是啥，然后怎么实现呢，显然，我需要用js实现，于是又各种找资料，实话说，资料还挺多的，不过也很杂，现在做个总结。 js实现二叉树说明：将一个数组的值按照二叉树规则遍历，形成二叉树结构。 代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455function BinaryTree()&#123; //定义新节点的构造函数 function Node(text)&#123; this.text = text; this.left = null; this.right = null; &#125; //定义根节点 var root = null; //判断根节点 this.insert = function(text)&#123; var newNode = new Node(text); if (root === null) &#123; root = newNode; &#125;else&#123; insertNode(root,newNode); &#125; &#125;; //中间节点的处理函数 function insertNode(node,newNode)&#123; if (newNode.text &lt; node.text) &#123; if (node.left === null) &#123; node.left = newNode; &#125;else&#123; insertNode(node.left,newNode); &#125; &#125;else&#123; if (node.right === null) &#123; node.right = newNode; &#125;else&#123; insertNode(node.right,newNode); &#125; &#125; &#125;//定义数组用来存储各节点的数值var nodes = [8,3,10,1,6,14,4,7,13];//创建二叉树实例var binaryTree = new BinaryTree();//遍历数组，将数组值按照二叉树规则插入for(var i=0;i&lt;nodes.length;i++)&#123; binaryTree.insert(nodes[i]);&#125; 上面代码最终形成的二叉树结构如下图： 规则说明： 根据取到的数组值，先判断二叉树中根节点是否存在，如果不存在，就将第一个值作为根节点，即上述的8是根节点值。 有了根节点后，再判断后面的值与根节点值大小关系。如果小于根节点值，且左边无值，就放在左边，如果左边已经有值，就回调遍历。如果大于根节点值，且右边无值，就放在右边，如果右边已经有值，就回调遍历。参考上面代码中insertNode函数 遍历二叉树的遍历(traversing binary tree)是指从根结点出发，按照某种次序依次访问二叉树中所有结点，使得每个结点被访问一次且仅被访问一次。 二叉树的遍历有三种方式，如下： 前序遍历（DLR），首先访问根结点，然后遍历左子树，最后遍历右子树。简记根-左-右。 中序遍历（LDR），首先遍历左子树，然后访问根结点，最后遍历右子树。简记左-根-右。 后序遍历（LRD），首先遍历左子树，然后遍历右子树，最后访问根结点。简记左-右-根。 在上述代码中的BinaryTree()中添加遍历接口（ … 表示省略的代码 ）: 中序遍历12345678910111213141516171819202122232425262728293031323334function BinaryTree()&#123; //... //中序遍历 this.inOrderTraverse = function(callback)&#123; inOrderTraverseNode(root,callback); &#125; function inOrderTraverseNode(node,callback)&#123; if(node !== null)&#123; inOrderTraverseNode(node.left,callback); callback(node.text); inOrderTraverseNode(node.right,callback); &#125; &#125; //... //定义回调函数，打印节点数值 var callback = function(text)&#123; console.log(text); &#125;&#125;//调用binaryTree.inOrderTraverse(callback);//打印结果1 3 4 6 7 8 10 13 14 前序遍历1234567891011121314151617181920212223242526272829303132333435function BinaryTree()&#123; //... //前序遍历 this.preOrderTraverse = function(callback)&#123; preOrderTraverseNode(root,callback); &#125; function preOrderTraverseNode(node,callback)&#123; if (node !== null) &#123; callback(node.text); preOrderTraverseNode(node.left,callback); preOrderTraverseNode(node.right,callback); &#125; &#125; //... //定义回调函数，打印节点数值 var callback = function(text)&#123; console.log(text); &#125;&#125;//调用binaryTree.preOrderTraverse(callback);//打印结果8 3 1 6 4 7 10 14 13 后序遍历1234567891011121314151617181920212223242526272829303132333435function BinaryTree()&#123; //... //后序遍历 this.postOrderTraverse = function(callback)&#123; postOrderTraverseNode(root,callback); &#125; function postOrderTraverseNode(node,callback)&#123; if (node !== null) &#123; postOrderTraverseNode(node.left,callback); postOrderTraverseNode(node.right,callback); callback(node.text); &#125; &#125; //... //定义回调函数，打印节点数值 var callback = function(text)&#123; console.log(text); &#125;&#125;//调用binaryTree.postOrderTraverse(callback);//打印结果1 4 7 6 3 13 14 10 8 注意：遍历代码是写在BinaryTree()中的，部分代码已省略]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于JSONP跨域]]></title>
    <url>%2F2017%2F09%2F23%2Fjsonp%2F</url>
    <content type="text"><![CDATA[JSONP是干嘛的提到JSONP，首先想到的就是AJAX，因为人们时常将它们放在一起说。那么，它们到底是什么关系呢？ 其实它们本身并没有实质的关系，只是JSONP可以解决AJAX一件办不到的事情。哪件事情是AJAX办不到的？就是跨域！ 简单来说，JSONP就是一种跨域的手段。 跨域：意思是说，在当前网址去获取另一个域下的数据。浏览器有一个“同源策略”——两个页面的域名必须在同域的情况下，才能允许通信。 所谓同源是指，域名，协议，端口相同。 浏览器的“同源策略”有效地阻止了很多危险行为，因为在没有“同源策略”的情况下，网站的信息可以被所有人任意获取，那么用户的隐私就受不到保护了，这是很可怕的。但事情有利有弊，“同源策略”也带来了麻烦，这时如果我们想从信任的网站获取数据，显然也做不到了。 JSONP怎么用可能JSONP听起来很高大上，但其实其原理很简单，是我们每天都接触的。”同源策略”虽然很厉害，阻止了一个页面到另一个页面的通信，可是src指向的路径它放过了。提到src，我们再熟悉不过了，&lt;img&gt;、&lt;script&gt;和&lt;iframe&gt;都有src属性。JSONP就是利用&lt;script&gt;标签来实现跨域通信的。 讲一个简单的小例子： 现在假设有两个域，需要互相通信，分别是：www.aaa.com和www.bbb.com www.aaa.com中：12345678&lt;script src=&apos;http://www.bbb.com/abc.js&apos;&gt;&lt;/script&gt;&lt;script&gt; function abc(data)&#123; alert(data[&apos;name&apos;]); &#125;&lt;/script&gt; www.bbb.com/abc.js中：1abc(&#123;&apos;name&apos;:&apos;wungjyan&apos;,&apos;age&apos;:23&#125;); 结果页面弹出了wungjyan。 JSONP工作过程：通过&lt;script&gt;标签，获取到www.bbb.com/abc.js，里面有一个函数abc，函数会被加载到www.aaa.com。加载完成后，就执行abc函数，而在www.aaa.com中已经定义好了一个abc函数，函数里写了一些处理数据的语句。这样就简单地实现了跨域访问数据了，这也就是JSONP的原理了。 JSONP实例运用JSONP做一个类似百度搜索下拉框。 在这之前，先取到百度的接口。 打开百度首页，在输入框随便输入点什么，比如，输入a， 打开Network,点击all，找到地址 这个地址是：https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=a&amp;json=1&amp;p=3&amp;sid=23534_1436_21084&amp;req=2&amp;csor=1&amp;cb=jQuery110206731850454839907_1506167060552&amp;_=1506167060555 只取本次实例需要的参数，精简为：https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=a&amp;cb=jQuery110206731850454839907_1506167060552&amp;_=1506167060555 其中wd是关键字，即输入的内容，cb是回调函数，百度内定的，cb后面的是函数名，可以修改，相当于上面小例子中的abc函数。 现在就修改为abc，并输入到浏览器地址栏中，看看得到什么内容： 可以看到，这个abc函数里的参数是一个json数据，其中s就是我们需要的数据。 完整代码：123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;百度下拉菜单&lt;/title&gt; &lt;style type=&quot;text/css&quot;&gt; #text&#123; width: 300px; height: 30px; border:1px solid #6495ED; line-height: 30px; font-size: 16px; &#125; #ul1&#123; margin: 0; padding:0; border:1px solid #6495ED; border-top: none; width: 300px; display: none; &#125; #ul1 li&#123; list-style: none; margin-top: 5px; &#125; #ul1 li a&#123; font-size: 16px; color: #696969; text-decoration: none; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;input type=&quot;text&quot; id=&quot;text&quot;&gt;&lt;ul id=&quot;ul1&quot;&gt; &lt;/ul&gt;&lt;script&gt; //定义abc函数，添加数据处理程序 function abc(data)&#123; var oUl=document.getElementById(&apos;ul1&apos;); var html=&apos;&apos;; if (data.s.length) &#123; oUl.style.display=&apos;block&apos;; for(var i=0;i&lt;data.s.length;i++)&#123; html+=&quot;&lt;li&gt;&lt;a target=&apos;_blank&apos; href=&apos;https://www.baidu.com/s?wd=&quot;+data.s[i]+&quot;&apos;&gt;&quot;+data.s[i]+&quot;&lt;/a&gt;&lt;/li&gt;&quot;; &#125; oUl.innerHTML=html; &#125;else&#123; oUl.style.display=&apos;none&apos;; &#125; &#125; var oT=document.getElementById(&apos;text&apos;); var oBtn=document.getElementById(&apos;btn&apos;); var oUl=document.getElementById(&apos;ul1&apos;); oT.onkeyup=function()&#123; if (oT.value!=&apos;&apos;) &#123; var aScript=document.createElement(&apos;script&apos;); aScript.src=&apos;https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=&apos;+oT.value+&apos;&amp;cb=abc&apos;; document.body.appendChild(aScript); if(aScript)&#123; //避免过多script标签 document.body.removeChild(aScript); &#125; &#125;else&#123; oUl.style.display=&apos;none&apos;; &#125; &#125; &lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 代码中，动态添加&lt;script&gt;标签，加载完成后就执行abc函数，使获取到的数据展示在页面中。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>JSONP</tag>
        <tag>AJAX</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS特殊布局]]></title>
    <url>%2F2017%2F09%2F19%2Fcss-layout2%2F</url>
    <content type="text"><![CDATA[三列布局三列布局的特征是两侧两列固定宽度，中间列自适应宽度。 1.margin + float原理说明：设置两个侧栏分别向左向右浮动，中间列的宽度根据浏览器窗口自适应。对中间面板设置左右外边距，margin-left的值为左侧栏的宽度，margin-right的值为右侧栏的宽度。 DOM文档123&lt;div id=&quot;left&quot;&gt;&lt;/div&gt;&lt;div id=&quot;right&quot;&gt;&lt;/div&gt;&lt;div id=&quot;center&quot;&gt;&lt;/div&gt; CSS样式123456789101112131415161718#left&#123; width: 200px; height: 100px; float: left; background-color: red;&#125;#right&#123; width: 100px; height: 100px; float: right; background-color: yellow;&#125;#center&#123; margin-left: 210px; margin-right:110px; height: 100px; background-color: blue;&#125; ==注意==：DOM文档的书写顺序，先写两侧栏，再写中间主面板，更换后则侧栏会被挤到下一列 2.position + margin原理说明：通过绝对定位将两个侧栏固定，中间列自适应。对中间面板设置左右外边距，margin-left的值为左侧栏的宽度，margin-right的值为右侧栏的宽度 CSS样式12345678910111213141516171819202122232425body&#123; margin:0; padding: 0;&#125;#left&#123; width: 200px; height: 100px; position: absolute; top: 0; left: 0; background-color: red;&#125;#right&#123; width: 100px; height: 100px; position: absolute; top: 0; right: 0; background-color: yellow;&#125;#center&#123; height: 100px; margin:0 110px 0 210px; background-color: blue;&#125; 两列布局原理和上面三列布局一样，去掉一个侧栏 1.margin + floatDOM文档 123&lt;div id=&quot;left&quot;&gt;&lt;/div&gt;&lt;div id=&quot;main&quot;&gt;&lt;/div&gt; CSS样式123456789101112#left&#123; width: 200px; height: 100px; float: left; background-color: red;&#125; #main&#123; height: 100px; margin-left: 210px; background-color: blue;&#125; 2.position + marginCSS样式123456789101112131415161718body&#123; margin:0; padding:0;&#125;#left&#123; width: 200px; height: 100px; position: absolute; top: 0; left: 0; background-color: red;&#125; #main&#123; height: 100px; margin-left: 210px; background-color: blue;&#125; 圣杯布局左右两栏固定宽度，中间部分自适应 步骤： 三者都设置向左浮动 设置中间主面板宽度为100%，设置两侧栏的宽度。 设置 负边距，左侧的设置负左边距为100%，右侧的设置负左边距为负的自身宽度。 设置父级的padding值给左右两栏留出空间。 设置两个左右两侧为相对定位，左侧的left值为负的左侧的宽度，右侧的right值为负的右侧宽度。 DOM文档12345&lt;div id=&quot;content&quot;&gt; &lt;div class=&quot;main&quot;&gt;&lt;/div&gt; &lt;div class=&quot;left&quot;&gt;&lt;/div&gt; &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;&lt;/div&gt; CSS样式 123456789101112131415161718192021222324252627.main&#123; width:100%; height:100px; float:left;&#125;.left&#123; width:200px; height:100px; float:left; margin-left:-100%; position:relative; left:-200px;&#125;.right&#123; width:100px; height:100px; float:left; margin-left:-100px; position:relative; right:-100px;&#125;#content&#123; padding:0 100px 0 200px;&#125; ==注意==：DOM元素的书写顺序不得更改 双飞翼布局原理说明：双飞翼布局和圣杯布局的思想有些相似，都利用了浮动和负边距，但双飞翼布局在圣杯布局上做了改进，在main元素上加了一层div, 并设置margin,由于两侧栏的负边距都是相对于main-wrap而言，main的margin值变化便不会影响两个侧栏，因此省掉了对两侧栏设置相对布局的步骤。 步骤： 三者都设置向左浮动。 设置main-wrap宽度为100%，设置两个侧栏的宽度。 设置 负边距，left设置负左边距为100%，right设置负左边距为负的自身宽度。 设置main的margin值给左右两个子面板留出空间。 DOM文档12345&lt;div id=&quot;main-wrap&quot;&gt; &lt;div class=&quot;main&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;&lt;div class=&quot;right&quot;&gt;&lt;/div&gt; CSS样式1234567891011121314151617181920212223242526#main-wrap&#123; width: 100%; height: 100px; float: left; background-color: blue;&#125;.left&#123; width: 200px; height: 100px; float: left; margin-left: -100%; background-color: red;&#125;.right&#123; width: 100px; height: 100px; float: left; margin-left: -100px; background-color: yellow;&#125;.main&#123; margin:0 100px 0 200px;&#125; 待续]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue组件之Slots分发内容]]></title>
    <url>%2F2017%2F09%2F10%2Fvue-Slots%2F</url>
    <content type="text"><![CDATA[介绍在使用组件时，父组件中的内容会被丢弃，比如：123&lt;my-component&gt; &lt;p&gt;这是一些内容&lt;/p&gt;&lt;/my-component&gt; 组件my-component中的p标签是不会被渲染的，但实际开发中，我们可能希望运用到父组件中的内容，因为在使用组件时，常常需要这样组合它们：1234&lt;app&gt; &lt;app-header&gt;&lt;/app-header&gt; &lt;app-footer&gt;&lt;/app-footer&gt;&lt;/app&gt; 为了让组件可以组合，我们需要一种方式来混合父组件的内容与子组件自己的模板。这个过程被称为 内容分发，vue提供了一个API，使用特殊的&lt;slot&gt;元素作为原始内容的插槽。 单个Slot要想使用父组件的内容，需要在子组件中加入&lt;slot&gt;插口。 假设 my-component 组件有下面模板： 1234567&lt;div&gt; &lt;h3&gt;我是子组件的标题&lt;/h3&gt; &lt;p&gt;我是子组件的内容&lt;/p&gt; &lt;slot&gt; 只有在没有要分发的内容时才会显示。 &lt;/slot&gt;&lt;/div&gt; 父组件模板：12345&lt;h2&gt;我是父组件的标题&lt;/h2&gt;&lt;hr&gt;&lt;my-component&gt; &lt;p&gt;我是父组件的内容&lt;/p&gt;&lt;/my-component&gt; 渲染结果： 1234567&lt;h2&gt;我是父组件的标题&lt;/h2&gt;&lt;hr&gt;&lt;div&gt; &lt;h3&gt;我是子组件的标题&lt;/h3&gt; &lt;p&gt;我是子组件的内容&lt;/p&gt; &lt;p&gt;我是父组件的内容&lt;/p&gt;&lt;/div&gt; 可知，父组件中的内容被渲染到子组件的slot插口所在的DOM位置，并替换掉slot标签本身。 说明： 当子组件模板只有一个没有属性的 slot 时，父组件整个内容片段将插入到 slot 所在的 DOM 位置，并替换掉 slot 标签本身 最初在&lt;slot&gt;标签中的任何内容都被视为备用内容，在父组件中无内容时显示。 具名Slot 元素可以用一个特殊的属性 name 来配置如何分发内容。多个 slot 可以有不同的名字。具名 slot 将匹配内容片段中有对应 slot 特性的元素。 例子： 父组件模板： 123456789101112&lt;my-component&gt; &lt;p slot=&quot;one&quot;&gt;这是替换第一个内容&lt;/p&gt; &lt;template slot=&quot;two&quot;&gt; &lt;p&gt;替换第二个内容&lt;/p&gt; &lt;span&gt;一个span标签，替换第二个内容&lt;/span&gt; &lt;/template&gt; &lt;p slot=&quot;three&quot;&gt;这是替换第三个内容&lt;/p&gt; &lt;/my-component&gt; 子组件模板： 123456&lt;div&gt; &lt;slot name=&quot;one&quot;&gt;&lt;p&gt;这是子组件第1个内容&lt;/p&gt;&lt;/slot&gt; &lt;slot name=&quot;two&quot;&gt;&lt;p&gt;这是子组件第2个内容&lt;/p&gt;&lt;/slot&gt; &lt;slot name=&quot;three&quot;&gt;&lt;p&gt;这是子组件第3个内容&lt;/p&gt;&lt;/slot&gt;&lt;/div&gt; 渲染结果：1234&lt;p&gt;这是替换第一个内容&lt;/p&gt;&lt;p&gt;替换第二个内容&lt;/p&gt;&lt;span&gt;一个span标签，替换第二个内容&lt;/span&gt;&lt;p&gt;这是替换第三个内容&lt;/p&gt;]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue组件之单向数据流]]></title>
    <url>%2F2017%2F09%2F08%2Fvue-dataflow%2F</url>
    <content type="text"><![CDATA[什么是单向数据流？ prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。这是为了防止子组件无意修改了父组件的状态——这会让应用的数据流难以理解。 另外，每次父组件更新时，子组件的所有 prop 都会更新为最新值。这意味着你不应该在子组件内部改变 prop。如果你这么做了，Vue 会在控制台给出警告。 这是官网给的说明，说白了就是父组件通过props传递给子组件的数据不能在子组件里修改，否则浏览器会报错。 实例先来看看如果不听话的结果：123&lt;div id=&quot;app&quot;&gt; &lt;my-input :val=&quot;1&quot;&gt;&lt;/my-input&gt;&lt;/div&gt; 1234567891011121314151617&lt;script&gt; Vue.component(&apos;my-input&apos;,&#123; props:[&apos;val&apos;], template:&apos;&lt;input type=&quot;button&quot; :value=&quot;val&quot; @click=&quot;changeVal&quot;&gt;&apos;, methods:&#123; changeVal:function()&#123; this.val++; &#125; &#125; &#125;); new Vue(&#123; el:&apos;#app&apos; &#125;);&lt;/script&gt; 上面代码中，父组件传递给子组件一个val数值，绑定在value上，并给按钮添加一个点击事件，点击时val做加一运算。在浏览器中运行，发现效果可以实现，即val值增加了，咋一眼会觉得单向数据流扯淡( • ̀ω•́ )✧。 当然，这是天真的想法。打开控制台，你会发现一行大大的红字： [Vue warn]: Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop’s value. Prop being mutated: “val” 显然，不听话是会吃亏的。浏览器报错了，并友情地提示了怎么解决，你看到了吗？ 解决办法 如果你想把它当作局部数据来用，那么就定义一个局部变量，并用 prop 的值初始化它； 如果你想将它处理成其它数据输出，那么就定义一个计算属性，处理 prop 的值并返回。 首先看第一种方法： 123456789101112131415Vue.component(&apos;my-input&apos;,&#123; props:[&apos;val&apos;], template:&apos;&lt;input type=&quot;button&quot; :value=&quot;counter&quot; @click=&quot;changeVal&quot;&gt;&apos;, data:function()&#123; return &#123;counter:this.val&#125; &#125;, methods:&#123; changeVal:function()&#123; this.counter++; &#125; &#125; &#125;); 上面代码中，将传入的val赋给counter，然后直接操作this.counter,这时浏览器就不会报错了，注意data的书写格式，必须是函数。 第二种方法： 12345678910Vue.component(&apos;my-input&apos;,&#123; props:[&apos;val&apos;], template:&apos;&lt;input type=&quot;button&quot; :value=&quot;changeVal&quot;&gt;&apos;, computed:&#123; changeVal:function()&#123; return this.val+100; &#125; &#125; &#125;); 这时，我们希望将传过来的值加100，得到新的数值，通过计算属性轻松实现。]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue组件之父子通信]]></title>
    <url>%2F2017%2F09%2F08%2Fvue-communication%2F</url>
    <content type="text"><![CDATA[前言vue组件的通信部分是很重要的，组件是协同工作的，这意味着它们要互相通信。看官网文档时，我是比较吃力的，谁让我是菜鸟呢 o(￣▽￣)ｄ 引用官网一段话： 在 Vue 中，父子组件的关系可以总结为 props down, events up。父组件通过 props 向下传递数据给子组件，子组件通过 events 给父组件发送消息 并配图： 刚开始看的时候，我是懵逼的，后来敲了几遍，初步了解了怎么回事，为啥是初步呢，因为没踩过坑啊，也不知道坑在哪啊。哎，我废话真多。 父组件向子组件通信使用props传递数据 组件实例的作用域是孤立的。这意味着不能 (也不应该) 在子组件的模板内直接引用父组件的数据。要让子组件使用父组件的数据，我们需要通过子组件的 props 选项 先前写了一篇Vue组件之props传递数据，这其实就是一个父向子传递数据的过程。在这，我再举一个例子。 实例1234567891011121314151617&lt;div id=&quot;app&quot;&gt; &lt;my-button val=&quot;toggle&quot;&gt;&lt;/my-button&gt; &lt;my-button val=&quot;search&quot;&gt;&lt;/my-button&gt; &lt;my-button val=&quot;click&quot;&gt;&lt;/my-button&gt;&lt;/div&gt; &lt;script&gt; Vue.component(&apos;my-button&apos;,&#123; props:[&apos;val&apos;], template:&apos;&lt;input type=&quot;button&quot; :value=&quot;val&quot;&gt;&apos; &#125;); var vm=new Vue(&#123; el:&apos;#app&apos;, &#125;); &lt;/script&gt; 上面代码中，div部分是父级，Vue.component(...)部分是子级，子组件要显式地用props选项声明它期待获得的数据。 在这里，子级想要获取的就是val，这是父级传递过来的，是手动添加的自定义属性，属性值是希望展现的内容。我希望每个按钮实现不同功能，所以传递不同的val值，并动态绑定在子级的value上，格式如上。要注意的是，必须动态绑定在value上，即用v-bind，缩写为:。 结果： 这其实是这样的一个过程：我定义了一个按钮组件，需要在页面中多处引用，它们的样式是一致的，但是我想它们实现不同的功能，于是通过在父组件上绑定自定义属性，并使用props传递给子组件，去修改子组件的一小部分。从上面代码可以看出，这很方便。（我希望我没说错） 子组件向父组件通信使用自定义事件 使用 $on(eventName) 监听事件 使用 $emit(eventName) 触发事件 这到底是几个意思呢，我也是懵逼的，我按着自己的理解，写了一个例子。 实例12345678910111213141516171819202122232425262728&lt;div id=&quot;app&quot;&gt; &lt;p&gt;&#123;&#123;count&#125;&#125;&lt;/p&gt; &lt;button-counter @add=&quot;addCount&quot;&gt;&lt;/button-counter&gt;&lt;/div&gt;&lt;script&gt; Vue.component(&apos;button-counter&apos;,&#123; template:&apos;&lt;input type=&quot;button&quot; value=&quot;change count&quot; @click=&quot;changeCount&quot;&gt;&apos;, methods:&#123; changeCount:function()&#123; this.$emit(&apos;add&apos;); &#125; &#125; &#125;); var vm=new Vue(&#123; el:&apos;#app&apos;, data:&#123; count:1 &#125;, methods:&#123; addCount:function()&#123; this.count++; &#125; &#125; &#125;); &lt;/script&gt; 暗示自己不要被代码吓到，我写的太简单了。子组件button-counter是一个按钮，我需要点击它去改变父组件的count值。步骤： 在子组件，即按钮上添加changeCount点击事件 在changeCount事件函数中，添加代码this.$emit(&#39;add&#39;)，这个add是自定义事件，需要添加到父级上，this.$emit()就当做固定格式吧 在父级添加add自定义事件，用v-on指令，缩写为@，如上 在add自定义事件上添加事件函数addCount，addCount定义在实例里，这个函数里就是具体操作代码，即this.count++，以实现count的改变 这些就是基本步骤了，好吧，好像说的比较烂，不过应该是对的，至少我运行成功￣▽￣ 。 错了也没人知道，反正我自己看。开玩笑，其实是我不会用专业语言叙述，不少东西我也没提到，因为我也不熟啊，推荐看官网文档，虽然说的比较隐晦，但保证质量啊。]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue组件之字面量语法与动态语法]]></title>
    <url>%2F2017%2F09%2F06%2Fvue-grammar%2F</url>
    <content type="text"><![CDATA[定义一个组件： 1&lt;comp message=&quot;1&quot;&gt;&lt;/comp&gt; //使用的是字面量语法传递数值 123456789Vue.component(&apos;comp&apos;,&#123; props:[&apos;message&apos;], template:&apos;&lt;span v-on:click=&quot;alertType&quot;&gt;&#123;&#123;message&#125;&#125;&lt;/span&gt;&apos;, methods:&#123; alertType:function()&#123; alert(typeof this.message); &#125; &#125; &#125;); 给组件定义一个函数用于检测传递的数据是什么类型，此处检测到 message 是 string 类型，然而我本意是想传递数值1，即 number 类型。可能会受到双引号影响，觉得去掉双引号就是数字了，其实不然，我不知道去掉双引号是否规范，但是去掉后结果依然是 string。这是字面量语法的结果。 vue规定，如果想传递一个实际的 number，需要使用 v-bind，从而让它的值被当作 JavaScript 表达式计算，然后计算结果赋值： 1&lt;comp :message=&quot;1&quot;&gt;&lt;/comp&gt; //用v-bind绑定 此时检测结果为number。 两个例子：1&lt;comp message=&quot;1+2&quot;&gt;&lt;/comp&gt; //1+2 1&lt;comp :message=&quot;1+2&quot;&gt;&lt;/comp&gt; //3]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS居中布局]]></title>
    <url>%2F2017%2F09%2F02%2Fcss-layout%2F</url>
    <content type="text"><![CDATA[居中 水平居中 垂直居中 水平居中 行内元素：对父元素设置text-align:center; 定宽块状元素: 设置左右margin值为auto; 不定宽块状元素: 设置子元素为display:inline,然后在父元素上设置text-align:center; 通用方案: flex布局，对父元素设置display:flex;justify-content:center; 垂直居中知道子元素宽高情况（以下所有父元素都设置了相对定位） 使用position:absolute,设置left、top、margin-left、margin-top的属性（相对父元素） 12345678910#children&#123; width: 100px; height: 100px; background-color: red; position: absolute; top: 50%; left: 50%; margin-left: -50px; margin-top: -50px; &#125; 使用position:fixed,同样设置left、top、margin-left、margin-top的属性（相对浏览器窗口） 12345678910#children&#123; width: 100px; height: 100px; background-color: red; position: fixed; top: 50%; left: 50%; margin-left: -50px; margin-top: -50px; &#125; 使用position:fixed和margin:auto，设置left、right、top和bottom（相对浏览器窗口）如果不设置宽高会覆盖浏览器窗口 1234567891011#children&#123; width: 100px; height: 100px; background-color: red; position: fixed; left:0; right: 0; top: 0; bottom: 0; margin:auto;&#125; 使用position:absolute和margin:auto，设置left、right、top和bottom（相对父元素）如果不设置宽高会覆盖父元素 1234567891011#children&#123; width: 100px; height: 100px; background-color: red; position: absolute; left:0; right: 0; top: 0; bottom: 0; margin:auto;&#125; 不知道子元素宽高情况123456#children&#123; background-color: red; position: absolute; top:50%; transform:translateY(-50%);&#125; 设置父元素，使内容居中 设置父元素line-height等于它的高，使内容垂直居中（常用于文字居中） 1234567#parent&#123; width: 100px; height: 100px; border:1px solid #000; line-height: 100px; text-align: center;&#125; 利用display:table-cell和vertical-align:middle使内容垂直居中（适用与多行文本居中） 123456789#parent&#123; width: 100px; height: 100px; border:1px solid #000; text-align:center; display:table-cell; vertical-align:middle; &#125; Flex布局通用，给父元素设置display:flex和align-items:center,考虑兼容 1234567#parent&#123; width: 500px; height: 500px; border:1px solid #000; display: flex; align-items: center;&#125;]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[load和DOMContentLoaded的区别]]></title>
    <url>%2F2017%2F08%2F29%2Faboutload%2F</url>
    <content type="text"><![CDATA[今天看到一个面试题： $(function(){console.log(1)}); 和 window.onload = function(){console.log(2)};输出结果 答案： 1先输出1，再输出2 这一题考察的就是原生js中的load和DOMContentLoaded的区别。那么它们的区别是什么？ 12345678window.addEventListener(&apos;load&apos;,function()&#123; // 页面的全部资源加载完才执行，包括图片，视频等&#125;)document.addEventListener(&apos;DOMContentLoaded&apos;,function()&#123; //DOM渲染完即可执行，此时图片，视频还可能没有加载完&#125;); 对应的它们在jQuery中的写法为： 123456789// DOMContentLoaded$(document).ready(function() &#123; // ...代码...&#125;);//load$(document).load(function() &#123; // ...代码...&#125;);]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js中浅拷贝和深拷贝]]></title>
    <url>%2F2017%2F08%2F27%2Fjs-copy%2F</url>
    <content type="text"><![CDATA[简介深复制和浅复制只针对像 Object, Array 这样的复杂对象的。简单来说，浅复制只复制一层对象的属性，而深复制则递归复制了所有层级。 浅拷贝实现代码：1234567function extendCopy(p)&#123; var c=&#123;&#125;; for(var attr in p)&#123; c[attr]=p[attr]; &#125; return c;&#125; 实例： 1234567var a=&#123; num:10, arr:[1,2,3]&#125;var b=extendCopy(a);console.log(b); 结果：此时，b已经继承了a的属性。 问题实际上，JavaScript 存储对象都是存地址的，浅拷贝只是增加了一个指针指向已经存在的内存，就是说此时a.arr和b.arr指向同一个地址。如果改变其中一个的值，另一个也会改变。如下： 12b.arr.push(4);console.log(a); 向b中的arr添加一项，再打印a，结果：发现，改变b的arr,a也相应改变了。这带来不方便，我们不希望它们之间存在这种联系。 深拷贝对于浅拷贝存在的问题，可以通过深拷贝去除。 实现代码： 123456789101112function deepCopy(p, c) &#123; var c = c || &#123;&#125;; //c等于自身或者&#123;&#125; for(var attr in p)&#123; if(typeof p[attr]===&apos;object&apos;)&#123; c[attr]=(p[attr].constructor===Array)?[]:&#123;&#125;; deepCopy(p[attr],c[attr]); &#125;else&#123; c[attr]=p[attr]; &#125; &#125; return c;&#125; 实例： 1234567var a=&#123; num:10, arr:[1,2,3]&#125;var b=deepCopy(a,b);console.log(b); 结果： 这时，再来改变一下b，看看a是否改变： 123b.arr.push(5);console.log(b);console.log(a); 结果：显然，此时b的arr多了一项5，而a没有改变。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue组件中的data]]></title>
    <url>%2F2017%2F08%2F25%2Fvue-learn4%2F</url>
    <content type="text"><![CDATA[学习内容data必须是函数。通过 Vue 构造器传入的各种选项大多数都可以在组件里用。data 是一个例外，它必须是函数。 实例如下一个组件： 123456Vue.component(&apos;my-component&apos;, &#123; template: &apos;&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;&apos;, data: &#123; message: &apos;hello&apos; &#125; &#125;) 在浏览器运行会报错，提示The &quot;data&quot; option should be a function that returns a per-instance value in component definitions.即说明data必须是函数，所以改造一下变为： 12345678910var data=&#123; message: &apos;hello&apos; &#125;; Vue.component(&apos;my-component&apos;, &#123; template: &apos;&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;&apos;, data: function()&#123; return data; &#125; &#125;) 此时，就可以正常渲染了。但上面代码中还有一个问题，如果改变message，将影响所有组件，这不对，我们通过为每个组件返回全新的data对象来解决这个问题： 12345data: function()&#123; return &#123; message: &apos;hello&apos; &#125; &#125;]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue组件之is属性]]></title>
    <url>%2F2017%2F08%2F25%2Fvue-learn3%2F</url>
    <content type="text"><![CDATA[学习内容使组件成为原生 HTML 元素的形式，以is特性扩展 实例说明DOM模板解析说明 当使用 DOM 作为模版时 (例如，将 el 选项挂载到一个已存在的元素上), 你会受到 HTML 的一些限制，因为 Vue 只有在浏览器解析和标准化 HTML 后才能获取模版内容。尤其像这些元素&lt;ul&gt;，&lt;ol&gt;，&lt;table&gt;，&lt;select&gt; 限制了能被它包裹的元素，而一些像 &lt;option&gt; 这样的元素只能出现在某些其它元素内部。 实例假设现在有一个自定义组件，为my-div，将它引用在&lt;table&gt;标签里：12345&lt;div id=&quot;app&quot;&gt; &lt;table&gt; &lt;my-div&gt;&lt;/my-div&gt; &lt;/table&gt;&lt;/div&gt; 123Vue.component(&quot;my-div&quot;,&#123; template:&quot;&lt;div&gt;This is my div&lt;/div&gt;&quot; &#125;); 运行在浏览器后，正常显示，但是其实出现了问题，检查元素，结果如下： 显然自定义组件在&lt;table&gt;里被认为是无效内容，浏览器将它渲染在&lt;table&gt;之外了。像&lt;table&gt;这样的标签限制了其内部的元素类型，如果想引入自己的自定义组件，可以使用is属性： 123&lt;table&gt; &lt;tr is=&quot;my-div&quot;&gt;&lt;/tr&gt;&lt;/table&gt; 再来检查下元素： 这下嵌套正确了。]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue组件之props传递数据]]></title>
    <url>%2F2017%2F08%2F24%2Fvue-learn2%2F</url>
    <content type="text"><![CDATA[上篇文章说明了组件的 全局注册 和局部注册 Vue学习之组件一 之前是写了一个文本框组件，就一行代码，其实完全可以写的更复杂点，也可以加样式，就跟平时写样式一样。比如我们可以写一个自定义的很炫酷的下拉菜单，然后在页面中需要的地方可以简单地用一个闭合标签引用，显然，这很方便，也使得代码更简洁。那我们现在思考一个问题，引用的组件是一模一样的，但我们在页面各处引用时，经常是需要有一点改变的，这就好比Windows上右键菜单，不同的图标右键菜单功能是不完全一样的。所以应该怎么做呢？ 官网上给出Prop选项来传递数据。为了明白，举个栗子。 就拿上篇中的全局注册例子， 12345678&lt;div id=&quot;app&quot;&gt; &lt;my-input&gt;&lt;/my-input&gt; &lt;hr&gt;&lt;/div&gt;&lt;div id=&quot;app2&quot;&gt; &lt;my-input&gt;&lt;/my-input&gt;&lt;/div&gt; 123456789101112Vue.component(&quot;my-input&quot;,&#123; //全局注册 template:&quot;&lt;input type=&apos;text&apos; placeholder=&apos;输入文字&apos;&gt;&quot; &#125;);new Vue(&#123; el:&quot;#app&quot;&#125;); new Vue(&#123; el:&quot;#app2&quot;&#125;); 上例中，所有的文本框都会有提示输入文字，现在我想每个框都有自己的提示，比如登录框中，有提示输入用户名的，有提示输入密码的。显然要修改的就是placeholder属性。这时，我们可以这么做。在引用标签里加入一个自定义属性，属性值为你想提示的内容，即修改上面html代码为： 1234567&lt;div id=&quot;app&quot;&gt; &lt;my-input warn=&quot;输入用户名&quot;&gt;&lt;/my-input&gt;&lt;/div&gt;&lt;div id=&quot;app2&quot;&gt; &lt;my-input warn=&quot;输入密码&quot;&gt;&lt;/my-input&gt;&lt;/div&gt; 上面标签中，我各加了一个warn属性，这个属性是自定义的，值也是根据意愿修改，接下来修改js部分， 12345Vue.component(&quot;my-input&quot;,&#123; //全局注册 props:[&quot;warn&quot;], template:&quot;&lt;input type=&apos;text&apos; :placeholder=&apos;warn&apos;&gt;&quot; &#125;); 只需在注册代码里修改三处： 添加props属性，如上格式 对应修改placeholder值，如上 别忘了一个重要的，要用v-bind绑定属性，简写: 此时显示结果为：嗯，这下满意了。]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vue组件学习]]></title>
    <url>%2F2017%2F08%2F24%2Fvue-learn1%2F</url>
    <content type="text"><![CDATA[什么是组件？引用官方话就是： 组件 (Component) 是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素，Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 is 特性扩展。 其实打个比方就是，组件就好比电脑中的硬盘，显卡，CPU等等，这些零件组成电脑，而组件就组成我们的页面。其中，需要明白的是组件是自定义标签。 怎么使用组件？使用前需要注册，注册又分两种： 全局注册 局部注册 全局注册语法： 123Vue.component(&apos;自定义标签名&apos;, &#123; template:&quot;代码块&quot; &#125;) 示例： 12345678&lt;div id=&quot;app&quot;&gt; &lt;my-input&gt;&lt;/my-input&gt; &lt;hr&gt;&lt;/div&gt;&lt;div id=&quot;app2&quot;&gt; &lt;my-input&gt;&lt;/my-input&gt;&lt;/div&gt; 123456789101112Vue.component(&quot;my-input&quot;,&#123; //全局注册 template:&quot;&lt;input type=&apos;text&apos; placeholder=&apos;输入文字&apos;&gt;&quot;&#125;);new Vue(&#123; el:&quot;#app&quot;&#125;);new Vue(&#123; el:&quot;#app2&quot;&#125;); 上例中，我全局注册一个组件，名为my-input，它的内容是一个input文本框，因为这是全局注册（注意书写的位置，不在new Vue里），所以在两个实例里都可以引用，结果显示为： 局部注册语法： 12345678new Vue(&#123; // ... components: &#123; &apos;自定义标签名&apos;: &#123; template:&quot;代码块&quot; &#125; &#125;&#125;) 示例： 1234567&lt;div id=&quot;app&quot;&gt; &lt;my-input&gt;&lt;/my-input&gt;&lt;/div&gt;&lt;div id=&quot;app2&quot;&gt; &lt;my-input&gt;&lt;/my-input&gt;&lt;/div&gt; 123456789101112new Vue(&#123; el: &quot;#app&quot;, components:&#123; &quot;my-input&quot;:&#123; template:&quot;&lt;input type=&apos;text&apos; placeholder=&apos;输入文字&apos;&gt;&quot; &#125; &#125;&#125;);new Vue(&#123; el: &quot;#app2&quot;&#125;); 这次我将组件my-input注册在实例app里面，此时它只在id=&quot;app&quot;中有效，因此结果只显示一个文本框，并且浏览器报错。注意，此时的components是加了s的，全局注册里没有。]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一个github账户拥有多个page]]></title>
    <url>%2F2017%2F08%2F23%2Fcreate-page%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;在建好博客后，我发现了一个尴尬的事，就是我的一些demo无法展示了，因为我的github page放了我的博客，无法放其他展示页面了，可是我又想放自己的展示网页，怎么办呢？ &emsp;&emsp;我首先想到的是将文件放在博客文件下面，然后引用，但是hexo主题可能会对内容样式修改，资源多了会很乱的感觉，反反复复修改了不少东西，效果不尽人意。今天我特意上网查了一下关于github page的资料，发现原来还可以建多个page，只不过命名不是username.github.io的形式了。 &emsp;&emsp;现在假设你拥有一个username.github.io的博客主页，然后你还想要添加页面去展示其他内容，你可以这么做： 新建仓库，命名随意，不要用username.github.io形式，比如我新建一个仓库，名为demo 仓库建好后，进入仓库，点击Settings，往下翻到GitHub Pages，点击choose a theme，这里随便选一个就行，因为你也不需要主题，在放自己页面之前可以删掉。选一个主题后，commit changes，这时仓库就有下面截图中的两个文件：这是主题的配置文件和主页面，可以直接删掉，然后放入自己的主页index.html 假设你已经将你的index页面放进仓库，这时就可以通过username.github.io/仓库名来访问了，比如我的新建仓库名为demo，就看以通过https://wungjyan.github.io/demo/来访问了。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HEXO搭建个人博客]]></title>
    <url>%2F2017%2F08%2F22%2Ffirstarticle%2F</url>
    <content type="text"><![CDATA[&emsp;&emsp;每一个用hexo搭建好博客的人都会在第一篇文章中来感慨一番，我也不例外。 &emsp;&emsp;查看了很多文档，踩过不少坑，终于初步搭建好hexo博客。我是直接部署在github上的，省事。关于怎么搭建，我就不说了，毕竟网上教程实在太多了，看的我都头晕了，推荐去官网看文档。 &emsp;&emsp;这应该算是我的第二个博客。第一个是用wordpress搭建的，那时也是整天折腾，想添加各种功能，用起来也不错。后来在没必要的事上确实花费过多的时间，用了两个多月就没用了。再后来接触到hexo，就被吸引了，想自己也搭建一个hexo博客。至于理由嘛，首先hexo是基于node.js的，网传node的各种厉害，说要替代php什么的，作为一个想靠近前端的人来说，与node沾边也不错嘛，虽然实际操作没用到什么，虽然我自己也不会node。第二，用wordpress时是部署到阿里云ECS上的，每个月服务器费就快100块了，作为一个菜鸟，感觉不值啊，而hexo可以免费部署到github上，顺便还练习一下git的使用，很值得。最后，很重要的一点就是hexo支持Markdown我很喜欢用Markdown来编辑文本，因为平时用的不多，这下又可以多练习一下Markdown语法了。我想，绝大多数用hexo的人都有我这三点原因的。 &emsp;&emsp;趁着这两天闲的慌，我把hexo博客搭建好了。之前放弃wordpress后，我在博客园里写了几次，主要是记录一些笔记。很向往那些技术大牛，篇篇干货。最后，还是要多读书的。]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
