<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wj&#39;blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-22T02:40:58.940Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wungjyan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo博客迁移到另一台电脑</title>
    <link href="http://yoursite.com/2018/08/17/move-hexo/"/>
    <id>http://yoursite.com/2018/08/17/move-hexo/</id>
    <published>2018-08-17T15:53:16.000Z</published>
    <updated>2018-08-22T02:40:58.940Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>感觉好久没更新博客了，最近换了台新电脑，开心的同时就是要把一些数据做迁移了，其中最惦记的就是hexo博客怎么迁移，参考了网上的一些文章后，终于成功迁移，现在就把过程记录下，很简单的。</p><h2 id="复制原电脑上的数据"><a href="#复制原电脑上的数据" class="headerlink" title="复制原电脑上的数据"></a>复制原电脑上的数据</h2><p>复制旧电脑上的hexo数据，注意不用全部复制，只需复制以下几个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">package.json</span><br><span class="line">scaffolds/</span><br><span class="line">source/</span><br><span class="line">themes/</span><br></pre></td></tr></table></figure></p><p>把这些文件复制到新电脑上的新建文件夹里，如：hexo文件夹</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>新电脑上需先安装有node环境</li><li><p>全局安装hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// mac环境</span><br><span class="line">sudo npm install -g hexo</span><br></pre></td></tr></table></figure></li><li><p>进入hexo目录，依次执行以下安装命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure></li><li><p>检查：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>此时可访问浏览器：<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 就可以看到博客了。整个过程还是很简单的，不确定是否所有情况都可以成功，但可一试。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;感觉好久没更新博客了，最近换了台新电脑，开心的同时就是要把一些数据做迁移了，其中最惦记的就是hexo博客怎么迁移，参考了网上的一些文章后，终
      
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>了解react中的虚拟DOM</title>
    <link href="http://yoursite.com/2018/07/12/react08/"/>
    <id>http://yoursite.com/2018/07/12/react08/</id>
    <published>2018-07-12T10:15:49.000Z</published>
    <updated>2018-07-12T10:22:57.988Z</updated>
    
    <content type="html"><![CDATA[<p>在我学习vue框架的时候，就时常听到虚拟DOM的概念，后来了解到vue2.0新增了虚拟DOM，那时我并不知道这会有什么意义，因为我只想关心怎么使用框架。时至今日，我在学习react，在网上浏览react相关文章的时候，虚拟DOM这一词汇也是被时常提及，可能是因为react框架是使用虚拟DOM的先行者吧。于是我就花了一些时间，简单地了解了一下，如果不去追究代码的实现，我也可以简单说说我的理解。</p><h2 id="为什么需要虚拟DOM？"><a href="#为什么需要虚拟DOM？" class="headerlink" title="为什么需要虚拟DOM？"></a>为什么需要虚拟DOM？</h2><p>可能本来我应该先说说什么是虚拟DOM，但这其实没啥可说的，我们就可以把它定义为js对象，但真要说起来可能也有很多东西可以说，关于这个网上已有一大堆好文，我就不去照搬了。我就想说说为啥需要虚拟DOM？其实很多像我这样的人可能不了解虚拟DOM，但是我们却知道它可以提高性能，那么它到底是怎么提高性能呢？</p><h3 id="设计一个框架"><a href="#设计一个框架" class="headerlink" title="设计一个框架"></a>设计一个框架</h3><p>在这里，我不写代码，我们来假设一下，如果我们自己来实现一个react框架，那么我们会怎么来实现？好吧，我们先借鉴一下react框架，来理个思路：</p><ol><li>state（数据层），本着不直接操作DOM而是操作数据的原则，我们会有一个数据存放的地方；</li><li>jsx（模板），模板最终会生成DOM结构用于展示，其实jsx语法实现的内容就相当于模板；</li><li>数据 + 模板 结合，生成DOM结构，用于显示；</li><li>state数据发生变化；</li><li>数据 + 模板 结合，生成新的DOM结构，并替换掉原先的DOM结构。</li></ol><p>按照上面这五个步骤去设计我们的框架，这完全是没有大问题的。功能是可以实现了，但缺点也是很明显的，很多时候页面只会变化一小部分，如果每次变化都要重新渲染整个DOM结构，这显然大大消耗了性能。要知道我们在使用js时都是尽量避免直接操作DOM的，所以我们需要尝试改进。</p><h3 id="改进框架"><a href="#改进框架" class="headerlink" title="改进框架"></a>改进框架</h3><p>我们知道上面步骤中需要改进的地方就是最后一步，我们不应该在数据变化时替换掉整个DOM结构，而是替换需要更改的地方，于是我们可以按如下步骤实现：</p><ol><li>state（数据层），本着不直接操作DOM而是操作数据的原则，我们会有一个数据存放的地方；</li><li>jsx（模板），模板最终会生成DOM结构用于展示，其实jsx语法实现的内容就相当于模板；</li><li>数据 + 模板 结合，生成DOM结构，用于显示；</li><li>state数据发生变化；</li><li>数据 + 模板 结合，生成新的DOM结构，不直接替换原先的DOM结构；</li><li>新的DOM和原始DOM作对比，找出差异部分；</li><li>找到差异的部分后，只替换需要变化的DOM结构；</li></ol><p>上面的步骤，前四步还和以前一样，到了第五步时，我们先不直接替换整个DOM，而是在接下来比较新旧DOM，找到需要变更的地方，然后实现部分更新替换。现在，我们解决了这个整体替换DOM结构的大隐患，实现了局部更新，这听起来似乎性能嗖嗖的上去了。然鹅~聪明的你一定发现了，这里面有一个步骤似乎并不讨喜，那就是第六步，新旧DOM做对比。对比啥？是在对比DOM结构啊！这也是相当消耗性能的。搞了半天，其实性能并没有提升多少，说不定还下降了。所以，我们还需要改进！</p><h3 id="虚拟DOM的引入"><a href="#虚拟DOM的引入" class="headerlink" title="虚拟DOM的引入"></a>虚拟DOM的引入</h3><p>吁~终于扯到虚拟DOM上了，没错，接下来我们就加入虚拟DOM的概念来改进我们的框架。还记得我上面开始说的嘛，虚拟DOM你可以理解为就是一个js对象，不过这个对象里保存了DOM信息，我们一步一步看。</p><p>首先，前两步我们总是需要的：</p><ol><li>state（数据层）；</li><li>jsx（模板）；</li></ol><p>接下来，我们要结合数据和模板，但是这次我们先不直接生成DOM结构，而是生成虚拟DOM：</p><ol start="3"><li><p>数据 + 模板 生成虚拟DOM （虚拟DOM是js对象，用来描述真实DOM信息），如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[&apos;div&apos;,&#123;id:&apos;root&apos;&#125;,[&apos;span&apos;,&#123;&#125;,&apos;hello world&apos;]]</span><br><span class="line"></span><br><span class="line">//上面对象所描述的信息就是：&lt;div id=&quot;root&quot;&gt; &lt;span&gt;hello world&lt;/span&gt; &lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>用虚拟DOM结构生成真实的DOM结构，来显示，即</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt; &lt;span&gt;hello world&lt;/span&gt; &lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>state发生变化；</p></li><li><p>数据 + 模板 生成新的虚拟DOM，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[&apos;div&apos;,&#123;id:&apos;root&apos;&#125;,[&apos;span&apos;,&#123;&#125;,&apos;hi&apos;]]</span><br><span class="line"></span><br><span class="line">//hello world 变成 hi</span><br></pre></td></tr></table></figure></li><li><p>比较原始虚拟DOM和新的虚拟DOM，区别就是span中内容的变更；</p></li><li>直接改变DOM中span中的内容。</li></ol><p>看到这，我想你对虚拟DOM有了大概的了解了。查看上面步骤，你可能也会疑问，生成虚拟DOM这里不会消耗性能吗？其实肯定会消耗一些性能的，但相比较直接生成真实DOM结构，肯定是大大降低消耗的，而且后面的对比差异就是直接对比js对象，不涉及DOM操作，这里也是大大提升了效率的。</p><p>以上就是我对虚拟DOM的简单理解，一些地方可能说的不太对，但我的意思应该是明显的吧，嘿嘿~</p><p>最近在忙找新工作的事，其实也不忙。虽然收到几个offer，但不是自己喜欢的，哎，大家还是对应届生的能力有所怀疑啊，我表示无力，只能说我能力还是不足啊。多学学，继续加油。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在我学习vue框架的时候，就时常听到虚拟DOM的概念，后来了解到vue2.0新增了虚拟DOM，那时我并不知道这会有什么意义，因为我只想关心怎么使用框架。时至今日，我在学习react，在网上浏览react相关文章的时候，虚拟DOM这一词汇也是被时常提及，可能是因为react框
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>redux体验</title>
    <link href="http://yoursite.com/2018/06/18/react07/"/>
    <id>http://yoursite.com/2018/06/18/react07/</id>
    <published>2018-06-18T08:01:45.000Z</published>
    <updated>2018-07-12T10:16:44.200Z</updated>
    
    <content type="html"><![CDATA[<p>在网上看过不少资料文档后，确认redux基础概念并不是想象中的难，为啥这么说呢，因为在我还没接触react时就到处听人说redux很难，所以我一直以为它很难上手。但在实际接触后，发现基本的概念并不难，甚至比当初刚接触vuex时更简单。当然了，难的我也还没接触到，现在只说最基础的。</p><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><p>关于redux的概念其实我也讲不好的，为了好理解，我尽量用自己的话描述下，到底对不对，说不好~</p><ul><li><p>store：可以看成是一个容器，保存数据的地方，要注意的是，整个应用只能有一个 Store</p></li><li><p>state：包含具体的数据，通过store.getState()可以拿到当前的数据，并且一个 State 对应一个 View</p></li><li><p>action：state的变化会导致view的更新，页面中我们是不能直接接触state的，应该是触发view才能导致state变化，可以理解为action就是view发出的通知，表示state要变化了</p></li><li><p>reducer：在发出action通知后，要更新state了，这个更新state的过程就是reducer，它是一个函数，接收action和state作为参数，对应更新state</p></li></ul><p>我知道，刚来就看这么多概念是没用的，可以结合下面说的例子慢慢看。</p><h2 id="感受一下redux"><a href="#感受一下redux" class="headerlink" title="感受一下redux"></a>感受一下redux</h2><p>通常人们都把redux和react在一起说，但事实上这两个是解耦的，redux不一定要用在react应用上。为了演示方便，我们还是使用<code>create-react-app</code>脚手架，不过开始时，我们不结合react，而是单独看看它的使用。</p><p>将脚手架<code>src</code>目录下的所有文件全删除，新建一个index.js文件，写入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 引入createStore，用以创建store</span><br><span class="line">import &#123;createStore&#125; from &apos;redux&apos;</span><br><span class="line"></span><br><span class="line">// 创建reducer</span><br><span class="line">function reducer(state=0, action)&#123;</span><br><span class="line">   switch(action.type)&#123;</span><br><span class="line">       case &apos;ADD&apos;:</span><br><span class="line">         return state+1</span><br><span class="line">       case &apos;REMOVE&apos;:</span><br><span class="line">         return state-1</span><br><span class="line">       default:</span><br><span class="line">         return 10</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 新建store</span><br><span class="line">const store = createStore(reducer)</span><br><span class="line"></span><br><span class="line">//查看当前state</span><br><span class="line">console.log(store.getState())</span><br></pre></td></tr></table></figure></p><p>当你敲完这些代码，运行后，可以在控制台看到输出了10。我们来一行行看。</p><p>首先，引入了createStore，只看名字我们也知道了，是用来创建store的，它是一个函数，传入reducer作为参数即可创建出store。</p><p>再来看reducer函数，它并不是一定要以reducer作为函数名的，你可以自定义。它有两个参数，一个是state，它就是包含具体数据的，可以初始化为0，它可以是字符串，对象等多种类型。第二个参数action是view层传过来的，它包含通知信息，保存在type属性中，它的type属性值也是我们自己定义的，根据传来的信息进行不同的state更新。上面代码还没涉及到action的分发，后面再说。</p><p>接下来，就是把新建的reducer作为参数传入到createStore中，从而创建store了，store中的getState方法可以拿到当前state。输出的结果是10，因为我们并没有发送action来提示更新state，所以默认返回了10，这些看代码也很好理解。那么接下来，我们尝试发送一次更新需求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 发送ADD需求</span><br><span class="line">store.dispatch(&#123;type:&apos;ADD&apos;&#125;)</span><br><span class="line"></span><br><span class="line">// 再查看当前state</span><br><span class="line">console.log(store.getState())</span><br></pre></td></tr></table></figure></p><p>结合reducer的代码，也可以明白现在打印的就是11了，action就是通过dispatch发送的，它本质上就是一个对象，一般type属性必写，之后也可以自定义其他属性。好了，现在redux的基本概念已经走了一遍，当然实际中不可能这么简单，这里只做演示。接下来，我们结合react再来写一个实际的小例子。</p><h2 id="简单计数器"><a href="#简单计数器" class="headerlink" title="简单计数器"></a>简单计数器</h2><p>结合react来做一个简单的计数器吧，把index.js文件改成如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;</span><br><span class="line">import ReactDOM from &apos;react-dom&apos;</span><br><span class="line">import &#123;createStore&#125; from &apos;redux&apos;</span><br><span class="line">import reducer from &apos;./reducer.js&apos;</span><br><span class="line"></span><br><span class="line">const store = createStore(reducer)</span><br><span class="line"></span><br><span class="line">class App extends React.Component&#123;</span><br><span class="line">    remove()&#123;</span><br><span class="line">        store.dispatch(&#123;</span><br><span class="line">            type:&apos;REMOVE&apos;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    add()&#123;</span><br><span class="line">        store.dispatch(&#123;</span><br><span class="line">            type:&apos;ADD&apos;,</span><br><span class="line">            text:2</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">              &lt;input type=&quot;button&quot; value=&quot;-&quot; onClick=&#123;this.remove.bind(this)&#125;/&gt;</span><br><span class="line">              &lt;span&gt;&#123;store.getState()&#125;&lt;/span&gt;</span><br><span class="line">              &lt;input type=&quot;button&quot; value=&quot;+&quot; onClick=&#123;this.add.bind(this)&#125;/&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;App/&gt;,document.getElementById(&apos;root&apos;))</span><br></pre></td></tr></table></figure></p><p>上面代码也没有啥可说的，都看得懂，注意的是我在add函数中的action里多加了一个text属性，这个属性也是能被传到reducer里的，可以用于state的计算。</p><p>再来新建一个reducer.js文件，用来写reducer文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export default function reducer(state=0,action)&#123;</span><br><span class="line">    switch(action.type)&#123;</span><br><span class="line">      case &apos;ADD&apos;:</span><br><span class="line">        return state + action.text</span><br><span class="line">      case &apos;REMOVE&apos;:</span><br><span class="line">        return state - 1</span><br><span class="line">      default:</span><br><span class="line">        return state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在运行浏览器，可以看到页面效果了，但点击按钮时，你会发现数字并没有增加，打开控制台，也没有报错。这是什么原因呢？</p><p>原因是在于没有监听state的变化，view是不会自动更新state的，我们需要手动监听state的变化，这时我们需要<code>store.subscribe</code>这个方法，Store 允许使用store.subscribe方法设置监听函数，一旦 State 发生变化，就自动执行这个函数。那么想一想，我们监听谁呢？</p><p>其实监听的方式不止一种，在这里有一种比较好理解的。每当state变化时，监听函数就会自动执行，那我们让组件重新渲染不就行了，重新渲染的组件一定是最新的state，所以我们可以将index.js文件的最后改造一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function render()&#123;</span><br><span class="line">    ReactDOM.render(&lt;App/&gt;,document.getElementById(&apos;root&apos;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render()</span><br><span class="line"></span><br><span class="line">store.subscribe(render)</span><br></pre></td></tr></table></figure><p>这时，我们就可以在页面中执行数字的加减了。注意到，当点击加时，会加2个数，是因为执行加的时候，是加上了<code>action.text</code>，参考代码。</p><p>好了，redux的基本使用就这些了，一些更高级的用法以后再说。（其实看我懒不懒了~）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在网上看过不少资料文档后，确认redux基础概念并不是想象中的难，为啥这么说呢，因为在我还没接触react时就到处听人说redux很难，所以我一直以为它很难上手。但在实际接触后，发现基本的概念并不难，甚至比当初刚接触vuex时更简单。当然了，难的我也还没接触到，现在只说最基
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="Redux" scheme="http://yoursite.com/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>react路由</title>
    <link href="http://yoursite.com/2018/06/14/react06/"/>
    <id>http://yoursite.com/2018/06/14/react06/</id>
    <published>2018-06-14T14:27:52.000Z</published>
    <updated>2018-06-18T08:06:28.617Z</updated>
    
    <content type="html"><![CDATA[<p>react与vue一样，做SPA就要用到路由功能。我们做WEB端路由，需要用到的是<code>react-router-dom</code>这个库，它帮助我们实现react路由功能。另外，为了方便起见，代码演示使用react脚手架<code>create-react-app</code>。关于脚手架的使用可自己搜索。废话不多说，直接撸~</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>首先我修改下脚手架，将<code>/src/index.js</code>入口文件清空，用来写我们的演示代码，将<code>/public/index.html</code>模板文件删掉不必要的干扰代码，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;theme-color&quot; content=&quot;#000000&quot;&gt;</span><br><span class="line">    &lt;title&gt;React App&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>切换到index.js文件，首先引入我们需要的模块：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import ReactDOM from &apos;react-dom&apos;;</span><br><span class="line">import &#123;BrowserRouter as Router, Route, Link&#125; from &apos;react-router-dom&apos;</span><br></pre></td></tr></table></figure></p><p>前两个不必多说了，而第三个就是我们要用到的路由库，在引入前别忘记下载了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save react-router-dom</span><br></pre></td></tr></table></figure></p><p>我们在<code>react-router-dom</code>中引入了三个东西，其中，Router是容器，它里面就包含了我们的路由内容，Route是定义真正路由组件的，而Link就是定义切换链接的，类似vue中的<code>router-link</code>，简单使用如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// 首页组件</span><br><span class="line">const Home = () =&gt; (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;这是首页&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 用户页组件</span><br><span class="line">const User = () =&gt; (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;这是用户页&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line"></span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">              &lt;li&gt;&lt;Link to=&quot;/home&quot;&gt;首页&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">              &lt;li&gt;&lt;Link to=&quot;/user&quot;&gt;用户页&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">          &lt;Route path=&quot;/home&quot; component=&#123;Home&#125;&gt;&lt;/Route&gt;</span><br><span class="line">          &lt;Route path=&quot;/user&quot; component=&#123;User&#125;&gt;&lt;/Route&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;/Router&gt;, document.getElementById(&apos;root&apos;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>代码中也可以看到，<code>Router</code>起到容器作用，其本身也是一个组件，需要注意的是，Router下只能有一个根元素，这里即<code>div</code>。先看<code>Link</code>，它有一<code>to</code>属性，很明显代表的是要链接的地址，再看<code>Route</code>，它的<code>path</code>属性表明路由的路径，与<code>Link</code>的<code>to</code>属性值要对应起来，而component属性指出当前路径所对应的界面（其本质就是对应到一个组件，当链接到当前路径后，展示组件内容）。</p><p>怎么样，react路由是不是很简单？其实刚接触时，我有点不习惯这种写法，毕竟受vue影响大了，哈哈~不过当我再写一遍时，我觉得react的路由上手更简单点，至少很直观 ，也许当初我先学react的话，会对vue的路由更不习惯。</p><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>如果说当初刚学vue路由时，我可能不知道怎么定义嵌套路由，但是现在初学react路由时，我自己按着想法，却也把嵌套路由搞出来了，一切也是因为它很直观。因为react路由也是组件形式，那么我在父路由组件里，再写一个子路由不就行了嘛，形式都是一样的，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// xiaoming</span><br><span class="line">const Xiaoming = () =&gt; (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        我是小明</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// xiaohong</span><br><span class="line">const Xiaohong = () =&gt; (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        我是小红</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 用户页组件</span><br><span class="line">const User = () =&gt; (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;这是用户页&lt;/h1&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;Router&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                  &lt;li&gt;&lt;Link to=&quot;/user/xiaoming&quot;&gt;小明&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">                  &lt;li&gt;&lt;Link to=&quot;/user/xiaohong&quot;&gt;小红&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">                &lt;Route path=&quot;/user/xiaoming&quot; component=&#123;Xiaoming&#125;&gt;&lt;/Route&gt;</span><br><span class="line">                &lt;Route path=&quot;/user/xiaohong&quot; component=&#123;Xiaohong&#125;&gt;&lt;/Route&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/Router&gt; </span><br><span class="line">          </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>如上，我在<code>/user</code>路由组件里，再写了两个子路由，形式和父路由完全一样，这样就完成了嵌套路由的实现，同理也可继续嵌套下去。而嵌套路由在vue里的实现是配置children，很明显刚学时，我肯定是不知道是要配置children的。不过用这么久vue了，我还是很喜欢vue这个框架的，也习惯了它的设计思想，而react让我看到了不同的设计思想。我相信存在即合理，这两种模式我都喜欢，哈哈又扯多了。</p><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p>react的动态路由匹配与vue的基本类似，也是以冒号开头加参数。我们将上述例子中的<code>user</code>子路由修改下，我们不明确指向是<code>xiaoming</code>还是<code>xiaohong</code>，而是使用动态路由来自动识别，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const Person = () =&gt; (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        // ....</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">&lt;Route path=&quot;/user/:name&quot; component=&#123;Person&#125; &gt;&lt;/Route&gt;</span><br></pre></td></tr></table></figure></p><p>现在，我要求输入不同的name时，浏览器会显示不同的内容。其实关键就是<code>Person</code>组件该怎么写了，再进一步就是怎么拿到name的值了，这时候我们也会想到react应该会替我们做好这些的。其实，name参数值会被传入到Person组件里，存在props里，而函数定义的组件中，props是以参数形式传进去的。我们可以打印props就会知道name值存在<code>props.match.params</code>中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const Person = (props) =&gt; (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &#123;props.match.params.name&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>知道了怎么获得动态参数，我们就把这个例子完善好：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">const Person = (props) =&gt; &#123;</span><br><span class="line">    if(props.match.params.name === &apos;xiaoming&apos;)&#123;</span><br><span class="line">        var a = &apos;我是小明&apos;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        var a = &apos;我是小红&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;&#123;a&#125;&lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">// 用户页组件</span><br><span class="line">const User = () =&gt; (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;这是用户页&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Router&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                  &lt;li&gt;&lt;Link to=&quot;/user/xiaoming&quot;&gt;小明&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">                  &lt;li&gt;&lt;Link to=&quot;/user/xiaohong&quot;&gt;小红&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">                &lt;Route path=&quot;/user/:name&quot; component=&#123;Person&#125; &gt;&lt;/Route&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/Router&gt; </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>上述代码的功能与之前写的一样，只是用动态路由来实现的。当然我这种写法是很 low的，实际开发中应该不会这么写，我只是把过程讲出来，方便理解。</p><p>react路由就先讲这么多了，我也实在讲不出花来~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;react与vue一样，做SPA就要用到路由功能。我们做WEB端路由，需要用到的是&lt;code&gt;react-router-dom&lt;/code&gt;这个库，它帮助我们实现react路由功能。另外，为了方便起见，代码演示使用react脚手架&lt;code&gt;create-react-app
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React React-Router" scheme="http://yoursite.com/tags/React-React-Router/"/>
    
  </entry>
  
  <entry>
    <title>react组件设置样式</title>
    <link href="http://yoursite.com/2018/06/03/react05/"/>
    <id>http://yoursite.com/2018/06/03/react05/</id>
    <published>2018-06-03T11:42:21.000Z</published>
    <updated>2018-06-03T11:43:52.147Z</updated>
    
    <content type="html"><![CDATA[<p>本篇主要介绍给组件设置样式时，准确说是给JSX里的标签设置样式时要注意的地方。</p><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><p>当要给组件添加class时，不能直接写成class，应该写成className:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Demo extends React.Component&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return &lt;div className=&apos;div1&apos;&gt;&lt;/div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这主要因为class是JavaScript的保留字。而且JSX 的特性更接近 JavaScript 而不是 HTML , 所以 React DOM 使用 camelCase 小驼峰命名来定义属性的名称，而不是使用 HTML 的属性名称。</p><h2 id="style"><a href="#style" class="headerlink" title="style"></a>style</h2><p>除了通过添加class来设置样式外，我们也可以使用style内联样式。只不过这跟以往写的有些不同，你需要将样式内容用双花括号包起来，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Demo extends React.Component&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return &lt;div style=&#123;&#123;color:&apos;white&apos;,fontSize:&apos;16px&apos;&#125;&#125;&gt;&lt;/div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这跟vue里的mustache语法很像，也是双大括号，但是这里应该理解为一层花括号里包含一个对象，react将这个对象渲染为内联样式。另外你需要注意的是，遇到<code>font-size</code>这种的要写成小驼峰命名形式，不然会出错。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇主要介绍给组件设置样式时，准确说是给JSX里的标签设置样式时要注意的地方。&lt;/p&gt;
&lt;h2 id=&quot;class&quot;&gt;&lt;a href=&quot;#class&quot; class=&quot;headerlink&quot; title=&quot;class&quot;&gt;&lt;/a&gt;class&lt;/h2&gt;&lt;p&gt;当要给组件添加clas
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>react组件通信</title>
    <link href="http://yoursite.com/2018/06/01/react04/"/>
    <id>http://yoursite.com/2018/06/01/react04/</id>
    <published>2018-06-01T10:22:38.000Z</published>
    <updated>2018-06-01T10:27:07.563Z</updated>
    
    <content type="html"><![CDATA[<p>说到组件，那就不能不说组件通信。个人觉得相对于vue，react的通信比较容易理解。</p><h2 id="父组件向子组件通信"><a href="#父组件向子组件通信" class="headerlink" title="父组件向子组件通信"></a>父组件向子组件通信</h2><p>react是单向数据流，数据主要从父节点传递到子节点（通过props）。这种传递方式也是比较简单：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">class Son extends React.Component&#123;</span><br><span class="line">          render()&#123;</span><br><span class="line">              return &lt;div&gt;&#123;this.props.title&#125;&lt;/div&gt;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">// 父组件</span><br><span class="line">class Parent extends React.Component&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">      return &lt;Son title=&quot;我是父组件传给子组件的值&quot;/&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Parent/&gt;,app)</span><br></pre></td></tr></table></figure></p><h2 id="子组件向父组件通信"><a href="#子组件向父组件通信" class="headerlink" title="子组件向父组件通信"></a>子组件向父组件通信</h2><p>因为react是单向数据流，数据只能有父组件传递到子组件，所以要想从子组件更新父组件，需要一个取巧的方法，那就是利用回调函数，简单概述就是：<strong>父组件通过props传递一个回调函数到子组件中，这个回调函数可以更新父组件，子组件就是通过触发这个回调函数，从而使父组件得到更新</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">    class Son extends React.Component&#123;</span><br><span class="line">        render()&#123;</span><br><span class="line">            return &lt;button onClick=&#123;this.props.handleChange&#125;&gt;点我可以改变父组件的状态值&lt;/button&gt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   // 父组件</span><br><span class="line">    class Parent extends React.Component&#123;</span><br><span class="line">        constructor()&#123;</span><br><span class="line">            super()</span><br><span class="line">            this.state=&#123;</span><br><span class="line">                val:0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        change()&#123;</span><br><span class="line">          let newVal = this.state.val + 1</span><br><span class="line">          this.setState(&#123;</span><br><span class="line">              val:newVal</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            return &lt;div&gt;</span><br><span class="line">                     &lt;Son handleChange=&#123;this.change.bind(this)&#125;/&gt;</span><br><span class="line">                     &lt;p&gt;&#123;this.state.val&#125;&lt;/p&gt;</span><br><span class="line">                   &lt;/div&gt;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这次，父组件通过props传一个回调函数给子组件，子组件通过触发这个回调函数来更新父组件的状态。</p><p>除了这两种最普遍的通信外，还有其他情况的通信，比如兄弟组件等，这里先不说了，准备等我遇到了再说。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;说到组件，那就不能不说组件通信。个人觉得相对于vue，react的通信比较容易理解。&lt;/p&gt;
&lt;h2 id=&quot;父组件向子组件通信&quot;&gt;&lt;a href=&quot;#父组件向子组件通信&quot; class=&quot;headerlink&quot; title=&quot;父组件向子组件通信&quot;&gt;&lt;/a&gt;父组件向子组件通信
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>react事件</title>
    <link href="http://yoursite.com/2018/05/30/react03/"/>
    <id>http://yoursite.com/2018/05/30/react03/</id>
    <published>2018-05-30T14:25:35.000Z</published>
    <updated>2018-05-30T14:35:41.541Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>React 元素的事件处理和 DOM元素很相似，主要有两点不同：</p><ul><li>React事件绑定属性的命名采用驼峰式写法，而不是小写</li><li>如果采用 JSX 的语法你需要传入一个函数作为事件处理函数，而不是一个字符串(DOM元素的写法)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//DOM元素</span><br><span class="line">&lt;button onclick=&quot;test()&quot;&gt;&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//react</span><br><span class="line">&lt;button onClick=&#123;test&#125;&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>写个小例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Demo extends React.Component&#123;</span><br><span class="line"></span><br><span class="line">         show()&#123;</span><br><span class="line">             alert(&apos;hello&apos;)</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">          render()&#123;</span><br><span class="line">              return &lt;button onClick=&#123;this.show&#125;&gt;点击&lt;/button&gt;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Demo/&gt;,app)</span><br></pre></td></tr></table></figure></p><p>上例中，当点击按钮时，调用 show函数，注意要用this调用，this指向组件本身。关于this，来单独说下。</p><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>我们来改变一下上面的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Demo extends React.Component&#123;</span><br><span class="line">       constructor()&#123;</span><br><span class="line">           super()</span><br><span class="line">           this.state = &#123;</span><br><span class="line">               val:0</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">        show()&#123;</span><br><span class="line">            this.setState(&#123;</span><br><span class="line">                val:this.state.val+1</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">         render()&#123;</span><br><span class="line">             return &lt;div&gt;</span><br><span class="line">                      &lt;button onClick=&#123;this.show&#125;&gt;点击&lt;/button&gt;</span><br><span class="line">                      &lt;p&gt;&#123;this.state.val&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>此例中，我们为组件添加状态，并显示在页面中，当点击按钮时，状态的数值加1。不过运行的结果可能不会如意，报一个错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...Cannot read property &apos;setState&apos; of undefined</span><br></pre></td></tr></table></figure></p><p>提示setState未定义，为了验证，我们在show函数里打印一下this，结果显示时 undefined。到这里，其实我开始也是比较迷惑的，函数里的this指向undefined还是第一次见。</p><p>在查看文档后才知道，原来在react里，类的方法默认是不会绑定 this 的，也就是说我们必须手动绑定this。绑定到哪？我们的一切操作都是基于这个组件的，所以应该绑定到当前类上。怎么绑定？直接在JSX 回调函数上绑定，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;this.show.bind(this)&#125;&gt;点击&lt;/button&gt;</span><br></pre></td></tr></table></figure></p><p>这里的this还是指向当前类的，只是类的方法不会默认绑定this而已。</p><h2 id="默认行为和事件冒泡"><a href="#默认行为和事件冒泡" class="headerlink" title="默认行为和事件冒泡"></a>默认行为和事件冒泡</h2><p>说到事件，就不得不说默认行为和事件冒泡，因这两点在react里也有些不同。</p><h3 id="取消默认行为"><a href="#取消默认行为" class="headerlink" title="取消默认行为"></a>取消默认行为</h3><p>在react里，必须明确的使用 preventDefault来取消默认行为，像<code>return false</code>是没用的。</p><p>写个例子，阻止a标签的跳转：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">handleClick(e)&#123;</span><br><span class="line">        e.preventDefault()</span><br><span class="line">        console.log(&apos;hello&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line">  return &lt;a href=&quot;https://www.baidu.com&quot; onClick=&#123;this.handleClick&#125;&gt;点击&lt;/a&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p>在react里，使用e.stopPropagation()阻止事件冒泡可能会没效，因为这里的冒泡分为三种情况，情况不同方法也不同，在这里我找到一篇文章，说的很详细，我就不多啰嗦了，其实是偷懒，哈哈~<br><a href="https://zhuanlan.zhihu.com/p/26742034" target="_blank" rel="noopener">传送门</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;事件处理&quot;&gt;&lt;a href=&quot;#事件处理&quot; class=&quot;headerlink&quot; title=&quot;事件处理&quot;&gt;&lt;/a&gt;事件处理&lt;/h2&gt;&lt;p&gt;React 元素的事件处理和 DOM元素很相似，主要有两点不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;React事件绑定属性的命名采用
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>react组件</title>
    <link href="http://yoursite.com/2018/05/29/react02/"/>
    <id>http://yoursite.com/2018/05/29/react02/</id>
    <published>2018-05-29T05:02:58.000Z</published>
    <updated>2018-05-30T02:05:16.311Z</updated>
    
    <content type="html"><![CDATA[<p>学习react应该就是学习它的组件化开发了，看看它和vue的组件相比有何不同？</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>react组件有两种，分别是函数定义和类定义。</p><h3 id="函数定义组件"><a href="#函数定义组件" class="headerlink" title="函数定义组件"></a>函数定义组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function Demo()&#123;</span><br><span class="line">    return &lt;h1&gt;hello world&lt;/h1&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码就创建了一个有效的组件，它是用函数返回了一个React元素，这种类型的组件为函数定义组件，我们可以正常使用它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">   &lt;Demo/&gt;,</span><br><span class="line">   app</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>记住ReactDOM.render()的第一个参数是要渲染的内容，组件不就是要展示的内容吗？只是组件的使用应写成标签形式，这点应该很熟悉，跟vue的一样。</p><p>这里有一个特别需要注意的地方，那就是<strong>组件名称必须以大写字母开头</strong>，不然无法渲染。</p><p>看到上面的代码，不知道你会不会有一种想法，一种下意识的想法，看代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function Demo()&#123;</span><br><span class="line">    return &lt;h1&gt;hello world&lt;/h1&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(Demo(),app)</span><br></pre></td></tr></table></figure></p><p>看到了吗？我不把Demo写成标签形式，而是直接调用了，结果依然正确渲染了。细想下，这本该如此啊，因为函数返回的是JSX啊，这与直接写JSX并没有本事区别。此时，你要是把函数名写成小写也不会有影响了，因为它已经不是一个组件了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function demo()&#123;</span><br><span class="line">    return &lt;h1&gt;hello world&lt;/h1&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(demo(),app)</span><br></pre></td></tr></table></figure></p><h3 id="类定义组件"><a href="#类定义组件" class="headerlink" title="类定义组件"></a>类定义组件</h3><p>相对于函数定义组件，类定义组件才是最常用的，因为它允许我们更多的扩展。</p><p>类定义组件，其实就是es6中定义类的方法，只是react加入了一些东西：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Demo extends React.Component&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return &lt;h1&gt;hello world&lt;/h1&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Demo/&gt;,app)</span><br></pre></td></tr></table></figure></p><p>上面就是类定义组件，熟悉es6的话，应该比较熟悉这种形式，在定义一个组件时，我们必须让它继承React.Component这个类，这样才能使用react的一些功能。</p><p>关于类定义组件，要讲得东西其实还是有几个的，在这之前，我们要了解两个和组件息息相关的概念：属性和状态。</p><h2 id="组件的属性和状态"><a href="#组件的属性和状态" class="headerlink" title="组件的属性和状态"></a>组件的属性和状态</h2><p>组件有属性和状态，分别表示为props和state，它们的区别：</p><ul><li>属性是由父组件传递给子组件的</li><li>状态是子组件内部维护的数据，当状态发生变化的同时，组件也会进行更新。当状态发生转换时会触发不同的钩子函数，从而让开发者有机会做出相应</li></ul><h3 id="属性（props）"><a href="#属性（props）" class="headerlink" title="属性（props）"></a>属性（props）</h3><p>属性是写在父组件上的，可以传递给子组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function Demo(props)&#123;</span><br><span class="line">    return &lt;h1&gt;&#123;props.msg&#125;&lt;/h1&gt;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(&lt;Demo msg=&apos;hello world&apos;/&gt;,app)</span><br></pre></td></tr></table></figure></p><p>上面是函数定义组件的属性传递写法，Demo函数接收一个单一的“props”对象，这里包含了所有的父组件的属性，我们多写几个属性，打印props看看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function Demo(props)&#123;</span><br><span class="line">   console.log(props)</span><br><span class="line">    return &lt;h1&gt;&#123;props.msg&#125;&lt;/h1&gt;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(&lt;Demo msg=&apos;hello world&apos; name=&apos;wj&apos; age=&apos;18&apos;/&gt;,app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//props打印结果</span><br><span class="line">&#123;</span><br><span class="line">age:&quot;18&quot;,</span><br><span class="line">msg:&quot;hello world&quot;,</span><br><span class="line">name:&quot;wj&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要注意的是，在react里要输出数据到模板里，用一个花括号即可，在vue里是两个花括号。</p><p>属性不仅仅可以是字符串，还可以是js的表达式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const num = 5</span><br><span class="line">ReactDOM.render(&lt;Demo msg=&#123;num&gt;3?&apos;大于3&apos;:&apos;小于3&apos;&#125; name=&apos;wj&apos; age=&apos;18&apos;/&gt;,app)</span><br></pre></td></tr></table></figure></p><p>这里就不多说了，react相对于vue，做了更少的限制，大胆去尝试吧，很多你觉得可以的，在react确实可以做到。</p><p>再来看看在类定义组件里使用props：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Demo extends React.Component&#123;</span><br><span class="line">      render()&#123;</span><br><span class="line">          return &lt;h1&gt;&#123;this.props.msg&#125;&lt;/h1&gt;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Demo msg=&apos;hello world&apos; /&gt;,app)</span><br></pre></td></tr></table></figure></p><p>这里使用props的唯一区别就是要使用this来调用，其他跟函数定义组件一样。</p><p>props有一个限制，那就是它的只读性，无论是使用函数或是类来声明一个组件，它决不能修改它自己的props。如果需要改变props值来更新视图显然是不行的。这就需要state状态。</p><h3 id="状态（state）"><a href="#状态（state）" class="headerlink" title="状态（state）"></a>状态（state）</h3><p>状态适用于类定义的组件，状态是私有的，完全受控于当前组件。我们需要使用状态，则需要定义类组件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Demo extends React.Component&#123;</span><br><span class="line">      constructor()&#123;</span><br><span class="line">        super()</span><br><span class="line">        this.state=&#123;</span><br><span class="line">            msg:&apos;hello world&apos;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;       // 注意这里不要写逗号，详见es6之class</span><br><span class="line">      render()&#123;</span><br><span class="line">          return &lt;div&gt;&#123;this.state.msg&#125;&lt;/div&gt;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Demo/&gt;,app)</span><br></pre></td></tr></table></figure></p><p>上面代码添加了状态，在这里你可能需要知道一些es6的class知识，推荐阮一峰老师的es6教程。我们知道Demo类式继承React.Component这个类的，算子类，它必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类自己的this对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用super方法，子类就得不到this对象。</p><p>在this对象上添加状态state，这个状态是属于Demo私有的，使用this.state.xxx的方式调用。</p><p>状态受控于当前组件，是可以改变的，这里我们来改变下状态，注意这里会使用到事件，以后会详细介绍react事件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">change()&#123;</span><br><span class="line">  this.state.msg = &apos;改变了&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line">  return &lt;div&gt;</span><br><span class="line">           &lt;input type=&apos;button&apos; value=&apos;改变&apos; onClick=&#123;this.change.bind(this)&#125; /&gt;&lt;br/&gt;</span><br><span class="line">           &lt;p&gt;&#123;this.state.msg&#125;&lt;/p&gt;</span><br><span class="line">         &lt;/div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面代码中，当我们点击按钮时，state数据会改变，同时视图也会更新。但是当你运行后，会发现视图并不会更新。原因在哪里？</p><p>其实问题就出在了this.state上，我们不能直接使用this.state来变更状态，这样不会重新渲染组件，我们需要使用setState()方法来更新状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">change()&#123;</span><br><span class="line">   //this.state.msg = &apos;改变了&apos;</span><br><span class="line">   </span><br><span class="line">   this.setState(&#123;</span><br><span class="line">       msg:&apos;改变了&apos;</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样，当状态更新后，组件才会重新渲染。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我也不知道怎么总结了，很多细节我也没说到，这算是自己的一个回顾吧。与vue相比，react似乎限制地更少，这也意味着我们可以更灵活地组织我们的代码。学习过程中应该大胆尝试，你想到的，react作者们可能也想到了。另外在vue里，组件不是必须的，更多的关注点是在数据层上，但在react里，组件是不可缺少的，一切开发都是基于组件的（至少现在我是这么觉得），这也反映了两大框架的不同思想吧，不管如何，多学学总不会差。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学习react应该就是学习它的组件化开发了，看看它和vue的组件相比有何不同？&lt;/p&gt;
&lt;h2 id=&quot;组件&quot;&gt;&lt;a href=&quot;#组件&quot; class=&quot;headerlink&quot; title=&quot;组件&quot;&gt;&lt;/a&gt;组件&lt;/h2&gt;&lt;p&gt;react组件有两种，分别是函数定义和类定义。
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>react初体验</title>
    <link href="http://yoursite.com/2018/05/28/react01/"/>
    <id>http://yoursite.com/2018/05/28/react01/</id>
    <published>2018-05-28T12:34:52.000Z</published>
    <updated>2018-05-30T02:05:03.946Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在我的日常开发中，我用的只有vue，对于大名鼎鼎的react和angular，我一点都不了解。想当初开始学框架时，纠结许久，无非是react更具挑战性，学会了再学vue更容易，而vue简单易上手且功能也不输react。当然这些都是从度娘听说的。</p><p>使用vue许久，感觉还是很爽的，虽然开始时有点困难，毕竟那时es6也不熟悉。我不止一次庆幸我学的是vue，不仅是因为它易学易用，关键是它的生态也越来越好，国内很多新东西出来，都是先基于vue的，比如现在很火的mpvue小程序框架，就是基于vue的，这使得我学会一个vue就可以容易地做很多事。</p><p>之所以有庆幸学的是vue的心态，可能也是因为不了解其他两大框架，先入为主地觉得vue才是王道。我不知道其他两个框架是否很难入手，是否更加强大，但是vue已经能够解决我的日常开发了，我本来也不想去接触react和angular的，可能觉得舍易求难是浪费时间。不过另一方面，我又很好奇，它们真的那么难吗？和vue比到底有什么区别？思来想去，我觉得还是直接试水比较好，不就是一个框架吗？想学就学咯！于是，我选择了react，因为angula似乎真的难点！</p><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><p>当初学vue时，我只要引入一个文件vue.js就好了，学react，我竟然要引入三个文件，天啊，我第一想法就是这个好复杂啊。</p><ul><li>react.js：实现React核心逻辑，且于具体的渲染引擎无关，从而可以跨平台公用。</li><li>react-dom.js：包含了具体的DOM渲染更新逻辑，以及服务端渲染的逻辑，与浏览器相关。</li><li>browser.js：支持JSX语法必须。</li></ul><p>在这里，我用的react是15.6.2版本，听说稳定点，browser.js是5.8.38版本，莫名不敢用新的，哈哈~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script src=&quot;./common/react.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;./common/react-dom.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;./common/browser.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">          ReactDOM.render(</span><br><span class="line">              &lt;h1&gt;hello world&lt;/h1&gt;,</span><br><span class="line">              document.getElementById(&apos;app&apos;)</span><br><span class="line">          )</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：script标签的type属性应写成text/babel，不然识别不了react语法</p></blockquote><p>上面代码是截取body部分，此时已经可以在浏览器里输出hello world了。虽然这段代码看起来很简单，但是我开始写时，我是恐慌的，因为ReactDOM.render()看起来很复杂的样子，为啥不是vue那样，直接两个花括号写到html里呢，那样多简单。</p><p>确实很容易受vue影响，对于这种方法有点接受不了，但这其实并不复杂。ReactDOM.render()的第一参数很明显就是我们要输出到浏览器的内容，那么第二个参数其实是要输出到的位置。</p><p>当我们明白两个参数的意义时，可能觉得懂了，其实不然。这里面可是有一个核心的东西，那就是JSX。在我还没接触JSX，总是听别人说JSX时，我觉得它可能是一个很复杂的语法。但当我接触后才知道，这货很“纯”，是一个奇怪的变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var ele = &lt;h1&gt;hello world&lt;/h1&gt;</span><br></pre></td></tr></table></figure></p><p>这种看起来可能有些奇怪的标签语法既不是字符串也不是 HTML，它就是JSX。那么不禁想问，它到底是什么数据类型？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(typeof ele)</span><br><span class="line"></span><br><span class="line">//object</span><br></pre></td></tr></table></figure></p><p>显然，它是一个对象，这么看的话，JavaScript是在内部给它处理了。事实也确实如此：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">    React.createElement(&apos;h1&apos;,null,&apos;hello world&apos;),</span><br><span class="line">    document.getElementById(&apos;app&apos;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;h1&gt;hello world&lt;/h1&gt;,</span><br><span class="line">    document.getElementById(&apos;app&apos;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>上面两种方法结果完全相同。React.createElement()的第一个参数是标签，第二个参数是标签属性，第三个参数是标签内容。很显然这样写比较繁琐，且不直观。所以我们应该直接使用JSX语法，这也是官方建议的。</p><p>其实我们直接写JSX语法，Babel 转译器也会把 JSX 转换成为 React.createElement() 方法的调用，而这个方法会返回一个对象，类似这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  type: &apos;h1&apos;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    children: &apos;Hello, world&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样的对象被称为 “React 元素”。它代表所有你在屏幕上看到的东西。React 通过读取这些对象来构建 DOM 并保持数据内容一致。</p><p>关于JSX还有两点需要注意：    </p><ol><li><p>当有多个标签时，在最外层需加上一个包裹标签，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const ele = &lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>JSX允许自由分段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const ele = &lt;div&gt;</span><br><span class="line">              &lt;span&gt;&lt;/span&gt;</span><br><span class="line">              &lt;p&gt;&lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在react里使用ReactDOM.render()来向页面渲染内容，它有两个参数，第一个参数是渲染内容，第二个参数是渲染位置。</p><p>JSX是JavaScript的一种扩展语法，让一个变量直接赋值为标签。它与React.createElement()方法调用的结果是一样的，返回一个对象，叫做“React元素”。react推荐使用JSX语法。</p><p>啰嗦一大堆，其实是表达自己的心情，初见react让我觉得复杂不好用，但是越接触越发现它是有它独特的魅力的。不管哪一个框架，我们都没资格去评定好不好，只有适不适合自己。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在我的日常开发中，我用的只有vue，对于大名鼎鼎的react和angular，我一点都不了解。想当初开始学框架时，纠结许久，无非是react
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>koa初体验</title>
    <link href="http://yoursite.com/2018/05/23/koa/"/>
    <id>http://yoursite.com/2018/05/23/koa/</id>
    <published>2018-05-23T08:08:58.000Z</published>
    <updated>2018-05-23T08:20:25.190Z</updated>
    
    <content type="html"><![CDATA[<p>出于对koa的好奇，于是想要了解下。</p><blockquote><p>koa 是由 Express 原班人马打造的，致力于成为一个更小、更富有表现力、更健壮的 Web 框架。 </p></blockquote><p>如果说koa是下一代web开发框架，那么上一代毫无疑问就是express了，其实用哪个都无所谓啦，只要自己用的顺手就好。反正我哪个都用不到，至少目前是的，哈哈。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>新建一个文件夹koaDemo，其内执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br><span class="line"></span><br><span class="line">npm install koa</span><br></pre></td></tr></table></figure></p><p>我们讨论的是koa2。而koa默认安装的就是2的版本，所以无需指定为koa2。</p><p>用koa来输出“hello world”，新建一个文件server.js，输入以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const Koa = require(&apos;koa&apos;)</span><br><span class="line">const app = new Koa()</span><br><span class="line"></span><br><span class="line">app.use(async ctx =&gt; &#123;</span><br><span class="line">    ctx.body = &apos;hello world&apos;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(3000)</span><br></pre></td></tr></table></figure></p><p><code>node server.js</code>执行文件，此时打开浏览器，访问：<a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a>，熟悉的hello world就显示出来啦。</p><p>可以看到，koa真的很精简，短短几行就能启动一个服务，虽然这些express都能办到，但是koa肯定也是有它的独到之处的。其中之一就是使用 async+await 处理异步，上面代码中已用到了async，接下来就介绍下async和await。</p><h2 id="async与await"><a href="#async与await" class="headerlink" title="async与await"></a>async与await</h2><p>koa的一大优点就是No Callback，很多人使用koa也是因为这个。没有回调得力于async和await的使用，关于它们的概念我也讲不好，网上有很多文档可以参考，你只需要知道它可以解决回调地狱的问题，使异步操作更优雅。具体怎么个优雅法，我们来慢慢看。</p><h3 id="回调函数处理异步"><a href="#回调函数处理异步" class="headerlink" title="回调函数处理异步"></a>回调函数处理异步</h3><p>在最初的时候，我们使用回调函数来处理异步，来看个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function test() &#123;</span><br><span class="line">    setTimeout(()=&gt;&#123;</span><br><span class="line">        console.log(&apos;执行了&apos;)</span><br><span class="line">    &#125;, 2000)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test()</span><br><span class="line">console.log(&apos;结束&apos;)</span><br><span class="line"></span><br><span class="line">// 执行结果</span><br><span class="line">结束</span><br><span class="line">执行了</span><br></pre></td></tr></table></figure></p><p>上面代码的执行结果显然不符合预期的，所以我们需要借助回调函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function test(fn) &#123;</span><br><span class="line">    setTimeout(()=&gt;&#123;</span><br><span class="line">        console.log(&apos;执行了&apos;)</span><br><span class="line">        fn()</span><br><span class="line">    &#125;, 2000)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(()=&gt;&#123;</span><br><span class="line">    console.log(&apos;结束&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 执行结果</span><br><span class="line">执行了</span><br><span class="line">结束</span><br></pre></td></tr></table></figure></p><p>显然，这才是我们想要的结果，回调虽然看起来很简单，但是当业务逻辑多起来时，容易形成回调地狱，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ajax(()=&gt;&#123;</span><br><span class="line">    ajax(()=&gt;&#123;</span><br><span class="line">        ajax(()=&gt;&#123;</span><br><span class="line">            // ...</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>三层，不能再多了！三层都快受不了了，更别说更复杂的了，当维护这样的代码时，是真的难受。所以后来es6给了一个好的解决方法，那就是promise。</p><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><p>关于promise诞生的前前后后我就不介绍了，因为我也不太熟悉啊，不过它的使用方法我们还是要掌握的，推荐阮一峰老师的es6教程，传送门：<a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">promise</a></p><p>来写一个promise的例子，假设三个异步操作，依次执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">function delay(val)&#123;</span><br><span class="line">    return new Promise((resolve, reject)=&gt;&#123;</span><br><span class="line">        setTimeout(()=&gt;&#123;</span><br><span class="line">            resolve(val)</span><br><span class="line">        &#125;,2000)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">delay(&apos;第一步执行&apos;)</span><br><span class="line"> .then((val)=&gt;&#123;</span><br><span class="line">     console.log(val)</span><br><span class="line">     return delay(&apos;第二步执行&apos;)</span><br><span class="line"> &#125;)</span><br><span class="line"> .then((val)=&gt;&#123;</span><br><span class="line">     console.log(val)</span><br><span class="line">     return delay(&apos;第三步执行&apos;)</span><br><span class="line"> &#125;)</span><br><span class="line"> .then((val)=&gt;&#123;</span><br><span class="line">     console.log(val)</span><br><span class="line"> &#125;)</span><br><span class="line"> </span><br><span class="line"> // 结果</span><br><span class="line">第一步执行</span><br><span class="line">第二步执行</span><br><span class="line">第三步执行</span><br></pre></td></tr></table></figure></p><p>promise的使用，解决了一层层回调嵌套的窘境，这很大程度上解决了回调地狱的问题，清晰的代码结构也容易维护。</p><p>promise很好用，但是代码量还是有点的，如果可以，何不试试async+await呢？</p><h3 id="async-await"><a href="#async-await" class="headerlink" title="async+await"></a>async+await</h3><p>虽然我也想把这两个概念讲的很明白，但是我不能啊，网上有大佬讲的很清楚，在这我就简单说下。</p><p>你需要知道的是，async用来定义一个异步函数，它总会返回异步对象，即promise，而await必须在async内部使用，用来处理异步结果。</p><p>说不如做，就拿上面的例子来试下async的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function delay(val)&#123;</span><br><span class="line">    return new Promise((resolve, reject)=&gt;&#123;</span><br><span class="line">        setTimeout(()=&gt;&#123;</span><br><span class="line">            resolve(val)</span><br><span class="line">        &#125;,2000)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function start()&#123; </span><br><span class="line">  let result1 = await delay(&apos;第一次执行&apos;)</span><br><span class="line">  console.log(result1)</span><br><span class="line"></span><br><span class="line">  let result2 = await delay(&apos;第二次执行&apos;)</span><br><span class="line">  console.log(result2)</span><br><span class="line"></span><br><span class="line">  let result3 = await delay(&apos;第三次执行&apos;)</span><br><span class="line">  console.log(result3)</span><br><span class="line">&#125;</span><br><span class="line">start()</span><br><span class="line"></span><br><span class="line"> // 结果</span><br><span class="line">第一步执行</span><br><span class="line">第二步执行</span><br><span class="line">第三步执行</span><br></pre></td></tr></table></figure></p><p>如上代码，同步的方式写异步，再也看不到回调了，是不是很爽。在koa中，重点使用async+await的方式，所以不懂得童鞋还得加把劲啊。即使不用koa，但这么炫酷的方法你确定不试试？</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>写完后才发现，我不是介绍koa的，反而介绍了async，虽然没讲得明白。麻雀虽小五脏俱全，koa的更多使用，下次再说咯。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;出于对koa的好奇，于是想要了解下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;koa 是由 Express 原班人马打造的，致力于成为一个更小、更富有表现力、更健壮的 Web 框架。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果说koa是下一代web开发框架，那么上一代
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="koa" scheme="http://yoursite.com/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>express中实现文件上传</title>
    <link href="http://yoursite.com/2018/03/19/upload-file/"/>
    <id>http://yoursite.com/2018/03/19/upload-file/</id>
    <published>2018-03-19T14:11:12.000Z</published>
    <updated>2018-03-19T14:14:55.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>之所以要单独说下文件上传，是因为<code>body-parser</code>中间件不支持文件类型获取。我们平时都是用这个中间件去获取post数据，但是如果post过来的是一个文件，那它就不管用了。所以，我们需要新的中间件，那就是<code>multer</code>。</p><h2 id="multer"><a href="#multer" class="headerlink" title="multer"></a>multer</h2><p>Multer 是一个 node.js 中间件，用于处理 multipart/form-data 类型的表单数据，它主要用于上传文件。</p><p>关于它的用法，可以参考文档：<a href="https://www.npmjs.com/package/multer" target="_blank" rel="noopener">multer</a></p><p>注意：Multer 不会处理任何非 multipart/form-data 类型的表单数据。</p><h3 id="什么是-multipart-form-data类型？"><a href="#什么是-multipart-form-data类型？" class="headerlink" title="什么是 multipart/form-data类型？"></a>什么是 multipart/form-data类型？</h3><p>表单标签form上有一个enctype属性，它有三种值：</p><ul><li>application/x-www-form-urlencoded：在发送前编码所有字符（默认）</li><li>multipart/form-data：不对字符编码。在使用包含文件上传控件的表单时，必须使用该值。</li><li>text/plain：空格转换为 “+” 加号，但不对特殊字符编码。</li></ul><h2 id="上传一个文件"><a href="#上传一个文件" class="headerlink" title="上传一个文件"></a>上传一个文件</h2><p>现在就来实现一个文件上传。在这之前，确保你已经安装了<code>express</code>和<code>multer</code>。</p><p>app.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&apos;express&apos;)</span><br><span class="line">const app = express()</span><br><span class="line"></span><br><span class="line">//引入multer</span><br><span class="line">const multer = require(&apos;multer&apos;)</span><br><span class="line"></span><br><span class="line">//注册一个对象，dest里放的是上传的文件存储的位置，可以在当前目录下，建立一个static目录，上传的文件都放在这里</span><br><span class="line">const upload = multer(&#123;dest: &apos;./static/&apos;&#125;)</span><br><span class="line"></span><br><span class="line">//使用中间件，没有挂载路径，应用的每个请求都会执行该中间件。any表示接受一切，具体参考文档。</span><br><span class="line">app.use(upload.any())</span><br><span class="line"></span><br><span class="line">//在req.files中获取文件数据</span><br><span class="line">app.post(&apos;/&apos;,function(req, res)&#123;</span><br><span class="line"></span><br><span class="line">console.log(req.files)</span><br><span class="line"></span><br><span class="line">res.send(&apos;上传成功&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.listen(3000)</span><br></pre></td></tr></table></figure></p><p>现在准备一个表单<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=&quot;http://localhost:3000/&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">选择文件：</span><br><span class="line">&lt;input type=&quot;file&quot; name=&quot;file1&quot;&gt;&lt;br&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>注意：在form里的enctype属性上必须填”multipart/form-data”。</p><p>现在执行app.js文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure></p><p>在浏览器打开表单html文件，并上传一个文件，我上传了一张图片，然后在命令行里可以看到打印的数据，比如我的是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[ &#123; fieldname: &apos;file1&apos;,</span><br><span class="line">    originalname: &apos;html5.jpg&apos;,</span><br><span class="line">    encoding: &apos;7bit&apos;,</span><br><span class="line">    mimetype: &apos;image/jpeg&apos;,</span><br><span class="line">    destination: &apos;./static/&apos;,</span><br><span class="line">    filename: &apos;2047b375bfaa68f984af6ac19e8df455&apos;,</span><br><span class="line">    path: &apos;static\\2047b375bfaa68f984af6ac19e8df455&apos;,</span><br><span class="line">    size: 9029 &#125; ]</span><br></pre></td></tr></table></figure></p><p>可以看到req.files是一个数组，因为可能不止传一个文件，每个文件的信息也很清晰就不多介绍了。</p><p>需要注意的是<code>filename</code>这个属性，它就是上传后的文件名，可以到static目录里去看，它就是这样一个文件名且没有后缀，我们现在打不开它的，如果加上后缀，就可以打开了。我的图片是jpg格式，我在文件名后面加上<code>.jpg</code>就可以正常打开了。</p><p>手动添加后缀名太麻烦了，既然用了node，那我们何不进一步处理，直接拿到有后缀名的文件呢？</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>其实思路很简单，看打印出的文件信息，我们可以从<code>originalname</code>里拿到文件后缀名，又可以在<code>path</code>里拿到文件路径。好了，要做的无非就是拿到后缀名再重命名嘛。使用node中的<code>path</code>和<code>fs</code>模块，很容易实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&apos;express&apos;)</span><br><span class="line">const app = express()</span><br><span class="line">const multer = require(&apos;multer&apos;)</span><br><span class="line"></span><br><span class="line">//引入 path 和 fs</span><br><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const fs = require(&apos;fs&apos;)</span><br><span class="line"></span><br><span class="line">const upload = multer(&#123;dest: &apos;./static/&apos;&#125;)</span><br><span class="line"></span><br><span class="line">app.use(upload.any())</span><br><span class="line"></span><br><span class="line">app.post(&apos;/&apos;,function(req, res)&#123;</span><br><span class="line">console.log(req.files)</span><br><span class="line"></span><br><span class="line">//拿到后缀名</span><br><span class="line">var extname = path.extname(req.files[0].originalname);</span><br><span class="line"></span><br><span class="line">//拼接新的文件路径，文件加上后缀名</span><br><span class="line">var newPath = req.files[0].path + extname;</span><br><span class="line"></span><br><span class="line">//重命名</span><br><span class="line">fs.rename(req.files[0].path, newPath, function(err)&#123;</span><br><span class="line">if(err)&#123;</span><br><span class="line">res.send(&apos;上传失败&apos;)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">res.send(&apos;上传成功&apos;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.listen(3000)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;之所以要单独说下文件上传，是因为&lt;code&gt;body-parser&lt;/code&gt;中间件不支持文件类型获取。我们平时都是用这个中间件去获取po
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="express" scheme="http://yoursite.com/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>target与currentTarget的区别</title>
    <link href="http://yoursite.com/2018/03/10/target_currentTarget/"/>
    <id>http://yoursite.com/2018/03/10/target_currentTarget/</id>
    <published>2018-03-10T10:41:51.000Z</published>
    <updated>2018-03-10T10:44:36.825Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>在事件处理函数的<code>event</code>对象中，有一个<code>target</code>属性，我们都知道它是指事件目标。其实在<code>event</code>中还有一个<code>currentTarget</code>属性，不知道这个属性还好，知道的话可能会弄混与<code>target</code>的区别。    </p><p>先看下定义（参考JS高级程序设计）：</p><ul><li>target：事件的目标</li><li>currentTarget：其事件处理程序当前正在处理事件的那个元素</li></ul><p>看完这两个定义，或许还是似懂非懂的感觉，我一直觉得实践是最好的验证方法，所以来写个极其简单的例子吧。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>html文件，写一个简单的列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li&gt;111&lt;/li&gt;</span><br><span class="line">&lt;li&gt;222&lt;/li&gt;</span><br><span class="line">&lt;li&gt;333&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure></p><p>js文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var aUl = document.getElementsByTagName(&apos;ul&apos;)[0];</span><br><span class="line"></span><br><span class="line">aUl.addEventListener(&apos;click&apos;,function(event)&#123;</span><br><span class="line">console.log(this);</span><br><span class="line">console.log(&apos;target: &apos;,event.target);</span><br><span class="line">console.log(&apos;currentTarget: &apos;,event.currentTarget);</span><br><span class="line">&#125;,false)</span><br></pre></td></tr></table></figure></p><p>当看到这个例子，你或许就明白我要说啥了。运行程序，会发现，<code>target</code>指向你所点击的那个<code>li</code>元素，而<code>currentTarget</code>始终指向<code>ul</code>元素。</p><p>所以，我可以用自己的话再来定义一下这两个属性了：</p><ul><li>target：指向触发事件的元素。上例中，是<code>li</code>触发的事件，冒泡到<code>ul</code>上执行的</li><li>currentTarget：指向添加事件的元素。很好懂啊，上例中，事件是绑定在<code>ul</code>上的</li></ul><p>另外需要注意的是，<code>this</code>始终等于<code>currentTarget</code>，在上例中，始终指向<code>ul</code>，不信的话也可以试下啊，我们将事件绑定到第二个<code>li</code>上试试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var aUl = document.getElementsByTagName(&apos;ul&apos;)[0];</span><br><span class="line">var aLi = aUl.getElementsByTagName(&apos;li&apos;)[1];</span><br><span class="line"></span><br><span class="line">aLi.addEventListener(&apos;click&apos;,function(event)&#123;</span><br><span class="line">console.log(this);</span><br><span class="line">console.log(&apos;target: &apos;,event.target);</span><br><span class="line">console.log(&apos;currentTarget: &apos;,event.currentTarget);</span><br><span class="line">&#125;,false)</span><br></pre></td></tr></table></figure></p><p>结果就不用多说了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;在事件处理函数的&lt;code&gt;event&lt;/code&gt;对象中，有一个&lt;code&gt;target&lt;/code&gt;属性，我们都知道它是指事件目标。其实
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>js中对象的属性类型</title>
    <link href="http://yoursite.com/2018/02/20/prop-type/"/>
    <id>http://yoursite.com/2018/02/20/prop-type/</id>
    <published>2018-02-20T08:56:20.000Z</published>
    <updated>2018-02-20T09:03:18.337Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在 javaScript 中，对象的属性分为两种类型：数据属性和访问器属性。</p><h2 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h2><p>它包含的是一个数据值的位置，在这可以对数据值进行读写。数据属性包含 4 个特性：</p><ul><li>configurable：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或能否把属性修改为访问器属性，默认为 true</li><li>enumerable:表示能否通过 for-in 循环返回属性</li><li>writable：表示能否修改属性的值</li><li>value：包含该属性的数据值。默认为 undefined</li></ul><a id="more"></a><h3 id="查看对应属性的特性"><a href="#查看对应属性的特性" class="headerlink" title="查看对应属性的特性"></a>查看对应属性的特性</h3><p>Object.getOwnPropertyDescriptor()函数</p><blockquote><p>Object.getOwnPropertyDescriptor() 方法返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//定义一个对象</span><br><span class="line">var obj = &#123;</span><br><span class="line">    name:&apos;w&apos;,</span><br><span class="line">    age:18</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//查看name属性的特性</span><br><span class="line">console.log(Object.getOwnPropertyDescriptor(obj, &apos;name&apos;))</span><br><span class="line"></span><br><span class="line">//结果</span><br><span class="line">&#123;</span><br><span class="line">configurable:true,</span><br><span class="line">enumerable:true,</span><br><span class="line">value:&quot;w&quot;,</span><br><span class="line">writable:true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改属性特性"><a href="#修改属性特性" class="headerlink" title="修改属性特性"></a>修改属性特性</h3><p>Object.defineProperty()函数</p><blockquote><p>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//修改name属性特性</span><br><span class="line">Object.defineProperty(obj, &apos;name&apos;, &#123;</span><br><span class="line">    configurable: false,</span><br><span class="line">    enumerable: false,</span><br><span class="line">    value: &quot;ww&quot;,</span><br><span class="line">    writable: false</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//查看</span><br><span class="line">console.log(Object.getOwnPropertyDescriptor(obj, &apos;name&apos;))</span><br><span class="line"></span><br><span class="line">//结果</span><br><span class="line">&#123;</span><br><span class="line">configurable: false,</span><br><span class="line">enumerable: false,</span><br><span class="line">value: &quot;ww&quot;,</span><br><span class="line">writable: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h2><p>这个属性不包含数据值，包含的是一对 get 和 set 方法，在读写访问器属性时，就是通过这两个方法来进行操作处理的。它也包含 4 个属性特性：</p><ul><li>configurable：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或能否把属性修改为访问器属性，默认为 false</li><li>enumerable:表示能否通过 for-in 循环返回属性,默认为 false</li><li>get：在读取属性时调用的函数,默认值为 undefined</li><li>set：在写入属性时调用的函数,默认值为 undefined</li></ul><p>注意：访问器属性不能直接定义，要通过 Object.defineProperty()这个方法来定义。</p><p>在上面对象上定义 hello 属性，为访问器属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  name: &apos;w&apos;,</span><br><span class="line">  age: 18</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//定义hello访问器属性</span><br><span class="line">Object.defineProperty(obj, &apos;hello&apos;, &#123;</span><br><span class="line">  get: function () &#123;</span><br><span class="line">    console.log(&apos;get被触发了&apos;)</span><br><span class="line">  &#125;,</span><br><span class="line">  set: function (val) &#123;</span><br><span class="line">    console.log(&apos;set被触发了，参数是：&apos; + val)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//console.log(Object.getOwnPropertyDescriptor(obj, &apos;name&apos;))</span><br><span class="line"></span><br><span class="line">console.log(Object.getOwnPropertyDescriptor(obj, &apos;hello&apos;))</span><br><span class="line"></span><br><span class="line">//结果</span><br><span class="line">&#123;</span><br><span class="line">configurable:false,</span><br><span class="line">enumerable:false,</span><br><span class="line">get:ƒ (),</span><br><span class="line">set:ƒ (val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>检测 get 和 set（在控制台操作更直观）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//赋值</span><br><span class="line">obj.hello = &apos;hi&apos;;</span><br><span class="line">//==&gt; set被触发了，参数是：hi</span><br><span class="line"></span><br><span class="line">//查看</span><br><span class="line">obj.hello</span><br><span class="line">//==&gt; get被触发了</span><br></pre></td></tr></table></figure><p>可知，set 函数的参数既是所赋的值，赋值即传参</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;在 javaScript 中，对象的属性分为两种类型：数据属性和访问器属性。&lt;/p&gt;
&lt;h2 id=&quot;数据属性&quot;&gt;&lt;a href=&quot;#数据属性&quot; class=&quot;headerlink&quot; title=&quot;数据属性&quot;&gt;&lt;/a&gt;数据属性&lt;/h2&gt;&lt;p&gt;它包含的是一个数据值的位置，在这可以对数据值进行读写。数据属性包含 4 个特性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;configurable：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或能否把属性修改为访问器属性，默认为 true&lt;/li&gt;
&lt;li&gt;enumerable:表示能否通过 for-in 循环返回属性&lt;/li&gt;
&lt;li&gt;writable：表示能否修改属性的值&lt;/li&gt;
&lt;li&gt;value：包含该属性的数据值。默认为 undefined&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript严格模式</title>
    <link href="http://yoursite.com/2018/01/13/es-strict/"/>
    <id>http://yoursite.com/2018/01/13/es-strict/</id>
    <published>2018-01-13T11:17:06.000Z</published>
    <updated>2018-01-13T11:23:57.713Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>ECMAscript 5添加了“严格模式”，会使得Javascript在更严格的条件下运行，设立”严格模式”的目的，主要有以下几个：</p><ul><li>消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;</li><li>消除代码运行的一些不安全之处，保证代码运行的安全；</li><li>提高编译器效率，增加运行速度；</li><li>为未来新版本的Javascript做好铺垫。</li></ul><p><strong>说明</strong><br>此文参考了<a href="http://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html" target="_blank" rel="noopener">阮一峰的Javascript 严格模式详解</a>，对于原文中的例子我都一一测试了，有个别测试结果是不一样的，后面已做说明。那些我也是比较迷惑的，如果有错误，希望指出。  <a id="more"></a></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>启用严格模式很简单，只需要一个字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br></pre></td></tr></table></figure></p><p>但是这个字符串的位置不是随意放的，有两种：</p><ul><li>全局严格模式，放在脚本文件的第一行</li><li>局部严格模式，放在函数内第一行（推荐）</li></ul><p>为什么推荐使用在函数内的严格模式呢？<br>因为全局严格模式不利于代码的合并，团队多人开发时，合并代码可能会使别人某些代码失效。      </p><p>所以更好的做法是，借用局部严格模式方法，将整个脚本文件放在一个立即执行的匿名函数之中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(function ()&#123;</span><br><span class="line"></span><br><span class="line">　　&quot;use strict&quot;;</span><br><span class="line">　　// some code here</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p><strong>思考</strong></p><blockquote><p>为什么是一个字符串启用严格模式？是为了兼容老旧的浏览器，一行字符串不会对不兼容严格模式的浏览器产生影响。</p></blockquote><h2 id="改变"><a href="#改变" class="headerlink" title="改变"></a>改变</h2><p>严格模式带来了很多语法的改变。</p><h3 id="变量赋值前必须声明"><a href="#变量赋值前必须声明" class="headerlink" title="变量赋值前必须声明"></a>变量赋值前必须声明</h3><p>通常我们可以直接对一个变量赋值而不需要提前<code>var</code>声明，此时这个变量就是全局变量。严格模式禁止这种用法，全局变量必须显式声明。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;</span><br><span class="line"></span><br><span class="line">a = 2;   //报错</span><br></pre></td></tr></table></figure></p><p>因此，严格模式下，变量都必须先用<code>var</code>命令声明，然后再使用。</p><h3 id="禁止使用with"><a href="#禁止使用with" class="headerlink" title="禁止使用with"></a>禁止使用with</h3><p>正常模式下，我们可以使用<code>with</code>来改变作用域链，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">   num:1</span><br><span class="line">&#125;</span><br><span class="line">function test()&#123;</span><br><span class="line">   var num = 2;</span><br><span class="line">   with(obj)&#123;</span><br><span class="line">    console.log(num);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">test();  //1</span><br></pre></td></tr></table></figure></p><p>但是在严格模式下，禁用了<code>with</code>，报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">test();</span><br><span class="line">//Strict mode code may not include a with statement</span><br></pre></td></tr></table></figure></p><h3 id="创建eval作用域"><a href="#创建eval作用域" class="headerlink" title="创建eval作用域"></a>创建eval作用域</h3><p>正常模式下，Javascript语言有两种变量作用域（scope）：全局作用域和函数作用域。严格模式创设了第三种作用域：eval作用域。</p><p>正常模式下，<code>eval</code>语句的作用域，取决于它处于全局作用域，还是处于函数作用域。严格模式下，<code>eval</code>语句本身就是一个作用域，不再能够生成全局变量了，它所生成的变量只能用于<code>eval</code>内部。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">var x = 5;</span><br><span class="line"></span><br><span class="line">console.log(eval(&apos;var x = 10;console.log(x)&apos;)); //10</span><br><span class="line"></span><br><span class="line">console.log(x);  //5</span><br></pre></td></tr></table></figure></p><h3 id="局部this必须赋值"><a href="#局部this必须赋值" class="headerlink" title="局部this必须赋值"></a>局部this必须赋值</h3><p>正常模式下，函数编译时，内部<code>this</code>指向的是全局window对象，但是严格模式时，<code>this</code>不再指向<code>window</code>，而是<code>undefined</code>。你需要自己手动赋值，赋值是什么，<code>this</code>就是什么。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">console.log(&apos;window: &apos;,this);  //window</span><br><span class="line"></span><br><span class="line">function test()&#123;</span><br><span class="line">    console.log(&apos;test: &apos;,this);  //undefined</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br></pre></td></tr></table></figure></p><p>因此，使用构造函数时，如果忘了加new，this不再指向全局对象，而是报错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function fn()&#123;</span><br><span class="line">　　&quot;use strict&quot;;</span><br><span class="line">　　this.a = 1;</span><br><span class="line">&#125;;</span><br><span class="line">fn(); // 报错</span><br></pre></td></tr></table></figure></p><h3 id="arguments对象的限制"><a href="#arguments对象的限制" class="headerlink" title="arguments对象的限制"></a>arguments对象的限制</h3><p>arguments是函数的参数对象，严格模式对它的使用做了限制。</p><h4 id="不允许对arguments赋值"><a href="#不允许对arguments赋值" class="headerlink" title="不允许对arguments赋值"></a>不允许对arguments赋值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">var arguments = 5;  //报错</span><br><span class="line"></span><br><span class="line">function arguments()&#123;   //报错</span><br><span class="line">    //some code</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="arguments不再追踪参数的变化"><a href="#arguments不再追踪参数的变化" class="headerlink" title="arguments不再追踪参数的变化"></a>arguments不再追踪参数的变化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//正常模式</span><br><span class="line">function test(a)&#123;</span><br><span class="line">    a = 5;</span><br><span class="line">    console.log([a,arguments[0]])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(2);  //[5,5]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//严格模式</span><br><span class="line"></span><br><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">function test(a)&#123;</span><br><span class="line">    a = 5;</span><br><span class="line">    console.log([a,arguments[0]])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(2);  //[5,2]</span><br></pre></td></tr></table></figure><h4 id="禁止使用arguments-callee"><a href="#禁止使用arguments-callee" class="headerlink" title="禁止使用arguments.callee"></a>禁止使用arguments.callee</h4><p>arguments.callee可以返回正被执行的函数对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//正常模式</span><br><span class="line">function test()&#123;</span><br><span class="line">    console.log(arguments.callee);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br><span class="line">// test()&#123;</span><br><span class="line">//    console.log(arguments.callee);</span><br><span class="line">//&#125;</span><br></pre></td></tr></table></figure></p><p>严格模式不允许再使用<code>arguments.callee</code></p><h3 id="禁止使用caller"><a href="#禁止使用caller" class="headerlink" title="禁止使用caller"></a>禁止使用caller</h3><p>正常模式下，可以使用caller返回一个函数对象，这个函数调用了当前函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function test()&#123;</span><br><span class="line">    demo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function demo()&#123;</span><br><span class="line">    console.log(demo.caller);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();  </span><br><span class="line">// test()&#123;</span><br><span class="line">//    demo();</span><br><span class="line">//&#125;</span><br></pre></td></tr></table></figure></p><p>严格模式禁止再使用caller。所以两个长得很像的callee和caller在严格模式下都不能再使用。</p><h3 id="函数必须声明在顶层"><a href="#函数必须声明在顶层" class="headerlink" title="函数必须声明在顶层"></a>函数必须声明在顶层</h3><p>什么意思呢？</p><p>我们都只到es6引入了块级作用域，为了与新版本接轨，严格模式只允许在全局作用域或函数作用域的顶层声明函数。也就是说，不允许在非函数的代码块内声明函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//正常模式</span><br><span class="line"></span><br><span class="line">if(true)&#123;</span><br><span class="line">    function fn()&#123;</span><br><span class="line">        console.log(&apos;fn&apos;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fn();   // fn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn();   // fn</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">if(true)&#123;</span><br><span class="line">    function fn()&#123;</span><br><span class="line">        console.log(&apos;fn&apos;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fn();   // fn</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn();  // 报错  fn is not defined</span><br></pre></td></tr></table></figure><h3 id="重名错误"><a href="#重名错误" class="headerlink" title="重名错误"></a>重名错误</h3><h4 id="对象不能有重名属性"><a href="#对象不能有重名属性" class="headerlink" title="对象不能有重名属性"></a>对象不能有重名属性</h4><p>按照 <a href="http://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html" target="_blank" rel="noopener">阮一峰的文章</a>，在严格模式下，对象是不准有重名属性的，会报错。但实际测试中（谷歌浏览器），严格模式下，对象属性重名并不会报错，而是像正常模式一样，后面的覆盖前面的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">var obj = &#123;</span><br><span class="line">   a:1,</span><br><span class="line">   a:2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(obj.a);  //2</span><br></pre></td></tr></table></figure></p><p>后来了解到，ES6中的严格模式已经允许对象有重名的属性。如果有了解的，可以告诉我下。</p><h4 id="函数不能有重名的参数"><a href="#函数不能有重名的参数" class="headerlink" title="函数不能有重名的参数"></a>函数不能有重名的参数</h4><p>正常模式下，参数重名，后面的覆盖前面的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function test(a,a,b)&#123;</span><br><span class="line">    console.log(a,a,b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(1,2,3); // 2 2 3</span><br></pre></td></tr></table></figure></p><p>但在严格模式下，会报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">function test(a,a,b)&#123;</span><br><span class="line">    console.log(a,a,b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(1,2,3);</span><br><span class="line">// 报错 Duplicate parameter name not allowed in this context</span><br></pre></td></tr></table></figure></p><h3 id="禁止删除变量"><a href="#禁止删除变量" class="headerlink" title="禁止删除变量"></a>禁止删除变量</h3><p>按照 <a href="http://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html" target="_blank" rel="noopener">阮一峰的文章</a>，严格模式下无法删除变量。只有configurable设置为true的对象属性，才能被删除。     </p><p>但是即使在正常模式下，用<code>var</code>声明的变量也是无法删除的，不管是全局声明还是局部声明，不过可以删除对象属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    a:2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">delete obj.a;   //true</span><br><span class="line"></span><br><span class="line">obj //&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>在严格模式下，用<code>var</code>声明的变量也是无法删除的，但对象的属性也是可以删除的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">var obj = &#123;</span><br><span class="line">    a:2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">delete obj.a;   //true</span><br><span class="line"></span><br><span class="line">obj //&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>需要注意的是，在正常模式下，即使变量不可以删除，你也可以写入 <code>delete</code>，不会报错，但是严格模式下，删除不了的变量不可以用<code>delete</code>：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">var a = 2;</span><br><span class="line"></span><br><span class="line">var obj = &#123;</span><br><span class="line">    b:3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">delete a;  //报错，不可删除就不能使用delete</span><br></pre></td></tr></table></figure></p><h3 id="禁止八进制表示法"><a href="#禁止八进制表示法" class="headerlink" title="禁止八进制表示法"></a>禁止八进制表示法</h3><p>正常模式下，整数的第一位如果是0，表示这是八进制数，比如0100等于十进制的64。严格模式禁止这种表示法，整数第一位为0，将报错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line">var num = 0100;</span><br><span class="line">console.log(num);  // 报错</span><br></pre></td></tr></table></figure></p><p>但是es6提供了一种八进制数的新表示法，就是在数值前加上0o（第一个是数字0，第二个是字母o）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line">var num = 0o100;</span><br><span class="line">console.log(num);</span><br></pre></td></tr></table></figure><h3 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h3><p>为了向将来Javascript的新版本过渡，严格模式新增了一些保留字：implements, interface, let, package, private, protected, public, static, yield。</p><p>使用这些词作为变量名将会报错。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;;</span><br><span class="line"></span><br><span class="line">var let;  //报错</span><br></pre></td></tr></table></figure></p><p>说到保留字<code>let</code>，我们知道es6已经加入了<code>let</code>和<code>const</code>，<code>const</code>不管是在正常模式还是严格模式下都不可作为变量名。因为各大浏览器自行增加的<code>const</code>保留字，所以不能作为变量名的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;ECMAscript 5添加了“严格模式”，会使得Javascript在更严格的条件下运行，设立”严格模式”的目的，主要有以下几个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;消除Javascript语法的一些不合理、不严谨之处，减少一些怪异行为;&lt;/li&gt;
&lt;li&gt;消除代码运行的一些不安全之处，保证代码运行的安全；&lt;/li&gt;
&lt;li&gt;提高编译器效率，增加运行速度；&lt;/li&gt;
&lt;li&gt;为未来新版本的Javascript做好铺垫。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;br&gt;此文参考了&lt;a href=&quot;http://www.ruanyifeng.com/blog/2013/01/javascript_strict_mode.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阮一峰的Javascript 严格模式详解&lt;/a&gt;，对于原文中的例子我都一一测试了，有个别测试结果是不一样的，后面已做说明。那些我也是比较迷惑的，如果有错误，希望指出。
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>数组去重（只讲两种方法）</title>
    <link href="http://yoursite.com/2018/01/12/array-unique/"/>
    <id>http://yoursite.com/2018/01/12/array-unique/</id>
    <published>2018-01-12T13:54:47.000Z</published>
    <updated>2018-01-12T13:55:53.305Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>数组去重的方法不少，每个人都有自己喜欢用的方法，我只讲两种我喜欢用的方法。</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Array.prototype.unique = function()&#123;</span><br><span class="line">    var obj = &#123;&#125;;</span><br><span class="line">    var arr = [];</span><br><span class="line">    var len = this.length;</span><br><span class="line"></span><br><span class="line">    for(var i=0;i&lt;len;i++)&#123;</span><br><span class="line">        if(!obj[this[i]])&#123;</span><br><span class="line">            obj[this[i]] = &apos;a&apos;;</span><br><span class="line">            arr.push(this[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return arr;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法利用对象属性不能重复的性质，将数组值遍历到对象的属性上，如果属性名的属性值已存在，则忽略，如果属性值不存在，则添加新属性，并赋值（注意赋的值不能为假），然后将这个属性名push到新数组里，遍历结束，返回新数组。</p><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Array.prototype.unique = function()&#123;</span><br><span class="line">    return Array.from(new Set(this))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ES6 提供了新的数据结构 Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。             </p><p>同时ES6为数组新增了<code>Array.from</code>方法，用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）。</p><p><code>new Set</code>可以将数组转化为Set数据结构，并去重，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">new Set([1,2,3,3])</span><br><span class="line"></span><br><span class="line">//&#123;1, 2, 3&#125;</span><br></pre></td></tr></table></figure></p><p>再用<code>Array.from</code>将Set转回为数组</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;数组去重的方法不少，每个人都有自己喜欢用的方法，我只讲两种我喜欢用的方法。&lt;/p&gt;
&lt;h2 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; 
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>判断数组类型的方法</title>
    <link href="http://yoursite.com/2018/01/11/isarray/"/>
    <id>http://yoursite.com/2018/01/11/isarray/</id>
    <published>2018-01-11T13:36:19.000Z</published>
    <updated>2018-01-11T13:38:06.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>我们都知道js中可以使用<code>typeof</code>来判断数据类型，但是有时它并不很精确，就拿数组来说，判断的结果是<code>object</code>。所以我们需要用其他方法来准确判断到底是不是一个数组。</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>有四个方法，很简单：</p><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><blockquote><p>语法：object instanceof constructor<br>意思是说object的原型链上是否有constructor的prototype，object是检测的对象，constructor是一个构造函数，结果返回布尔值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = [];</span><br><span class="line">arr instanceof Array;    //true</span><br></pre></td></tr></table></figure><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><blockquote><p>语法：object.constructor  返回object的构造函数 </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = [];</span><br><span class="line">arr.constructor == Array;  //true</span><br></pre></td></tr></table></figure><h3 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call()"></a>Object.prototype.toString.call()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = [];</span><br><span class="line">Object.prototype.toString.call(arr);  //&quot;[object Array]&quot;</span><br></pre></td></tr></table></figure><h3 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray()"></a>Array.isArray()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr = [];</span><br><span class="line">Array.isArray(arr);   //true</span><br></pre></td></tr></table></figure><p>此方法可能有兼容问题</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>综合上面提到的方法，写一个比较完善的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function isArrayFn(v)&#123;</span><br><span class="line">    if(Array.isArray)&#123;</span><br><span class="line">        return Array.isArray(v)</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        return Object.prototype.toString.call(v) === &apos;[object Array]&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var arr=[];</span><br><span class="line">console.log(isArrayFn(arr));   //true</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;我们都知道js中可以使用&lt;code&gt;typeof&lt;/code&gt;来判断数据类型，但是有时它并不很精确，就拿数组来说，判断的结果是&lt;code&gt;o
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>构造函数的继承</title>
    <link href="http://yoursite.com/2018/01/10/inherit/"/>
    <id>http://yoursite.com/2018/01/10/inherit/</id>
    <published>2018-01-10T13:34:30.000Z</published>
    <updated>2018-01-10T13:53:28.303Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是继承"><a href="#什么是继承" class="headerlink" title="什么是继承"></a>什么是继承</h2><p> 简单来说，就是一个对象使用另一个对象的属性和方法，并且不要影响原对象的功能。    <a id="more"></a></p><h2 id="构造函数的继承"><a href="#构造函数的继承" class="headerlink" title="构造函数的继承"></a>构造函数的继承</h2><h3 id="属性继承"><a href="#属性继承" class="headerlink" title="属性继承"></a>属性继承</h3><p>一般属性继承是通过call或apply方法，将父对象的构造函数绑定在子对象上     </p><p>有一个父对象：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function Father(hobby, lastName)&#123;</span><br><span class="line">    this.hobby = hobby</span><br><span class="line">    this.lastName = lastName</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有一个子对象需继承父对象的属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function Son(hobby, lastName)&#123;</span><br><span class="line">    Father.call(this,hobby,lastName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">var son = new Son(&apos;reading&apos;,&apos;wang&apos;);</span><br><span class="line">// &#123;hobby: &quot;reading&quot;, lastName: &quot;wang&quot;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="方法继承"><a href="#方法继承" class="headerlink" title="方法继承"></a>方法继承</h3><p>方法的继承是通过原型（prototype）来完成       </p><h4 id="直接继承prototype"><a href="#直接继承prototype" class="headerlink" title="直接继承prototype"></a>直接继承prototype</h4><p>还是上面的例子，我们在<code>Father</code>的原型上添加一个<code>showHobby</code>的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function Father(hobby, lastName)&#123;</span><br><span class="line">    this.hobby = hobby</span><br><span class="line">    this.lastName = lastName</span><br><span class="line">&#125;</span><br><span class="line">//添加</span><br><span class="line">Father.prototype.showHobby = function()&#123;</span><br><span class="line">    alert(this.hobby);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在子对象需要继承这个方法，可以将子对象的原型指向父对象，即：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function Son(hobby, lastName)&#123;</span><br><span class="line">    Father.call(this,hobby,lastName)</span><br><span class="line">&#125;</span><br><span class="line">//添加</span><br><span class="line">Son.prototype = Father.prototype;</span><br></pre></td></tr></table></figure></p><p>此时<code>Son</code>的实例上就有<code>showHobby</code>方法了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var son = new Son(&apos;reading&apos;,&apos;wang&apos;);</span><br><span class="line"></span><br><span class="line">son.showHobby();</span><br><span class="line">//reading</span><br></pre></td></tr></table></figure></p><p>现在虽然实现了方法的继承，但是上面这个方法还是有问题的：      </p><h5 id="第一个问题：constructor的指向问题"><a href="#第一个问题：constructor的指向问题" class="headerlink" title="第一个问题：constructor的指向问题"></a>第一个问题：constructor的指向问题</h5><blockquote><p>constructor是对象的一个属性，指向它的构造函数，每个prototype对象上都有这个属性</p></blockquote><p>按理说，<code>Son</code>的实例，即<code>son</code>，它的构造函数就是<code>Son</code>，然而在这里，它指向了Father：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">son.constructor == Father</span><br></pre></td></tr></table></figure></p><p>出现这样的原因也很明了，因为<code>Son</code>的原型对象指向了<code>Father</code>的原型对象，<code>Father</code>的<code>prototype</code>上的<code>constructor</code>显然是<code>Father</code>。      </p><p>这结果会导致继承链的紊乱，<code>son</code>明明是<code>Son</code>构造的。所以我们需要手动修改<code>constructor</code>指向，即添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Son.prototype.constructor = Son;</span><br></pre></td></tr></table></figure></p><h5 id="第二个问题：任何对Son-prototype的修改都反应到了Father-prototype上"><a href="#第二个问题：任何对Son-prototype的修改都反应到了Father-prototype上" class="headerlink" title="第二个问题：任何对Son.prototype的修改都反应到了Father.prototype上"></a>第二个问题：任何对Son.prototype的修改都反应到了Father.prototype上</h5><p>我们在<code>Son</code>的原型上添加一个<code>name</code>属性：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Son.prototype.name = &apos;John&apos;;</span><br></pre></td></tr></table></figure></p><p>查看<code>Father</code>原型的变化：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Father.prototype</span><br></pre></td></tr></table></figure><p>现在，<code>Father</code>的原型上也有了<code>name</code>属性，且值也为<code>john</code>，而且第一个问题中的在<code>Son</code>原型上修改<code>constructor</code>也会反应到<code>Father</code>上，现在<code>Father</code>实例上的<code>constructor</code>也指向了<code>Son</code>。          </p><p>这下更乱套了，所以为了同时解决这两个问题，有个改进的方法。</p><h4 id="利用空对象做中介"><a href="#利用空对象做中介" class="headerlink" title="利用空对象做中介"></a>利用空对象做中介</h4><p>整个例子完整代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">function Father(hobby, lastName)&#123;</span><br><span class="line">    this.hobby = hobby</span><br><span class="line">    this.lastName = lastName</span><br><span class="line">&#125; </span><br><span class="line">Father.prototype.showHobby = function()&#123;</span><br><span class="line">    alert(this.hobby);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建 Father的实例</span><br><span class="line">var father = new Father(&apos;eating&apos;,&apos;wang&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function Son(hobby, lastName)&#123;</span><br><span class="line">    Father.call(this,hobby,lastName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建中介空对象，并将它的原型指向 Father的原型</span><br><span class="line">var F = function()&#123;&#125;</span><br><span class="line">F.prototype = Father.prototype;</span><br><span class="line">//Son的原型指向为 F的实例</span><br><span class="line">Son.prototype = new F();</span><br><span class="line">//修改 Son的 constructor指向</span><br><span class="line">Son.prototype.constructor = Son;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//Son实例</span><br><span class="line">var son = new Son(&apos;reading&apos;,&apos;wang&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//验证</span><br><span class="line">    console.log(son.constructor);   //Son</span><br><span class="line"></span><br><span class="line">    //Son原型添加 name属性</span><br><span class="line">    Son.prototype.name = &apos;John&apos;;</span><br><span class="line">    console.log(son.name);  //jhon</span><br><span class="line">    console.log(father.name); //undefined</span><br></pre></td></tr></table></figure></p><p>关键部分就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//创建中介空对象，并将它的原型指向 Father的原型</span><br><span class="line">var F = function()&#123;&#125;</span><br><span class="line">F.prototype = Father.prototype;</span><br><span class="line">//Son的原型指向为 F的实例</span><br><span class="line">Son.prototype = new F();</span><br><span class="line">//修改 Son的 constructor指向</span><br><span class="line">Son.prototype.constructor = Son;</span><br></pre></td></tr></table></figure></p><p>这样就可以无错地实现了构造函数的继承。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是继承&quot;&gt;&lt;a href=&quot;#什么是继承&quot; class=&quot;headerlink&quot; title=&quot;什么是继承&quot;&gt;&lt;/a&gt;什么是继承&lt;/h2&gt;&lt;p&gt; 简单来说，就是一个对象使用另一个对象的属性和方法，并且不要影响原对象的功能。
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="构造函数" scheme="http://yoursite.com/tags/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    
      <category term="继承" scheme="http://yoursite.com/tags/%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>关于构造函数</title>
    <link href="http://yoursite.com/2018/01/06/constructedFn/"/>
    <id>http://yoursite.com/2018/01/06/constructedFn/</id>
    <published>2018-01-06T15:36:03.000Z</published>
    <updated>2018-01-10T13:50:07.878Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>对于构造函数的使用很多人都很熟悉，但是对其原理很多也是比较模糊的，虽然这并不影响使用，但是熟悉了原理，才会少犯错。简单叙述下，算是给自己加深个印象。</p><h2 id="构造函数的使用"><a href="#构造函数的使用" class="headerlink" title="构造函数的使用"></a>构造函数的使用</h2><p>想必都很熟悉<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function Foo(name, age)&#123;</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var foo = new Foo(&apos;xiaoming&apos;, 15)</span><br><span class="line">// &#123;name: &quot;xiaoming&quot;, age: 15&#125;</span><br></pre></td></tr></table></figure></p><p>构造函数名的首字母是大写，但却并不是非得是大写，只是一种惯例，为了区别其他函数，构造函数始终都应该以一个大写字母开头，而非构造函数则应该以一个小写字母开头。所以即使你小写也不会有问题，但是肯定不建议这么做，提出来也只是为了让你注意不要小写首字母。        </p><p>构造函数也是函数，只不过它可以用来创建对象。不过必须使用<code>new</code>操作符，使用<code>new</code>创建实例会经历4个步骤：</p><ol><li>创建一个新对象</li><li>将构造函数的作用域赋给新对象（this指向新对象）</li><li>执行构造函数中的代码（this赋值）</li><li>返回新对象</li></ol><p><strong>总结</strong>：    </p><ul><li>函数名首字母大写</li><li>没有显示创建对象</li><li>直接将属性和方法赋给了this对象</li><li>没有return 语句（默认存在）</li></ul><h2 id="内部原理"><a href="#内部原理" class="headerlink" title="内部原理"></a>内部原理</h2><p>根据上面的4个步骤，不难知道构造函数的内部原理，每当声明一个构造函数时：</p><ol><li>在函数体最前面隐式的加上<code>this = {}</code></li><li>执行<code>this.xxx = xxx</code></li><li>隐式地返回<code>this</code></li></ol><p>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function Foo(name, age)&#123;</span><br><span class="line">    var this = &#123;&#125;;   //隐式加上</span><br><span class="line">    this.name = name;</span><br><span class="line">    this.age = age;</span><br><span class="line">    return this;    //隐式返回</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为了验证是否正确，我们可以自己实现一个构造函数，不过不是使用<code>this</code>，而是使用<code>that</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function Foo(name, age)&#123;</span><br><span class="line">var that = &#123;&#125;;</span><br><span class="line">that.name = name;</span><br><span class="line">that.age = age;</span><br><span class="line">return that;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var foo = Foo(&apos;xiaoming&apos;, 15);</span><br><span class="line">console.log(foo.name);  //&apos;xiaoming&apos;</span><br></pre></td></tr></table></figure><p>注意，这时我们不需要使用<code>new</code>操作符了，因为所有需要的步骤我们都已经添加了，这就是一个普通的函数，返回一个对象。</p><h2 id="关于返回值"><a href="#关于返回值" class="headerlink" title="关于返回值"></a>关于返回值</h2><p>我们都知道，构造函数默认返回了<code>this</code>，那么假使我们自己不小心添加了<code>return</code>语句会怎么样呢。不妨试一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function Foo(name, age)&#123;</span><br><span class="line">this.name = name;</span><br><span class="line">this.age = age;</span><br><span class="line">return this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var foo = new Foo(&apos;xiaoming&apos;, 15);</span><br><span class="line">console.log(foo);  //&#123;name: &quot;xiaoming&quot;, age: 15&#125;</span><br></pre></td></tr></table></figure><p>显然，添加<code>return this</code>是不会有什么问题的。    </p><p>现在我们返回一个普通值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return 123;</span><br></pre></td></tr></table></figure></p><p>如果你试了，会发现也不会影响结果，如果你再顺便试了一下返回字符串和布尔值，发现依旧不会影响结果。现在你知道我想说啥了，没错，当你试着返回一个对象时，结果就是那个对象了，继续试着返回数组和函数，也会影响结果，使得构造函数失去应有的作用。</p><p><strong>总结</strong></p><ul><li>构造函数默认返回了<code>this</code></li><li>如果手动返回了值类型，对结果没影响</li><li>如果手动返回了引用类型，该构造函数失效</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;对于构造函数的使用很多人都很熟悉，但是对其原理很多也是比较模糊的，虽然这并不影响使用，但是熟悉了原理，才会少犯错。简单叙述下，算是给自己加深
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="构造函数" scheme="http://yoursite.com/tags/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>ES6函数和对象</title>
    <link href="http://yoursite.com/2017/12/26/es6-3/"/>
    <id>http://yoursite.com/2017/12/26/es6-3/</id>
    <published>2017-12-26T15:18:46.000Z</published>
    <updated>2018-01-29T07:21:13.817Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>本次介绍ES6函数和对象的一些扩展，更多详情参考：<a href="http://es6.ruanyifeng.com/#docs/function" target="_blank" rel="noopener">函数的扩展</a>，<a href="http://es6.ruanyifeng.com/#docs/object" target="_blank" rel="noopener">对象的扩展</a></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数参数的默认值"><a href="#函数参数的默认值" class="headerlink" title="函数参数的默认值"></a>函数参数的默认值</h3><p>直接为函数的参数指定默认值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function test(x,y=&apos;world&apos;)&#123;</span><br><span class="line">console.log(x,y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(&apos;hello&apos;);  //hello world</span><br><span class="line">test(&apos;hello&apos;,&apos;hello&apos;);  //hello hello</span><br></pre></td></tr></table></figure></p><p>参数变量是默认声明的，所以不能用let或const再次声明<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function test(x,y=&apos;world&apos;)&#123;</span><br><span class="line">let y = &apos;world&apos;;  //error</span><br><span class="line">console.log(x,y);  //error</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>参数默认值的位置 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">function f(x = 1, y) &#123;</span><br><span class="line">  return [x, y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f() // [1, undefined]</span><br><span class="line">f(2) // [2, undefined])</span><br><span class="line">f(, 1) // 报错</span><br><span class="line">f(undefined, 1) // [1, 1]</span><br><span class="line"></span><br><span class="line">//带有默认值的参数应该放在末尾，这样才可以省略</span><br></pre></td></tr></table></figure><p>作用域<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">//一旦设置了参数的默认值，函数进行声明初始化时，参数会形成一个单独的作用域（context）。</span><br><span class="line">//等到初始化结束，这个作用域就会消失。</span><br><span class="line"></span><br><span class="line">var x = 1;</span><br><span class="line"></span><br><span class="line">function f(x, y = x) &#123;</span><br><span class="line">  console.log(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(2) // 2</span><br><span class="line">f()  //undefined</span><br><span class="line"></span><br><span class="line">//上面代码中，参数y的默认值等于变量x，在作用域里，x指向的是第一个参数x，而不是全局变量x。x没赋值时，y就是undefined。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//另一种情况</span><br><span class="line">var x = 1;</span><br><span class="line"></span><br><span class="line">function f(y = x) &#123;</span><br><span class="line">  console.log(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(2);  //2</span><br><span class="line">f();   //1</span><br><span class="line"></span><br><span class="line">//这个作用域里面，变量x本身没有定义，所以指向外层的全局变量x</span><br></pre></td></tr></table></figure></p><h3 id="rest-参数"><a href="#rest-参数" class="headerlink" title="rest 参数"></a>rest 参数</h3><p>ES6 引入 rest 参数（形式为…变量名），用于获取函数的多余参数，这样就不需要使用arguments对象了。    </p><p>当你不确定参数个数时，你可以这样做<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var sum;</span><br><span class="line">function add(...args)&#123;</span><br><span class="line">for(var v of args)&#123;</span><br><span class="line">sum+=v;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(1,2);  //3</span><br><span class="line">add(1,2,3);  //6</span><br><span class="line">add(1,2,3,4,5,6);   //21</span><br><span class="line"></span><br><span class="line">//add函数是一个求和函数，利用 rest 参数，可以向该函数传入任意数目的参数。</span><br><span class="line">//这就是扩展运算符的使用，rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中</span><br></pre></td></tr></table></figure></p><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p>这个使用率很高的。<br>ES6 允许使用“箭头”（=&gt;）定义函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">let fn = v =&gt; v*2;</span><br><span class="line">//等同于</span><br><span class="line">let fn = function(v)&#123;</span><br><span class="line">    return v*2;</span><br><span class="line">&#125;</span><br><span class="line">console.log(fn(2));  //4</span><br></pre></td></tr></table></figure></p><p>如果箭头函数不需要参数或需要多个参数，就使用一个圆括号代表参数部分。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let fn = () =&gt; 2;</span><br><span class="line">//等同于</span><br><span class="line">let fn = function()&#123;</span><br><span class="line">    return 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let fn = (num1,num2) =&gt; num1+num2</span><br><span class="line">//等同于</span><br><span class="line">let fn = function(num1,num2)&#123;</span><br><span class="line">    return num1+num2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果加上{}，return不能省略的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//当不写&#123;&#125;，且没有其他操作时，默认返回值</span><br><span class="line">let fn = () =&gt; 2;</span><br><span class="line">console.log(fn())  //2</span><br><span class="line"></span><br><span class="line">//当加上&#123;&#125;时，return不可省略</span><br><span class="line">let fn = () =&gt; &#123;2&#125;;</span><br><span class="line">console.log(fn())   //undefined</span><br><span class="line"></span><br><span class="line">//&#123;&#125;里要写完整的代码</span><br><span class="line">let fn = () =&gt; &#123;return 2&#125;</span><br><span class="line">console.log(fn())  //2</span><br></pre></td></tr></table></figure><p>如果箭头函数只有一行语句，且不需要返回值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let fn = () =&gt; alert(1)</span><br></pre></td></tr></table></figure></p><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><p>尤其要注意箭头函数里的this指向，<br>函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">function foo() &#123;</span><br><span class="line">  setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(&apos;id:&apos;, this.id);</span><br><span class="line">  &#125;, 100);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var id = 21;</span><br><span class="line"></span><br><span class="line">foo.call(&#123; id: 42 &#125;); // id: 42</span><br><span class="line"></span><br><span class="line">//定时器里有个箭头函数，它的this指向的是定义时的对象，即foo。而foo的this指向了&#123;id：42&#125;这个对象，所以结果是42。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//现在换回ES5的写法</span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line">    console.log(&apos;id:&apos;, this.id);</span><br><span class="line">  &#125;, 100);</span><br><span class="line">  </span><br><span class="line">//此时this指向的是window对象，所以this.id指的就是全局变量id，为21。</span><br></pre></td></tr></table></figure></p><p>另外要注意的：</p><ul><li><p>箭头函数不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</p></li><li><p>不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</p></li><li><p>不可以使用yield命令，因此箭头函数不能用作 Generator 函数。</p></li></ul><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="属性的简洁表示法"><a href="#属性的简洁表示法" class="headerlink" title="属性的简洁表示法"></a>属性的简洁表示法</h3><p>ES6 允许直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">//属性简写</span><br><span class="line">let name = &apos;xiaoming&apos;;</span><br><span class="line">let age = 20;</span><br><span class="line"></span><br><span class="line">let obj = &#123;</span><br><span class="line">    name,</span><br><span class="line">    age</span><br><span class="line">&#125;</span><br><span class="line">//等同于</span><br><span class="line">let obj = &#123;</span><br><span class="line">    name:name,</span><br><span class="line">    age:age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//只要属性名和属性值变量同名即可</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//方法简写</span><br><span class="line">let obj = &#123;</span><br><span class="line">    showName()&#123;</span><br><span class="line">        alert(&apos;xiaoming&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//等同于</span><br><span class="line">let obj = &#123;</span><br><span class="line">    showName:function()&#123;</span><br><span class="line">        alert(&apos;xiaoming&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="属性名表达式"><a href="#属性名表达式" class="headerlink" title="属性名表达式"></a>属性名表达式</h3><p>在ES5中，使用字面量方式定义对象（使用大括号），只能使用标识符定义属性名：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">  foo: true,</span><br><span class="line">  abc: 123</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>现在ES6允许字面量定义对象时，用表达式作为对象的属性名，即把表达式放在方括号内：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let key = &apos;num&apos;;</span><br><span class="line"></span><br><span class="line">let obj = &#123;</span><br><span class="line">  [key]:123,</span><br><span class="line">  [&apos;na&apos; + &apos;me&apos;]:&apos;jhon&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(obj);  // &#123;num: 123, name: &quot;jhon&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>表达式还可以用于定义方法名:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let obj1 = &#123;</span><br><span class="line">  [&apos;h&apos; + &apos;ello&apos;]()&#123;</span><br><span class="line">    console.log(&apos;hi&apos;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj1.hello();   //hi</span><br></pre></td></tr></table></figure></p><p>注意，属性名表达式如果是一个对象，默认情况下会自动将对象转为字符串<code>[object Object]</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const keyA = &#123;a:1&#125;;</span><br><span class="line">let obj2 = &#123;</span><br><span class="line">  [keyA]:&apos;A&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(obj2);   //&#123;[object Object]: &quot;A&quot;&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign"></a>Object.assign</h3><h4 id="合并对象"><a href="#合并对象" class="headerlink" title="合并对象"></a>合并对象</h4><p>Object.assign方法用于对象的合并，将源对象的所有可枚举属性，复制到目标对象。第一个参数是目标对象，后面的参数都是源对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let o1 = &#123;&apos;a&apos;:1&#125;;</span><br><span class="line"></span><br><span class="line">let o2 = &#123;&apos;b&apos;:2&#125;;</span><br><span class="line"></span><br><span class="line">let o3 = &#123;&apos;c&apos;:3&#125;;</span><br><span class="line"></span><br><span class="line">Object.assign(o1,o2,o3);</span><br><span class="line"></span><br><span class="line">console.log(o1);    //&#123;a: 1, b: 2, c: 3&#125;</span><br></pre></td></tr></table></figure></p><p>如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//将上面例子改变一下</span><br><span class="line">let o1 = &#123;&apos;a&apos;:1,&apos;b&apos;:2&#125;;</span><br><span class="line"></span><br><span class="line">let o2 = &#123;&apos;b&apos;:3,&apos;c&apos;:4&#125;;</span><br><span class="line"></span><br><span class="line">let o3 = &#123;&apos;c&apos;:5&#125;;</span><br><span class="line"></span><br><span class="line">Object.assign(o1,o2,o3);</span><br><span class="line"></span><br><span class="line">console.log(o1);    //&#123;a: 1, b: 3, c: 5&#125;</span><br></pre></td></tr></table></figure><h4 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var obj1 = &#123;</span><br><span class="line">    &apos;a&apos;:1,</span><br><span class="line">    &apos;b&apos;:2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var obj2 = Object.assign(&#123;&#125;,obj1);</span><br><span class="line"></span><br><span class="line">console.log(obj2);   //&#123;a: 1, b: 2&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，Object.assign方法实行的是浅拷贝，而不是深拷贝。也就是说，如果源对象某个属性的值是对象，那么目标对象拷贝得到的是这个对象的引用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var obj1 = &#123;</span><br><span class="line">    &apos;a&apos;:&#123;</span><br><span class="line">    &apos;b&apos;:1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var obj2 = Object.assign(&#123;&#125;,obj1);</span><br><span class="line"></span><br><span class="line">obj1.a.b = 2;</span><br><span class="line"></span><br><span class="line">console.log(obj2.a.b);  //2</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;本次介绍ES6函数和对象的一些扩展，更多详情参考：&lt;a href=&quot;http://es6.ruanyifeng.com/#docs/func
      
    
    </summary>
    
      <category term="ES6" scheme="http://yoursite.com/categories/ES6/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Linux环境安装mongodb</title>
    <link href="http://yoursite.com/2017/12/23/linux-mongodb/"/>
    <id>http://yoursite.com/2017/12/23/linux-mongodb/</id>
    <published>2017-12-23T09:00:02.000Z</published>
    <updated>2017-12-23T09:05:09.478Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>上篇介绍了Linux环境下安装Node.js的步骤，紧接着来安装mongodb。<br>另外，推荐我的另一篇 <a href="http://www.cnblogs.com/wjaaron/p/7800490.html" target="_blank" rel="noopener">Windows下图文详解Mongodb安装及配置</a>，先在Windows下熟悉下mongodb，再来看这篇文章会更容易明白。   <a id="more"></a></p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><p>对应自己的服务器系统，去官网下载对应版本的mongodb，我是CentOS 7.4的，由于没找到CentOS的，我下载的是 mongodb-linux-x86_64-amazon-3.6.0.tgz</p><h3 id="上传解压"><a href="#上传解压" class="headerlink" title="上传解压"></a>上传解压</h3><p>将下载好的安装包，通过ftp工具上传到服务器，我还是上传到/root目录下，上传后，执行解压命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf mongodb-linux-x86_64-amazon-3.6.0.tgz</span><br></pre></td></tr></table></figure></p><p>解压后，会多了一个没有后缀的文件，即非压缩文件包，为了方便，我将它重命名为：<code>mongodb-linux</code>。</p><h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><p>在/root目录里（你安装包的位置，可随意），此时有一个mongodb-linux文件，我们再新建一个mongodb文件夹：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir mongodb</span><br></pre></td></tr></table></figure></p><p>然后将mongodb-linux文件移入到这个文件夹：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv mongodb-linux mongodb</span><br></pre></td></tr></table></figure></p><p>之所以这么做，是为了更好的管理mongodb相关的文件，不要和其他要安装的文件搞混了。      </p><p>在mongodb文件夹再里创建三个文件夹：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir data   //用来存放数据库数据</span><br><span class="line"></span><br><span class="line">mkdir logs   //用来存放日志文件</span><br><span class="line"></span><br><span class="line">mkdir etc    //用来存放配置文件</span><br></pre></td></tr></table></figure><p>接下来，进入到logs文件夹里创建 <code>mongo.log</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch mongo.log</span><br></pre></td></tr></table></figure></p><p>再到etc文件夹里创建 <code>mongo.conf</code>文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch mongo.conf</span><br></pre></td></tr></table></figure></p><p>通过<code>vi</code>命令打开<code>mongo.conf</code>编辑内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi mongo.conf</span><br></pre></td></tr></table></figure></p><p>输入上面命令后，进入编辑模式，按下 i 即可输入，输入的内容为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">dbpath=/root/mongodb/data</span><br><span class="line">logpath=/root/mongodb/logs/mongo.log</span><br><span class="line">logappend=true</span><br><span class="line">journal=true</span><br><span class="line">quiet=true</span><br><span class="line">port=27017</span><br></pre></td></tr></table></figure></p><p>输入完后，按下<code>esc</code>退出编辑，再输入<code>:wq</code> 回车保存</p><p>此时整个文件夹的结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">|-mongodb</span><br><span class="line">|  |-data</span><br><span class="line">|  |-etc</span><br><span class="line">|  |  |-mongo.conf</span><br><span class="line">|  |-logs</span><br><span class="line">|  |  |-mongo.log</span><br><span class="line">|  |-mongodb-linux</span><br></pre></td></tr></table></figure></p><h3 id="创建软链接"><a href="#创建软链接" class="headerlink" title="创建软链接"></a>创建软链接</h3><p>同样，我们也为mongodb的命令创建软链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ln -s /root/mongodb/mongodb-linux/bin/mongo /usr/local/bin/mongo</span><br><span class="line"></span><br><span class="line">ln -s /root/mongodb/mongodb-linux/bin/mongod /usr/local/bin/mongod</span><br></pre></td></tr></table></figure></p><p>如果输入命令没报错，就是软链接成功了，你也可以到 /usr/local/bin 目录下查看一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/bin</span><br><span class="line"></span><br><span class="line">ls -la</span><br></pre></td></tr></table></figure></p><p>此时你会看到你所创建的所有软链接，比如我的是：    </p><p><img src="http://ov49mg242.bkt.clouddn.com/@CF46D4_9U$B41T0CPR%25EFX.png" alt=""></p><p>包括了上次node的软链接</p><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p>由于执行一个命令的时候不能再去执行下一个，所以可以开两个窗口测试         </p><p>在第一个窗口，任意目录下输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod -f /root/mongodb/etc/mongo.conf</span><br></pre></td></tr></table></figure></p><p><code>-f</code>指定了配置文件，在windows下是<code>--config</code></p><p>此时再去第二个窗口，输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure></p><p>此时熟悉的界面就出来了，可以执行数据库操作了，输入<code>show dbs</code>来检测一下吧。  </p><p><img src="http://ov49mg242.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171223163414.png" alt=""></p><p><img src="http://ov49mg242.bkt.clouddn.com/QQ%E6%88%AA%E5%9B%BE20171223163459.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;上篇介绍了Linux环境下安装Node.js的步骤，紧接着来安装mongodb。&lt;br&gt;另外，推荐我的另一篇 &lt;a href=&quot;http://www.cnblogs.com/wjaaron/p/7800490.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Windows下图文详解Mongodb安装及配置&lt;/a&gt;，先在Windows下熟悉下mongodb，再来看这篇文章会更容易明白。
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="mongodb" scheme="http://yoursite.com/tags/mongodb/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
</feed>
