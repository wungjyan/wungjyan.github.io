<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wj&#39;blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-09T02:51:46.294Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wungjyan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>本博客不再记录了</title>
    <link href="http://yoursite.com/2020/06/04/end/"/>
    <id>http://yoursite.com/2020/06/04/end/</id>
    <published>2020-06-03T16:00:00.000Z</published>
    <updated>2020-06-09T02:51:46.294Z</updated>
    
    <content type="html"><![CDATA[<p>这里不再记录了，上一次更新也是去年3月份了。现在依旧会坚持写的博客有 <a href="https://www.cnblogs.com/wjaaron/" target="_blank" rel="noopener">博客园</a> 和 <a href="https://juejin.im/user/591b01b5a22b9d0058362647/posts" target="_blank" rel="noopener">掘金</a> 。放出这两个博客地址，也是想着或许有人不巧刚好来到这里呢，哈。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里不再记录了，上一次更新也是去年3月份了。现在依旧会坚持写的博客有 &lt;a href=&quot;https://www.cnblogs.com/wjaaron/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;博客园&lt;/a&gt; 和 &lt;a href=&quot;https://j
      
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>vue中图片上传到阿里云oss记录</title>
    <link href="http://yoursite.com/2019/03/26/upload-oss/"/>
    <id>http://yoursite.com/2019/03/26/upload-oss/</id>
    <published>2019-03-26T14:02:00.000Z</published>
    <updated>2019-03-26T14:10:03.635Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目需求，做一个图片上传到阿里云oss的功能，由于之前没做过这样的功能，所以也是查阅了不少资料，边写demo边测试把基本功能完成了。现在来记录下，没做过的童鞋也可以简单参考下。我的使用场景是在vue项目中结合iview框架的上传组件来实现功能。</p><p>首先给大家一篇阿里云的文档 <a href="https://help.aliyun.com/document_detail/31923.html?spm=a2c4g.11186623.2.22.73a815a6SwksDZ#concept-iyn-vfy-5db" target="_blank" rel="noopener">web端直传实践</a>，它里面给出了三个上传的例子，如下图：</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/19/169936f212d937a8?w=1568&amp;h=422&amp;f=png&amp;s=137966" alt=""><br>最开始我们后端让我自己看看这些例子，也没决定好用哪种方式，而我选择尝试的是第一种方式，因为不需要后端直接参与。那我就先从第一种方式开始说起，在这之前你需要开通好阿里云的对象存储功能，并新建了一个<code>Bucket</code>，这些我就直接略过了，给个文档：<a href="https://help.aliyun.com/document_detail/31883.html?spm=a2c4g.11186623.6.562.82ca79f8pgYLVY" target="_blank" rel="noopener">使用阿里云OSS</a><br><a id="more"></a></p><h2 id="JavaScript客户端签名直传"><a href="#JavaScript客户端签名直传" class="headerlink" title="JavaScript客户端签名直传"></a>JavaScript客户端签名直传</h2><p>这种方式不需要后端直接参与，你只需要配置好阿里云oss的后台就好，非常方便。但是客户端通过JavaScript把AccesssKeyID和AccessKeySecret写在代码里面有泄露的风险。关于AccesssKeyID和AccessKeySecret，参考上面给的文档里的介绍。</p><p>每种方式官方都给出了demo代码，你可以下载下来参考一下，不过我觉得例子代码有点多，就没用他那种方式。阿里云提供了一个sdk可以帮助我们来实现文件上传。<a href="https://help.aliyun.com/document_detail/64041.html?spm=a2c4g.11186623.6.1028.70652f08sBl5jq" target="_blank" rel="noopener">这里是SDK参考</a></p><p>我是直接使用它的cdn引入的，在index.html中直接引入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://gosspublic.alicdn.com/aliyun-oss-sdk.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>之前说了我是结合iview框架的上传组件的，我把上传功能单独写成了一个组件，为防止大家看的难受，这里只贴上部分核心代码：  </p><p>template：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// iview上传组件</span><br><span class="line">&lt;Upload</span><br><span class="line">    :before-upload=&quot;handleBeforUpload&quot;   // before-upload 上传文件之前的钩子，参数为上传的文件</span><br><span class="line">    action=&quot;&quot;</span><br><span class="line">&gt;</span><br><span class="line">    &lt;Button icon=&quot;ios-cloud-upload-outline&quot;&gt;选择文件&lt;/Button&gt;</span><br><span class="line">&lt;/Upload&gt;</span><br><span class="line"></span><br><span class="line">// 显示选择的图片名</span><br><span class="line"> &lt;div v-if=&quot;file&quot;&gt;已选择文件：&#123;&#123;file.name&#125;&#125;</span><br><span class="line"> </span><br><span class="line"> // 手动点击上传</span><br><span class="line">&lt;Button @click=&quot;upLoad&quot;&gt;点击上传&lt;/Button&gt;</span><br></pre></td></tr></table></figure></p><p>script：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        file:&apos;&apos; // 选择上传的文件</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">methods:&#123;</span><br><span class="line">    // 上传之前的操作</span><br><span class="line">    handleBeforUpload (file) &#123;</span><br><span class="line">      this.file = file  // 将回调的文件信息存入data.file</span><br><span class="line">      return false     // 返回false，表示手动上传，取消默认的自动上传</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    // 点击上传按钮触发上传操作</span><br><span class="line">    upload()&#123;</span><br><span class="line">        // sdk提供的创建客户端实例方法</span><br><span class="line">        const client = new OSS.Wrapper(&#123;</span><br><span class="line">            region: &apos;oss-cn-hangzhou&apos;,   // 创建Bucket时会选择不同地区，根据自己的选择填入对应名称</span><br><span class="line">            accessKeyId: &apos;********&apos;,     // 填入你的accessKeyId</span><br><span class="line">            accessKeySecret: &apos;********&apos;, // 填入你的accessKeySecret</span><br><span class="line">            bucket: &apos;***&apos;                // 填入你的bucket名</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        const Name = this.file.name</span><br><span class="line">        const suffix = Name.substr(Name.indexOf(&apos;.&apos;))              // 文件后缀</span><br><span class="line">        const filename = Date.parse(new Date()) + suffix           // 组成新文件名</span><br><span class="line">        </span><br><span class="line">        client.multipartUpload(filename, this.file).then(res =&gt; &#123;   // 上传</span><br><span class="line">            console.log(&apos;上传成功：&apos;,res)</span><br><span class="line">            // ... 你的操作，可以拼接图片url，用于显示等...</span><br><span class="line">        &#125;).catch(err =&gt; &#123;</span><br><span class="line">            console.log(&apos;上传失败：&apos;, err)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上就是一个最简单的上传图片功能，总结就是：<strong>取消iview组件默认的自动上传功能，选择手动上传，在上传之前拿到图片信息，在点击上传按钮时，借助sdk提供的方法，填入你的OSS参数，最后将图片上传。上传成功之后，可以到OSS管理控制台的文件管理中看到图片信息。</strong></p><h2 id="服务端签名直传并设置上传回调"><a href="#服务端签名直传并设置上传回调" class="headerlink" title="服务端签名直传并设置上传回调"></a>服务端签名直传并设置上传回调</h2><p>我和后端最终选择的方式就是这种，至于为啥，显然上面那种方法看起来不那么安全，更多的区别还是去看文档介绍的。<br>同样的，这种方法也提供了demo，但是我依旧没用它的方式去实现我的功能。我还是先贴上少部分核心的代码，其中上面的template部分不用变，主要来看看js部分的实现：</p><p>首先<code>handleBeforUpload</code>中，我们需要加一步获取参数的方法，并组成要上传的数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">handleBeforUpload (file) &#123;</span><br><span class="line">  this.file = file</span><br><span class="line">  // 获取上传文件前服务器给的参数</span><br><span class="line">  this.$store.dispatch(&apos;handleGetAllOss&apos;).then(res =&gt; &#123;</span><br><span class="line">    this.setParams(res.data)  // 组装我们要上传的数据，方法的代码在下面</span><br><span class="line">  &#125;)</span><br><span class="line">  return false</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>我使用了vuex，所以请求都写在了actions里，<code>handleGetAllOss</code>这个action里会请求一些上传需要的参数，请求地址是需要后端提供的，所以如果用这种方式的话，后端大佬的大腿要抱牢。关于请求我就不多说了，就简单发个ajax的get请求拿到参数就好。想要知道会有哪些参数，我们重点来看<code>setParams</code>这个方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">setParams (data) &#123;</span><br><span class="line">  // data 是我上一步骤传过来的参数object</span><br><span class="line">  </span><br><span class="line">  // 这个url是要上传时的地址，存在data的host上</span><br><span class="line">  this.url = data.host</span><br><span class="line"></span><br><span class="line">  const Name = this.file.name</span><br><span class="line">  const suffix = Name.substr(Name.indexOf(&apos;.&apos;))      // 文件后缀</span><br><span class="line">  const filename = Date.parse(new Date()) + suffix   // 组成新的文件名</span><br><span class="line">    </span><br><span class="line">  // 新建formData对象，使用append方法添加字段，在data中拿的都是请求回来的参数</span><br><span class="line">  let formData = new FormData()</span><br><span class="line">  formData.append(&apos;key&apos;, data.dir + storeAs)</span><br><span class="line">  formData.append(&apos;policy&apos;, data.policy)</span><br><span class="line">  formData.append(&apos;OSSAccessKeyId&apos;, data.accessid)</span><br><span class="line">  formData.append(&apos;success_action_status&apos;, &apos;200&apos;)</span><br><span class="line">  formData.append(&apos;callback&apos;, data.callback)</span><br><span class="line">  formData.append(&apos;signature&apos;, data.signature)</span><br><span class="line">  </span><br><span class="line">  formData.append(&apos;name&apos;, Name)       // 文件名</span><br><span class="line">  formData.append(&apos;file&apos;, this.file)  // 文件，选择时存在data上</span><br><span class="line">  </span><br><span class="line">  this.formData = formData    // 将formData对象存入data中，方便后续使用</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>现在我们有了要上传的数据<code>this.formData</code>，有了上传地址：<code>this.url</code>，现在只要使用ajax的post请求就好了，当点击上传按钮时，调用<code>upload</code>方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">upload()&#123;</span><br><span class="line">    this.$store.dispatch(&apos;handleUploadImg&apos;, &#123; url: this.url, data: this.formData &#125;).then(res =&gt; &#123;</span><br><span class="line">        console.log(&apos;上传成功：&apos;,res)</span><br><span class="line">        // 你的操作</span><br><span class="line">    &#125;).catch(err =&gt; &#123;</span><br><span class="line">        console.log(&apos;上传失败：&apos;,err)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我还是把我的啰嗦的代码贴出来吧</p><p><code>handleUploadImg</code>方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 上传</span><br><span class="line">handleUploadImg (&#123; commit &#125;, &#123; url, data &#125;) &#123;</span><br><span class="line">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    uploadImg(&#123; url, data &#125;)     // 方法在下面</span><br><span class="line">      .then(res =&gt; &#123;</span><br><span class="line">        resolve(res)</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(err =&gt; &#123;</span><br><span class="line">        reject(err)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>uploadImg</code>方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const uploadImg = (&#123; url, data &#125;) =&gt; &#123;</span><br><span class="line">  return axios.request(&#123;    // axios.request 方法是简单的对axios的封装，看这配置也应该不需要多介绍</span><br><span class="line">    url,</span><br><span class="line">    data,</span><br><span class="line">    method: &apos;post&apos;,</span><br><span class="line">    headers: &#123; &apos;Content-Type&apos;: &apos;multipart/form-data&apos; &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的流程就是这种上传方式的简单实现，你不必按照我的方式来，总结一下就是：</p><ol><li>请求后端给你的地址，拿到上传时必要的参数</li><li>将获取的参数拼装至formData</li><li>使用post方法发送请求，带上formData数据，请求地址在步骤1的参数里，host参数。</li><li>post请求成功后的回调，是后端可控的，我让后端加了一个图片名返回，自己拼接图片url。</li></ol><p>这个过程需要后端的参与。</p><h2 id="图片处理（缩略图）"><a href="#图片处理（缩略图）" class="headerlink" title="图片处理（缩略图）"></a>图片处理（缩略图）</h2><p>本来没这步的，想想还是写上来，觉得阿里云这个功能挺好用的。</p><p>通过上面的两种方式可以成功上传图片到阿里云的对象存储，然后就可以使用url访问图片了。一般上传成功后，在页面上会显示一个缩略图，这个缩略图不仅仅是你设置宽高看起来小，实际上它真的可以变小。在阿里云OSS管理控制台，点击<code>图片处理</code>，点击<code>新建样式</code>，你会看到下面这样：</p><p><img src="https://user-gold-cdn.xitu.io/2019/3/19/1699519a30183456?w=3372&amp;h=1748&amp;f=jpeg&amp;s=378911" alt=""></p><p>如图你可以在右侧添加一个图片样式，比如可以选择缩略比例，设置好后点确定就会生成一个图片样式，我图中已经有一个<code>min_img</code>名的样式，表示缩略图的意思，这样在我想要访问某个图片的缩略图时，在图片url后面加上<code>?x-oss-process=style/min_img</code>这个后缀就好了，<code>min_img</code>替换成你设置的样式名。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本人也是刚接触这个，实现的也是最基本的功能，实现过程也可能并不正确。有做过这个的童鞋们可以多给点意见，谢谢。🙏</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近项目需求，做一个图片上传到阿里云oss的功能，由于之前没做过这样的功能，所以也是查阅了不少资料，边写demo边测试把基本功能完成了。现在来记录下，没做过的童鞋也可以简单参考下。我的使用场景是在vue项目中结合iview框架的上传组件来实现功能。&lt;/p&gt;
&lt;p&gt;首先给大家一篇阿里云的文档 &lt;a href=&quot;https://help.aliyun.com/document_detail/31923.html?spm=a2c4g.11186623.2.22.73a815a6SwksDZ#concept-iyn-vfy-5db&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;web端直传实践&lt;/a&gt;，它里面给出了三个上传的例子，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/3/19/169936f212d937a8?w=1568&amp;amp;h=422&amp;amp;f=png&amp;amp;s=137966&quot; alt=&quot;&quot;&gt;&lt;br&gt;最开始我们后端让我自己看看这些例子，也没决定好用哪种方式，而我选择尝试的是第一种方式，因为不需要后端直接参与。那我就先从第一种方式开始说起，在这之前你需要开通好阿里云的对象存储功能，并新建了一个&lt;code&gt;Bucket&lt;/code&gt;，这些我就直接略过了，给个文档：&lt;a href=&quot;https://help.aliyun.com/document_detail/31883.html?spm=a2c4g.11186623.6.562.82ca79f8pgYLVY&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;使用阿里云OSS&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>RN踩坑记录</title>
    <link href="http://yoursite.com/2019/03/05/rn-test/"/>
    <id>http://yoursite.com/2019/03/05/rn-test/</id>
    <published>2019-03-05T01:31:07.000Z</published>
    <updated>2019-03-05T01:37:21.559Z</updated>
    
    <content type="html"><![CDATA[<p>这几天试用了下flutter和react-native，最后决定还是先学习react-native。虽说flutter的优点有很多，再加上谷歌出品，必属精品，但是RN依旧更成熟点，而且react的语法也没有额外的学习成本。对于快速构建一个app，RN现在更合适点。</p><p>开始使用RN，总免不了一些坑。由于我在安装RN配置前，捣鼓了flutter配置，所以相对而言安装部分没遇到坑了，但也遇到其他坑。本文准备长期更新，用以记录学习中的坑。<br><a id="more"></a></p><p>目前遇到的两处坑：</p><h2 id="报错：Entry-“-CFBundleIdentifier”-Does-Not-Exist"><a href="#报错：Entry-“-CFBundleIdentifier”-Does-Not-Exist" class="headerlink" title="报错：Entry, “:CFBundleIdentifier”, Does Not Exist"></a>报错：Entry, “:CFBundleIdentifier”, Does Not Exist</h2><p>把这个错误去百度或谷歌，能够找到最多的答案就是去“下载boost 等几个第三方库编译”，原因是因为：</p><blockquote><p>！！！注意！！！：init 命令默认会创建最新的版本，而目前最新的 0.45 及以上版本需要下载 boost 等几个第三方库编译。这些库在国内即便翻墙也很难下载成功，导致很多人无法运行iOS项目！！！中文网在论坛中提供了这些库的国内下载链接。如果你嫌麻烦，又没有对新版本的需求，那么可以暂时创建0.44.3的版本。</p></blockquote><p>这是官网的说明，然后很多人用这个方法解决了。然而我发现我的下载都是正常的，哪怕我单独去下载文件也不能解决问题。最后我是把ios文件运行在Xcode上才找到原因<br><img src="https://img2018.cnblogs.com/blog/1151805/201903/1151805-20190302133859210-683273051.png" alt="image"></p><p>如图，由于我的电脑上安装了nginx，并且监听的是8081端口，而react-native运行时，也会默认监听一个8081端口，所以提示端口占用。知道原因就好办了，我把nginx的配置修改了下，释放端口，最后成功运行了项目。</p><p>所以遇到此类问题，可以在Xcode去运行下查错，每个人的原因可能都不一样。</p><h2 id="React-Navigation-v3版注意"><a href="#React-Navigation-v3版注意" class="headerlink" title="React Navigation v3版注意"></a>React Navigation v3版注意</h2><p>这是一个导航插件，因为我在网上看的教程是v2版的，而默认安装的是最新版，所以一些差异导致项目无法运行。</p><p>目前主要一个大区别就是你需要在你的导航外面加上一层容器，在 v2 和更早版本中， React Navigation 中的容器由 create*Navigator 函数自动提供， 从 v3 开始, 需要直接使用容器，即<code>createAppContainer</code>。这个只是提一下，后面遇到的再记录。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这几天试用了下flutter和react-native，最后决定还是先学习react-native。虽说flutter的优点有很多，再加上谷歌出品，必属精品，但是RN依旧更成熟点，而且react的语法也没有额外的学习成本。对于快速构建一个app，RN现在更合适点。&lt;/p&gt;
&lt;p&gt;开始使用RN，总免不了一些坑。由于我在安装RN配置前，捣鼓了flutter配置，所以相对而言安装部分没遇到坑了，但也遇到其他坑。本文准备长期更新，用以记录学习中的坑。&lt;br&gt;
    
    </summary>
    
      <category term="RN" scheme="http://yoursite.com/categories/RN/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>vue 组件通信总结 (非vuex和Event Bus)</title>
    <link href="http://yoursite.com/2019/02/14/vue-state/"/>
    <id>http://yoursite.com/2019/02/14/vue-state/</id>
    <published>2019-02-14T02:24:19.000Z</published>
    <updated>2019-02-14T02:30:41.780Z</updated>
    
    <content type="html"><![CDATA[<font color="red" size="5">此文章同步发布于掘金  <a href="https://juejin.im/user/591b01b5a22b9d0058362647/posts" target="_blank" rel="noopener">我的掘金</a></font><h2 id="方式一览"><a href="#方式一览" class="headerlink" title="方式一览"></a>方式一览</h2><ol><li><code>props</code> &amp;&amp; <code>emit</code></li><li><code>v-model</code></li><li><code>$children</code> &amp;&amp; <code>$parent</code></li><li><code>$listeners</code> &amp;&amp; <code>$attrs</code></li><li><code>.sync</code></li></ol><a id="more"></a><h2 id="prop-amp-amp-emit-方式"><a href="#prop-amp-amp-emit-方式" class="headerlink" title="prop &amp;&amp; emit 方式"></a>prop &amp;&amp; emit 方式</h2><p>父组件通过 <code>props</code> 传递数据给子组件，子组件通过 <code>emit</code> 发送事件传递数据给父组件。这是最常用的父子组件通信方式，符合单向数据流，即子组件不能直接修改 props， 而是必须通过发送事件的方式告知父组件修改数据。由于是常用的方式，在这也不多啰嗦了。</p><h2 id="v-model-方式"><a href="#v-model-方式" class="headerlink" title="v-model 方式"></a>v-model 方式</h2><p><code>v-model</code>实现的通信其本质上还是上面的<code>props</code>和<code>emit</code>方式，使用<code>v-model</code>更像是一种语法糖。<a href="https://cn.vuejs.org/v2/guide/components-custom-events.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E7%9A%84-v-model" target="_blank" rel="noopener">文档介绍</a>  </p><p>先举个栗子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 这是父组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;child v-model=&quot;msg&quot;&gt;&lt;/child&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import child from &quot;../components/Child&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &quot;hello&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123; child &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 这是子组件</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      &lt;input :value=&quot;value&quot; @input=&quot;$emit(&apos;input&apos;,$event.target.value)&quot;&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&quot;value&quot;]</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>父组件使用子组件时，使用<code>v-model</code>绑定父组件<code>msg</code>数据，这会在子组件里解析成名为 <code>value</code> 的 prop 和名为 <code>input</code> 的事件，所以子组件里的<code>props</code>选项里必须写成<code>value</code>，在<code>$emit</code>事件里也需写成<code>input</code>事件。此时当你在子组件输入时，就会改变父组件的<code>msg</code>值。</p><h3 id="使用-model-选项自定义-props-和-event"><a href="#使用-model-选项自定义-props-和-event" class="headerlink" title="使用 model 选项自定义 props 和 event"></a>使用 model 选项自定义 props 和 event</h3><p>上面说了，props选项里必须写<code>value</code>，事件也必须是<code>input</code>。这是默认情况下的解析，其实我们也可以自定义 props 和 event，使用<code>model</code>选项，<a href="https://cn.vuejs.org/v2/api/#model" target="_blank" rel="noopener">文档介绍</a>。文档中以复选框为例，修改 props 和 event：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">model: &#123;</span><br><span class="line">    prop: &apos;checked&apos;,</span><br><span class="line">    event: &apos;change&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="children-amp-amp-parent-方式"><a href="#children-amp-amp-parent-方式" class="headerlink" title="$children &amp;&amp; $parent 方式"></a><code>$children</code> &amp;&amp; <code>$parent</code> 方式</h2><p>这两个是vue提供的api，见名知意，在父组件里使用 <code>$children</code> 访问子组件，在子组件里使用<code>$parent</code>访问父组件。</p><p>举个简单栗子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 这是子组件</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">     &#123;&#123;$parent.msg&#125;&#125;   // 子组件显示父组件数据</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      child_msg: &quot;我是子组件数据&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.$parent.test(); // 子组件执行父组件方法</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// 这是父组件</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;child/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import child from &quot;../components/Child&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &quot;我是父组件的数据&quot;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123; child &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    test() &#123;</span><br><span class="line">      console.log(&quot;我是父组件的方法，被执行&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(this.$children[0].child_msg); // 执行子组件方法</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>【注意】</strong>  <code>$children</code> 是数组，所以当只有一个子组件时，使用<code>[0]</code>获取。当有多个子组件时，它并不保证顺序，也不是响应式的。</p><h2 id="listeners-方式"><a href="#listeners-方式" class="headerlink" title="$listeners 方式"></a><code>$listeners</code> 方式</h2><p>初看此api的定义，我也是似懂非懂：</p><blockquote><p>包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on=”$listeners” 传入内部组件——在创建更高层次的组件时非常有用</p></blockquote><p>文档这里也描述了它的使用方法： <a href="https://cn.vuejs.org/v2/guide/components-custom-events.html#%E5%B0%86%E5%8E%9F%E7%94%9F%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A%E5%88%B0%E7%BB%84%E4%BB%B6" target="_blank" rel="noopener">文档介绍</a></p><p>在查看一些博客时，要么拿官方例子，要么一大堆介绍，其实我看的也是一脸懵逼。后来自己慢慢试着用了下，也大概明白它是干嘛的。我的理解：<strong>在多层嵌套组件的业务中，使用<code>$listeners</code>可以使用更少的代码来完成事件通信。</strong></p><p>还是以代码来说明，如下图，我们来实现组件B 到 父组件 的通信，</p><p><img src="https://user-gold-cdn.xitu.io/2019/2/5/168bc72ddda0b169?w=788&amp;h=566&amp;f=png&amp;s=20028" alt=""></p><p>一般嵌套层级太多时，我们可能就会考虑vuex，但只传递数据，而不做中间处理，有点大材小用，所以如上图这样的，我们可能还是使用<code>emit</code>方式来通信，无非多传一层，多写点代码。那么现在，有了<code>$listeners</code>，我们可以更方便的来实现，我尽量用最少的代码来实现下：</p><p>就从最下面的B组件开始，它有一个按钮，点击时触发实例上的事件<code>getFromB</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 组件B</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;handleClick&quot;&gt;B组件按钮&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleClick() &#123;</span><br><span class="line">      this.$emit(&quot;getFromB&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>A组件 包裹 B组件，相当于是父组件与B组件的中转站，在不用<code>$listeners</code>时，我们可能会在这里再触发一个事件，现在不需要这样了，我们这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 组件A</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;child-b v-on=&quot;$listeners&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import childB from &quot;../components/ChildB&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    childB</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    console.log(this.$listeners);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>只需要加一句<code>v-on=&quot;$listeners&quot;</code>即可。好奇的我们也可以 mounted 时打印一下<code>$listeners</code>。</p><p>父组件，显而易见，我们直接绑定<code>getFromB</code>事件即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">   &lt;child-a v-on:getFromB=&quot;fromB&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import childA from &quot;../components/ChildA&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123; childA &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    fromB() &#123;</span><br><span class="line">      console.log(&quot;B组件触发&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>这就是<code>$listeners</code>的简单用法，说到这里，你应该意识到，当组件嵌套很多层时，不借助 vuex，我们也可以较方便地实现通信了。</p><p>说到这里，我还要提一个api，就是<code>$attrs</code>。它与<code>$listeners</code>的关系就好比 props 与 emit 的关系，用来向底层组件传递属性。先贴上它的定义：</p><blockquote><p>包含了父作用域中不作为 prop 被识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind=”$attrs” 传入内部组件——在创建高级别的组件时非常有用。</p></blockquote><p>我们回想下，如果使用 props 向孙组件传递数据时，在中间组件里，我们是要一层层使用 props 选项来接收，然后再传递的。那么<code>$attrs</code>的作用就是在没到目标子组件时，不使用props接收数据，直到到达需要数据的组件时，再使用props接收。</p><p>在我看别的博客时，都是这两个api一起说的，代码比较多，为了清晰，我把上面代码多余的代码删掉，只演示<code>$attrs</code>的使用：</p><p>父组件传递一个属性<code>toB</code>，意为是给B组件用的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">   &lt;child-a toB=&quot;hello&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import childA from &quot;../components/ChildA&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123; childA &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>A组件使用<code>v-bind=&quot;$attrs&quot;</code>即可，不需要 props 接收，实际上也不可以接收，看定义<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 组件 A</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">     &lt;child-b v-bind=&quot;$attrs&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import childB from &quot;../components/ChildB&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123; childB &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>B组件是我们的最后子组件，它用到<code>toB</code>属性，所以使用 props 选项接收了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;p&gt;父组件传来数据：&#123;&#123;toB&#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  props: [&quot;toB&quot;]</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>从这个简单的例子，我们可以知道，当组件嵌套层级很多时，属性传递变得不要太方便。最后还要提一个<code>inheritAttrs</code>选项，它一般配合<code>$attrs</code>使用，这里我就不再多说了。<a href="https://cn.vuejs.org/v2/api/#inheritAttrs" target="_blank" rel="noopener">文档介绍</a></p><h2 id="sync-方式"><a href="#sync-方式" class="headerlink" title=".sync 方式"></a><code>.sync</code> 方式</h2><p>此方法其实用的也不少，它在 Vue 1.x 里的作用是对一个 prop 进行“双向绑定“。但在 Vue 2 之后是只允许单向数据流的，所以现在即使它看起来像是真正的“双向绑定”，本质上也只是作为一个编译时的语法糖存在而已。</p><p>举个计数器的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &#123;&#123;num&#125;&#125;</span><br><span class="line">   &lt;child-a :count.sync=&quot;num&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import childA from &quot;../components/ChildA&quot;;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      num: 0</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123; childA &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">     &lt;div @click=&quot;handleAdd&quot;&gt;ADD&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      counter: this.count</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: [&quot;count&quot;],</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleAdd() &#123;</span><br><span class="line">      this.$emit(&quot;update:count&quot;, ++this.counter);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>嗯，看起来似乎更有逼格。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>这么看下来，除了<code>$children</code> 和 <code>$parent</code> 是直接获取的，其他都跟 props 和 emit 息息相关。具体怎么用，自己看着办呗。</p><p>最后，<strong>新年快乐！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;font color=&quot;red&quot; size=&quot;5&quot;&gt;此文章同步发布于掘金  &lt;a href=&quot;https://juejin.im/user/591b01b5a22b9d0058362647/posts&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;我的掘金&lt;/a&gt;&lt;/font&gt;

&lt;h2 id=&quot;方式一览&quot;&gt;&lt;a href=&quot;#方式一览&quot; class=&quot;headerlink&quot; title=&quot;方式一览&quot;&gt;&lt;/a&gt;方式一览&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;props&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;emit&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v-model&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$children&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;$parent&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$listeners&lt;/code&gt; &amp;amp;&amp;amp; &lt;code&gt;$attrs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.sync&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Vue" scheme="http://yoursite.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>关于手写call，apply和bind</title>
    <link href="http://yoursite.com/2019/02/02/call-apply-bind/"/>
    <id>http://yoursite.com/2019/02/02/call-apply-bind/</id>
    <published>2019-02-02T07:08:41.000Z</published>
    <updated>2019-02-02T07:44:01.875Z</updated>
    
    <content type="html"><![CDATA[<p>今年到处看到关于手写bind函数的话题，似乎面试题也趋于跟风形式。这让我有种感觉，那就是不面试的问题都不会，只要扯上面试的话，那么问题就不是问题了。不禁感叹，前端要学的越来越多了～</p><p>不扯太多，我也来试着实现一下<code>bind</code>，不过我觉得<code>call</code>和<code>apply</code>也可以实现下。</p><h2 id="实现-call"><a href="#实现-call" class="headerlink" title="实现 call"></a>实现 call</h2><p>关于<code>call</code>函数的作用，我觉得不需要太多赘述，只要关注两点：</p><ol><li>改变this指向</li><li>直接调用函数</li></ol><p>代码实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Function.prototype.myCall = function(context) &#123;</span><br><span class="line">    context = context || window // call函数第一个参数为this指向目标，若不传，指向window</span><br><span class="line">    context.fn = this // 将要执行的函数赋值于context对象的fn属性，这样调用函数时，内部this就指向了context</span><br><span class="line">    const args = [...arguments].slice(1) // 获取参数</span><br><span class="line">    const result = context.fn(...args) // call函数会调用原函数，所以我们也调用此函数，注意此时函数this指向了context</span><br><span class="line">    delete context.fn // 删除context对象的fn属性</span><br><span class="line">    return result // 调用结果返回</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><h2 id="实现-apply"><a href="#实现-apply" class="headerlink" title="实现 apply"></a>实现 apply</h2><p><code>apply</code>和<code>call</code>的区别只在于参数的传递方式，<code>apply</code>是以数组形式传入参数，代码实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Function.prototype.myApply = function(context) &#123;</span><br><span class="line">    context = context || window</span><br><span class="line">    context.fn = this</span><br><span class="line">    let result</span><br><span class="line">    // 与call 的区别只在于参数传递方式</span><br><span class="line">    if (arguments[1]) &#123;</span><br><span class="line">        result = context.fn(...arguments[1])</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        result = context.fn()</span><br><span class="line">    &#125;</span><br><span class="line">    delete context.fn</span><br><span class="line">    return result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="实现-bind"><a href="#实现-bind" class="headerlink" title="实现 bind"></a>实现 bind</h2><p>bind的实现稍微复杂点，它与前两个的主要区别在于：<strong>它不会调用函数，只改变了this指向，并且返回函数</strong>。因为返回了函数，那么就可以使用new方式来调用，我们先来看看原生bind的使用结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;</span><br><span class="line">    a: 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function test() &#123;</span><br><span class="line">    console.log(this)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test.prototype.hello = function() &#123;</span><br><span class="line">    console.log(&apos;hello&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">t = test.bind(obj)</span><br><span class="line">t() // &#123;a:2&#125;</span><br><span class="line">f = new t() </span><br><span class="line">f.hello  // 使用new调用，关键在于实例可以访问原函数原型上的hello方法</span><br></pre></td></tr></table></figure></p><p>那么，我们要做的有两步，第一是<strong>改变this指向</strong>，第二是<strong>new出来的实例继承原型</strong>，代码实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Function.prototype.myBind = function(context, ...args1) &#123;</span><br><span class="line">    context = context || window</span><br><span class="line">    const _this = this</span><br><span class="line">    </span><br><span class="line">    // 要返回的函数，内部直接借用apply改变this指向</span><br><span class="line">    function F(...args2) &#123;</span><br><span class="line">        _this.apply(context, [...args1, ...args2])</span><br><span class="line">    &#125;</span><br><span class="line">    F.prototype = Object.create(this.prototype) // 返回的函数的原型继承原函数的原型</span><br><span class="line">    // F.prototype.contructor = this // 此处可以不写，思考为什么？</span><br><span class="line">    return F</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意上述代码中的<code>args1</code>和<code>args2</code>，因为bind函数调用情况可能是这样<code>test.bind(obj,1)(2)</code>，所以为了好理解，我将两个参数列表都表示出来，最后参数是要合并的。</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>以上就是三种函数的实现方式，只是基于原理的简单实现。面试只是一个小目的，最关键的还是学好JavaScript这门语言啊。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年到处看到关于手写bind函数的话题，似乎面试题也趋于跟风形式。这让我有种感觉，那就是不面试的问题都不会，只要扯上面试的话，那么问题就不是问题了。不禁感叹，前端要学的越来越多了～&lt;/p&gt;
&lt;p&gt;不扯太多，我也来试着实现一下&lt;code&gt;bind&lt;/code&gt;，不过我觉得&lt;code&gt;call&lt;/code&gt;和&lt;code&gt;apply&lt;/code&gt;也可以实现下。&lt;/p&gt;
&lt;h2 id=&quot;实现-call&quot;&gt;&lt;a href=&quot;#实现-call&quot; class=&quot;headerlink&quot; title=&quot;实现 call&quot;&gt;&lt;/a&gt;实现 call&lt;/h2&gt;&lt;p&gt;关于&lt;code&gt;call&lt;/code&gt;函数的作用，我觉得不需要太多赘述，只要关注两点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;改变this指向&lt;/li&gt;
&lt;li&gt;直接调用函数&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;代码实现：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Function.prototype.myCall = function(context) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    context = context || window // call函数第一个参数为this指向目标，若不传，指向window&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    context.fn = this // 将要执行的函数赋值于context对象的fn属性，这样调用函数时，内部this就指向了context&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const args = [...arguments].slice(1) // 获取参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    const result = context.fn(...args) // call函数会调用原函数，所以我们也调用此函数，注意此时函数this指向了context&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    delete context.fn // 删除context对象的fn属性&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    return result // 调用结果返回&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>服务器相关安装</title>
    <link href="http://yoursite.com/2019/01/12/server-config/"/>
    <id>http://yoursite.com/2019/01/12/server-config/</id>
    <published>2019-01-12T05:20:35.000Z</published>
    <updated>2019-01-12T05:27:23.314Z</updated>
    
    <content type="html"><![CDATA[<p>主要是关于部署前端项目的。<br>经常记得不清，记录下吧。<br>我的服务器环境：阿里云ECS CentOS 7.3 64位</p><h2 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h2><h3 id="找到资源"><a href="#找到资源" class="headerlink" title="找到资源"></a>找到资源</h3><p>打开<a href="http://nodejs.cn/" target="_blank" rel="noopener">nodejs中文网</a>，点<strong>下载</strong>，找到<strong>阿里云镜像</strong>，如下图：</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/11/1683bb09282bd6b6?w=2044&amp;h=1288&amp;f=png&amp;s=267744" alt=""><br>点开阿里云镜像，选择对应的版本，右键复制链接，如下图：</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/11/1683bb1bf98dc704?w=1452&amp;h=1370&amp;f=png&amp;s=557002" alt=""><br><a id="more"></a></p><h3 id="下载解压"><a href="#下载解压" class="headerlink" title="下载解压"></a>下载解压</h3><p>连接上服务器，使用 wget 下载，我在 <code>/</code> 目录下下载：</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/11/1683bb5ed596f941?w=1772&amp;h=136&amp;f=png&amp;s=38117" alt=""></p><p>wget 命令后面跟的是上面复制的链接，下载完成后，使用 <code>ls</code> 命令查看当前文件，发现有一个 <code>node-v10.15.0-linux-x64.tar.gz</code> 这样的压缩文件，执行解压命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvf node-v10.15.0-linux-x64.tar.gz</span><br></pre></td></tr></table></figure></p><p>注意不要输错。</p><h3 id="创建软链接"><a href="#创建软链接" class="headerlink" title="创建软链接"></a>创建软链接</h3><p>解压完成后，使用 <code>ls</code> 命令，发现当前文件下有一个不带 <code>.tar.gz</code> 后缀的文件夹。我们接下来创建软链接，使 node 和 npm 可以在任意目录下使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /node-v10.15.0-linux-x64/bin/node /usr/local/bin/node</span><br><span class="line">ln -s /node-v10.15.0-linux-x64/bin/npm /usr/local/bin/npm</span><br></pre></td></tr></table></figure></p><p>上面是两条命令，分别输入，注意输入后没有反馈信息代表执行成功了，没有反馈就是最好的反馈，再一个就是 <code>/node-v10.15.0-linux-x64/bin/node</code> 这个是你下载node的地址，也即是解压后的文件夹地址，用绝对路径，如果你不是在<code>/</code>目录下，比如在<code>/root</code>目录下下载的，那么你可能需要执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /root/node-v10.15.0-linux-x64/bin/node /usr/local/bin/node</span><br></pre></td></tr></table></figure></p><p>后面 <code>/usr/local/bin/node</code> 是不变的。</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>切换到任意目录下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v &amp;&amp; npm -v</span><br></pre></td></tr></table></figure></p><p>看到版本号就成功了。</p><h2 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb"></a>安装mongodb</h2><h3 id="找到资源-1"><a href="#找到资源-1" class="headerlink" title="找到资源"></a>找到资源</h3><p>打开 <a href="https://www.mongodb.com/download-center/community" target="_blank" rel="noopener">https://www.mongodb.com/download-center/community</a>，如下图，选择版本，复制最下面的链接：</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/11/1683bcfaaf1abdee?w=1506&amp;h=784&amp;f=png&amp;s=103468" alt=""></p><h3 id="下载解压-1"><a href="#下载解压-1" class="headerlink" title="下载解压"></a>下载解压</h3><p>与下载 node 一样，使用 wget 命令下载，注意自己的目录位置哦，我依旧在<code>/</code>下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.5.tgz</span><br></pre></td></tr></table></figure></p><p>解压<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvf mongodb-linux-x86_64-4.0.5.tgz</span><br></pre></td></tr></table></figure></p><p>解压完毕后，有一个 <code>mongodb-linux-x86_64-4.0.5</code> 的没有<code>.tgz</code>后缀的文件夹。这个名字太长了，我们给它换个名字好方便操作，同时习惯性把这个文件放到 <code>/usr/local/</code> 目录下，<code>mv</code> 命令要了解一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv mongodb-linux-x86_64-4.0.5 /usr/local/mongodb</span><br></pre></td></tr></table></figure></p><p>此时我们的操作就来到<code>usr/local/mongodb</code>这个目录下了</p><h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><p>切换到<code>/usr/local/mongodb</code>目录下，创建三个文件夹：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir data   //用来存放数据库数据</span><br><span class="line"></span><br><span class="line">mkdir logs   //用来存放日志文件</span><br><span class="line"></span><br><span class="line">mkdir etc    //用来存放配置文件</span><br></pre></td></tr></table></figure></p><p>接下来，进入到 logs 文件夹里创建 mongo.log 文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch mongo.log</span><br></pre></td></tr></table></figure></p><p>再到 etc 文件夹里创建 mongo.conf 文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch mongo.conf</span><br></pre></td></tr></table></figure></p><p>通过 vim 命令打开 mongo.conf 编辑内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dbpath=/usr/local/mongodb/data </span><br><span class="line">logpath=/usr/local/mongodb/logs/mongo.log </span><br><span class="line">logappend=true  </span><br><span class="line">journal=true  </span><br><span class="line">quiet=true  </span><br><span class="line">port=27017 </span><br><span class="line">bind_ip=0.0.0.0</span><br></pre></td></tr></table></figure></p><p>保存退出。注意 <code>dbpath</code> 和 <code>logpath</code> 的路径，如果是按照我步骤来的，不需要改变，如果目录不一样，自行修改，这些都要自己注意。</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>还是在 <code>mongodb</code> 目录下，有一个<code>bin</code>目录，切换进入后使用<code>ls</code><br>命令：</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/11/1683c36ddb93d561?w=1878&amp;h=262&amp;f=png&amp;s=83042" alt=""></p><p>看到熟悉的<code>mongod</code>了，使用配置文件启动：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mongod -f /usr/local/mongodb/etc/mongo.conf</span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/11/1683c65dc69c63d1?w=1992&amp;h=418&amp;f=png&amp;s=84220" alt=""><br>如你所见，没有反馈就是成功了（我自己都忘记了，以为出错了呢）</p><p>此时再打开一个窗口，同样进入<code>/usr/local/mongodb/bin</code>目录，运行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mongo</span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/11/1683c684d7452b15?w=672&amp;h=258&amp;f=png&amp;s=31094" alt=""><br>这样就成功了。</p><p>同时在浏览器端访问<code>27017</code>端口，是这样的：</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/11/1683c6aed90f9369?w=1456&amp;h=178&amp;f=png&amp;s=31964" alt=""><br>如果访问失败，检查服务器 27017 端口是否打开。</p><h3 id="创建软链接-1"><a href="#创建软链接-1" class="headerlink" title="创建软链接"></a>创建软链接</h3><p>为了不要每次启动都先切换到<code>/usr/local/mongodb/bin</code>目录下，我们给它也创建软链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/mongodb/bin/mongod /usr/local/bin/mongod</span><br><span class="line">ln -s /usr/local/mongodb/bin/mongo /usr/local/bin/mongo</span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/11/1683c74dc148c476?w=2058&amp;h=450&amp;f=png&amp;s=110677" alt=""></p><p>现在可以在任意目录使用<code>mongod</code>和<code>mongo</code>命令了，记住配置文件还是要加上的。</p><h2 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h2><h3 id="找到资源-2"><a href="#找到资源-2" class="headerlink" title="找到资源"></a>找到资源</h3><p>安装 git 可以通过 yum 安装，不过版本太老，所以推荐源码安装。打开<a href="https://github.com/git/git/releases" target="_blank" rel="noopener">https://github.com/git/git/releases</a>，复制最新版的下载链接：</p><p><img src="https://user-gold-cdn.xitu.io/2019/1/11/1683c7eb37520cee?w=1144&amp;h=638&amp;f=png&amp;s=127105" alt=""></p><h3 id="下载解压-2"><a href="#下载解压-2" class="headerlink" title="下载解压"></a>下载解压</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/git/git/archive/v2.20.1.tar.gz</span><br></pre></td></tr></table></figure><p>解压<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xvf v2.20.1.tar.gz</span><br></pre></td></tr></table></figure></p><p>注意解压后的文件名称变了，为<code>git-2.20.1</code></p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>安装编译源码所需依赖：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel gcc perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure></p><p>安装依赖时，自动安装了git，版本是旧的，卸载它<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove git</span><br></pre></td></tr></table></figure></p><h3 id="安装git-1"><a href="#安装git-1" class="headerlink" title="安装git"></a>安装git</h3><p>进入<code>git-2.20.1</code>目录，执行编译命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make prefix=/usr/local/git all</span><br></pre></td></tr></table></figure></p><p>结束后，同目录，安装 Git 至 /usr/local/git 路径：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make prefix=/usr/local/git install</span><br></pre></td></tr></table></figure></p><p>打开环境变量配置文件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure></p><p>在底部加入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PATH=$PATH:/usr/local/git/bin</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure></p><p><img src="https://user-gold-cdn.xitu.io/2019/1/11/1683cac55c436617?w=1136&amp;h=728&amp;f=png&amp;s=75163" alt=""></p><p>保存退出。</p><p>最后要刷新下环境变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></p><h3 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure><h2 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h2><p>推荐掘金上的一篇：<a href="https://juejin.im/post/5bd7a6046fb9a05d2c43f8c7" target="_blank" rel="noopener">https://juejin.im/post/5bd7a6046fb9a05d2c43f8c7</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要是关于部署前端项目的。&lt;br&gt;经常记得不清，记录下吧。&lt;br&gt;我的服务器环境：阿里云ECS CentOS 7.3 64位&lt;/p&gt;
&lt;h2 id=&quot;安装node&quot;&gt;&lt;a href=&quot;#安装node&quot; class=&quot;headerlink&quot; title=&quot;安装node&quot;&gt;&lt;/a&gt;安装node&lt;/h2&gt;&lt;h3 id=&quot;找到资源&quot;&gt;&lt;a href=&quot;#找到资源&quot; class=&quot;headerlink&quot; title=&quot;找到资源&quot;&gt;&lt;/a&gt;找到资源&lt;/h3&gt;&lt;p&gt;打开&lt;a href=&quot;http://nodejs.cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;nodejs中文网&lt;/a&gt;，点&lt;strong&gt;下载&lt;/strong&gt;，找到&lt;strong&gt;阿里云镜像&lt;/strong&gt;，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/1/11/1683bb09282bd6b6?w=2044&amp;amp;h=1288&amp;amp;f=png&amp;amp;s=267744&quot; alt=&quot;&quot;&gt;&lt;br&gt;点开阿里云镜像，选择对应的版本，右键复制链接，如下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2019/1/11/1683bb1bf98dc704?w=1452&amp;amp;h=1370&amp;amp;f=png&amp;amp;s=557002&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="服务器" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>使用redux-thunk实现ajax数据请求</title>
    <link href="http://yoursite.com/2018/09/23/redux-thunk/"/>
    <id>http://yoursite.com/2018/09/23/redux-thunk/</id>
    <published>2018-09-23T14:21:27.000Z</published>
    <updated>2018-11-13T15:37:51.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>redux-thunk 是一个流行的用来处理异步操作的redux中间件，作为一个新手，如果你并不知道具体哪些场景需要使用这个中间件，那么就不要用它，就像官方所说的这样：</p><blockquote><p>If you’re not sure whether you need it, you probably don’t.</p></blockquote><p>redux-thunk 常用来处理一些请求操作，这里以 axios 请求为例，来演示redux-thunk 的配置使用。</p><h2 id="安装-amp-amp-配置"><a href="#安装-amp-amp-配置" class="headerlink" title="安装&amp;&amp;配置"></a>安装&amp;&amp;配置</h2><p>使用npm安装即可：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save redux-thunk</span><br></pre></td></tr></table></figure></p><p>这里要讲下它的配置，按照官方文档很简单就能配置好：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createStore, applyMiddleware &#125; from &apos;redux&apos;</span><br><span class="line"></span><br><span class="line">// 在同级目录引入reducer</span><br><span class="line">import reducer from &apos;./reducer&apos;</span><br><span class="line"></span><br><span class="line">// 引入redux-thunk</span><br><span class="line">import thunk from &apos;redux-thunk&apos;</span><br><span class="line"></span><br><span class="line">// 创建store</span><br><span class="line">const store = createStore(</span><br><span class="line">    reducer,</span><br><span class="line">    applyMiddleware(thunk)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>上面的配置就是可以用的，参考文档：<a href="https://github.com/reduxjs/redux-thunk" target="_blank" rel="noopener">redux-thunk</a></p><p>在这里想补充一点的是多个中间件使用时怎么配置。由于我会用到 Redux DevTools 这个浏览器插件来调试 redux，这个也需要我们在代码端配置好的，现在的场景就是我要配置devtools的代码，也要配置redux-thunk 的代码，往后可能还要使用到其他中间件，所以需要了解一下它们结合的配置。好在也有文档给出示范，参考 <a href="https://github.com/zalmoxisus/redux-devtools-extension#usage" target="_blank" rel="noopener">redux-devtools-extension</a></p><p>我的具体配置为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import &#123; createStore, applyMiddleware, compose &#125; from &apos;redux&apos;</span><br><span class="line"></span><br><span class="line">const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__(&#123;&#125;) : compose;</span><br><span class="line"></span><br><span class="line">const enhancer = composeEnhancers(</span><br><span class="line">  applyMiddleware(thunk),</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">const store = createStore(</span><br><span class="line">reducer,</span><br><span class="line">enhancer</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">export default store</span><br></pre></td></tr></table></figure><p>如果需要再使用其他中间件，加到 applyMiddleware 中 thunk 后面即可。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在不使用 redux-thunk 的情况下，axios 请求一般是放在 componentDidMount 这个生命周期里的，现在用到了 redux-thunk ，我们可以将请求放到 action里，我们创建一个文件 actionCreator.js，专门用来创建action所用，现在我们就来创建一个用来请求的action：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import axios from &apos;axios&apos;</span><br><span class="line"></span><br><span class="line">export function getList()&#123;</span><br><span class="line">return ()=&gt;&#123;</span><br><span class="line">axios.get(&apos;https://www.easy-mock.com/mock/5ba7324d774ea0691ff86d5e/test/list&apos;)</span><br><span class="line">        .then(res=&gt;&#123;</span><br><span class="line">             console.log(res)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用redux-thunk中间件后，创建的action可以返回一个函数，函数里执行请求操作，此时在页面组件里即可使用这个action，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// App.js文件，一个页面组件，代码不完整，仅供参考</span><br><span class="line"></span><br><span class="line">import store from &apos;./store&apos;</span><br><span class="line">import &#123; getList &#125; from &apos;./store/actionCreator.js&apos;</span><br><span class="line"></span><br><span class="line">class App extends Component &#123;</span><br><span class="line"> // ...</span><br><span class="line"> </span><br><span class="line"> componentDidMount()&#123;</span><br><span class="line">    const action = getList()</span><br><span class="line">    store.dispatch(action)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  // ...</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当我们dispatch这个action时，action里的函数会自动执行，可在浏览器端调试查看。但是目前提交并不会影响store状态，因为我们虽然执行了action的函数，但没有执行提交真正action的操作，所以我们需要回到actionCreator.js文件里继续完善我们的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">export function getList()&#123;</span><br><span class="line">return (dispatch)=&gt;&#123;</span><br><span class="line">axios.get(&apos;https://www.easy-mock.com/mock/5ba7324d774ea0691ff86d5e/test/list&apos;)</span><br><span class="line">        .then(res=&gt;&#123;</span><br><span class="line">             dispatch(&#123;</span><br><span class="line">             type:&apos;CHANGE_LIST&apos;,</span><br><span class="line">             data: res.data.data</span><br><span class="line">             &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面代码中，返回的函数里可以把dispatch作为参数传进去，最终通过dispatch提交真实的action。</p><p>以上就是通过redux-thunk实现axios请求的简单流程。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;redux-thunk 是一个流行的用来处理异步操作的redux中间件，作为一个新手，如果你并不知道具体哪些场景需要使用这个中间件，那么就不
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="redux-thunk" scheme="http://yoursite.com/tags/redux-thunk/"/>
    
  </entry>
  
  <entry>
    <title>服务器部署NeteaseCloudMusicApi</title>
    <link href="http://yoursite.com/2018/09/02/music-api/"/>
    <id>http://yoursite.com/2018/09/02/music-api/</id>
    <published>2018-09-02T06:53:27.000Z</published>
    <updated>2018-09-03T01:15:18.288Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近对 <a href="https://github.com/Binaryify/NeteaseCloudMusicApi" target="_blank" rel="noopener">NeteaseCloudMusicApi</a> 这个项目很感兴趣，它是一个网易云音乐api的服务端项目，通过它的封装我们可以很好的调用网易云音乐的相关api，从而实现一个音乐播放器小应用。</p><p>虽然一直想做一个自己的音乐播放器，但也一直没动手，现在准备找工作了也不想折腾了。有时间的话，倒是想在小程序上实现下。说到小程序，就想到小程序调用接口需要是https的（开发时可以使用http），如果想上线的话，就意味着买了服务器外，还要自己配置https。没接触过https的配置，就先把这个sercice在服务端跑起来吧～</p><h2 id="node安装-amp-amp-文件上传"><a href="#node安装-amp-amp-文件上传" class="headerlink" title="node安装 &amp;&amp; 文件上传"></a>node安装 &amp;&amp; 文件上传</h2><p>关于服务器端的node安装，我一开始也是忘记的，好在我以前写过博客，直接查看 <a href="https://wungjyan.github.io/2017/12/23/linux-node/" target="_blank" rel="noopener">Linux环境部署Node.js</a>。由此可见，写博客不是一点用没有的，没人看也可以自己当笔记看啊。</p><p>node安装好后，需要把 NeteaseCloudMusicApi 这个项目上传到服务器。首先把这个项目从github上拉到本地：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:Binaryify/NeteaseCloudMusicApi.git</span><br></pre></td></tr></table></figure></p><p>拷到本地后无需执行安装操作，这些操作放到服务器上再执行。嫌弃名字长，可以重命名下，我这里命名为 music-api。接下来就是上传文件的操作了。</p><p>上传文件可以使用ftp工具，操作更方便，这里就不多说了，可以搜索到很多资料。我这里是mac环境，使用 scp 命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r ~/Desktop/music-api root@39.108.161.158:/root/project</span><br></pre></td></tr></table></figure></p><p>格式就是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r 本地文件地址 ip地址: 要上传到服务器的目录</span><br></pre></td></tr></table></figure></p><p>注意：-r 参数要加上，表示递归上传，因为上传的是文件夹</p><p>上传完毕后，cd 到项目目录，执行<code>npm install</code>将依赖安装上，然后执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure></p><p>此时项目已经启动，可以看到是在3000端口启动的，我在浏览器中输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">39.108.161.158:3000</span><br></pre></td></tr></table></figure></p><p>就可以看到效果了。注意要换成你的服务器ip地址。</p><h2 id="使用pm2"><a href="#使用pm2" class="headerlink" title="使用pm2"></a>使用pm2</h2><p>如果使用node来启动程序，确实是可行的，但问题就是当你关掉终端时程序也关闭了，我们需要让服务器一直在执行这个服务，这样才能随时访问api，所以要使用pm2这样的工具来帮助我们管理服务。关于pm2更多的介绍可自行搜索。</p><h2 id="遇到的坑"><a href="#遇到的坑" class="headerlink" title="遇到的坑"></a>遇到的坑</h2><p>我开始用ip加端口访问服务器时被拒绝了，我以为是80端口的问题，可是经查看后，端口是正常的，之后网上各种搜还是找不到解决方法。最后才知道是防火墙没配置3000端口，要在服务器后台管理那里加上3000端口的访问权限。我是阿里云的服务器，其他的服务商平台找对应服务。</p><p>后续会尝试配置https。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近对 &lt;a href=&quot;https://github.com/Binaryify/NeteaseCloudMusicApi&quot; target
      
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
      <category term="服务器" scheme="http://yoursite.com/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>mongodb增删改查常用命令总结</title>
    <link href="http://yoursite.com/2018/08/22/mongodb/"/>
    <id>http://yoursite.com/2018/08/22/mongodb/</id>
    <published>2018-08-22T06:58:27.000Z</published>
    <updated>2018-08-22T07:23:44.701Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>去年我还折腾过mongodb，后来用不到也就没碰了，这就导致了我忘的一干二净，不得不感叹，编程这东西只要不用，就会忘没了。现在我想重拾mongodb，来总结一下常用命令，主要就是增删改查。</p><p>另外，关于mongodb数据的安装配置，我就不赘述了，推荐我之前写过的两篇博客：</p><ol><li><a href="https://www.cnblogs.com/wjaaron/p/7800490.html" target="_blank" rel="noopener">Windows下图文详解Mongodb安装及配置</a></li><li><a href="https://www.cnblogs.com/wjaaron/p/8094036.html" target="_blank" rel="noopener">Linux环境安装mongodb</a></li></ol><p>这是我的博客园文章，还是有人看的，哈哈，不像这里都没人看。</p><h2 id="启动数据库"><a href="#启动数据库" class="headerlink" title="启动数据库"></a>启动数据库</h2><p>如果你还不会，看完我上面推荐的就会了～<br>我自己目前的平台是mac，由于我是通过homebrew安装的，所以我的启动步骤是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew services start mongodb</span><br><span class="line"></span><br><span class="line">mongo</span><br></pre></td></tr></table></figure></p><p>启动后打开<a href="http://localhost:27017/" target="_blank" rel="noopener">http://localhost:27017/</a></p><p>当你在浏览器页面看到下面这句，就说明启动成功了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">It looks like you are trying to access MongoDB over HTTP on the native driver port.</span><br></pre></td></tr></table></figure></p><p>更多安装教程可以自行搜索，接下来我们就来看看一些常用命令。</p><h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>创建之前，我们看看当前有哪些数据库，使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show dbs</span><br></pre></td></tr></table></figure></p><p>接下来创建一个新的数据库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 使用这个数据库，没有则会创建</span><br><span class="line">use test</span><br><span class="line"></span><br><span class="line">// 此时还没有创建成功，只有在其中创建一个集合时，这个新数据库才会创建成功</span><br><span class="line">db.user.insert(&#123;&quot;name&quot;:&quot;wj&quot;,&quot;age&quot;:18&#125;)</span><br><span class="line"></span><br><span class="line">// 上面命令在test数据库里新建了一个user集合，并插入了数据，此时再执行show dbs ，已经有了test数据库</span><br></pre></td></tr></table></figure></p><h2 id="插入（增加）数据"><a href="#插入（增加）数据" class="headerlink" title="插入（增加）数据"></a>插入（增加）数据</h2><p>前面已经提及了，格式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.insert(&#123;&quot;name&quot;:&quot;wj&quot;&#125;)</span><br></pre></td></tr></table></figure></p><p>注意在使用这条命令前，要切换到对应数据库，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use test</span><br></pre></td></tr></table></figure></p><p>这样新增的集合就在这个数据库下，可以使用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show collections</span><br></pre></td></tr></table></figure></p><p>来查看当前数据库下有哪些集合</p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><ol><li><p>删除当前数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.dropDatabase()</span><br></pre></td></tr></table></figure></li><li><p>删除集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.drop()</span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.集合名.remove(条件)</span><br><span class="line"></span><br><span class="line">// 比如要删除user集合下name为wj的数据，则</span><br><span class="line">db.user.remove(&#123;&quot;name&quot;:&quot;wj&quot;&#125;)</span><br></pre></td></tr></table></figure></li></ol><h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><p>修改前要按条件查找的，例如我要把名为小明的同学的年龄修改为3岁，那么命令如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.user.update(&#123;&quot;name&quot;:&quot;小明&quot;&#125;, &#123;$set:&#123;&quot;age&quot;:3&#125;&#125;)</span><br><span class="line"></span><br><span class="line">// 上面命令的格式</span><br><span class="line">db.集合名.update(&#123;条件&#125;, &#123;$set:&#123;修改的值&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>注意花括号不要写错，另外加上<code>$set</code>是修改，如果不加的话，就是后面的替换前面的，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 修改前</span><br><span class="line">&#123; &quot;name&quot;:&quot;小明&quot;&#125;</span><br><span class="line"></span><br><span class="line">// 修改</span><br><span class="line">db.user.update(&#123;&quot;name&quot;:&quot;小明&quot;&#125;,&#123;&quot;age&quot;:20&#125;)</span><br><span class="line"></span><br><span class="line">// 修改后</span><br><span class="line">&#123; &quot;age&quot;:20&#125;</span><br></pre></td></tr></table></figure></p><p>默认情况下，只会修改满足条件的第一条数据，如果希望修改所有满足条件的数据，加上<code>{multi:true}</code>，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.update(&#123;&quot;sex&quot;:&quot;男&quot;&#125;, &#123;$set:&#123;&quot;age&quot;:30&#125;&#125;, &#123;multi:true&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>关于查询的方式就比较多啦。</p><ol><li><p>查询集合下所有数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find()  //user是集合名</span><br></pre></td></tr></table></figure></li><li><p>查询 age == 20 的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find(&#123;&quot;age&quot;:20&#125;)</span><br></pre></td></tr></table></figure></li><li><p>查询 age &gt; 20 的数据 （大于）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find(&#123;&quot;age&quot;:&#123;$gt:20&#125;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>查询 age &lt; 20 的数据 （小于）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find(&#123;&quot;age&quot;:&#123;$lt:20&#125;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>查询 age &gt;= 30 的数据 （大于或等于）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find(&#123;&quot;age&quot;:&#123;$gte:20&#125;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>查询 age &lt;= 30 的数据 （小于或等于）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find(&#123;&quot;age&quot;:&#123;$lte:20&#125;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>查询 age &gt;= 20 并且 age &lt;= 30 的数据 （且）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find(&#123;&quot;age&quot;:&#123;$gte:20,$lte:30&#125;&#125;)</span><br></pre></td></tr></table></figure></li><li><p>查询 name 中包含 wj 的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find(&#123;&quot;name&quot;:/wj/&#125;)</span><br></pre></td></tr></table></figure></li><li><p>查询 name 中以 w 开头的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find(&#123;&quot;name&quot;:/^w/&#125;)</span><br></pre></td></tr></table></figure></li><li><p>查询指定列的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 只查看name列</span><br><span class="line">db.user.find(&#123;&#125;,&#123;&quot;name&quot;:1&#125;)</span><br><span class="line">   </span><br><span class="line">// 只查看age列</span><br><span class="line">db.user.find(&#123;&#125;,&#123;&quot;age&quot;:1&#125;)</span><br><span class="line">   </span><br><span class="line">// 只查看name和age列</span><br><span class="line">db.user.find(&#123;&#125;,&#123;&quot;name&quot;:1,&quot;age&quot;:1&#125;)</span><br></pre></td></tr></table></figure></li><li><p>查询指定列的数据，带条件（age &gt; 20）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find(&#123;&quot;age&quot;:&#123;$gt:20&#125;&#125;,&#123;&quot;name&quot;:1,&quot;age&quot;:1&#125;)</span><br></pre></td></tr></table></figure></li><li><p>排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 按照年龄来排序</span><br><span class="line"></span><br><span class="line">db.user.find().sort(&#123;&quot;age&quot;:1&#125;)  // 升序</span><br><span class="line"></span><br><span class="line">db.user.find().sort(&#123;&quot;age&quot;:-1&#125;)  // 降序</span><br></pre></td></tr></table></figure></li><li><p>多条件查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.user.find(&#123;&quot;name&quot;:&quot;wj&quot;,&quot;age&quot;:20&#125;)</span><br><span class="line"></span><br><span class="line">// 应该好理解，查询同时满足这两个条件的数据，前面忘记说了</span><br></pre></td></tr></table></figure></li><li><p>查询前三条数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find().limit(3)</span><br></pre></td></tr></table></figure></li><li><p>查询五条之后的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.user.find().skip(5)</span><br><span class="line"></span><br><span class="line">// 好理解，跳过前5条，显示的就是五条之后的数据</span><br></pre></td></tr></table></figure></li><li><p>查询 5-10 之间的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find().skip(5).limit(5)</span><br></pre></td></tr></table></figure></li><li><p>或 查询</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.user.find(&#123;$or:[&#123;&quot;age&quot;:20&#125;,&#123;&quot;age&quot;:30&#125;]&#125;)</span><br></pre></td></tr></table></figure></li><li><p>查询第一条数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.user.findOne()</span><br><span class="line"></span><br><span class="line">//这样也可以哦</span><br><span class="line">db.user.find().limit(1)</span><br></pre></td></tr></table></figure></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我将遇到的增删改查命令都总结出来了，可能还有漏掉的，如果有人可以告诉我，那最好不过了。不过上面列出的基本够用了，如果上面的哪条命令不可实现，请注意符号是否写对，尤其是花括号的书写。如果真是我的错误，谁能告诉我一声呢？可惜，这里没人看啊。。。。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;去年我还折腾过mongodb，后来用不到也就没碰了，这就导致了我忘的一干二净，不得不感叹，编程这东西只要不用，就会忘没了。现在我想重拾mon
      
    
    </summary>
    
      <category term="mongodb" scheme="http://yoursite.com/categories/mongodb/"/>
    
    
      <category term="mongodb" scheme="http://yoursite.com/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客迁移到另一台电脑</title>
    <link href="http://yoursite.com/2018/08/17/move-hexo/"/>
    <id>http://yoursite.com/2018/08/17/move-hexo/</id>
    <published>2018-08-17T15:53:16.000Z</published>
    <updated>2018-08-22T02:40:58.940Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>感觉好久没更新博客了，最近换了台新电脑，开心的同时就是要把一些数据做迁移了，其中最惦记的就是hexo博客怎么迁移，参考了网上的一些文章后，终于成功迁移，现在就把过程记录下，很简单的。</p><h2 id="复制原电脑上的数据"><a href="#复制原电脑上的数据" class="headerlink" title="复制原电脑上的数据"></a>复制原电脑上的数据</h2><p>复制旧电脑上的hexo数据，注意不用全部复制，只需复制以下几个：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_config.yml</span><br><span class="line">package.json</span><br><span class="line">scaffolds/</span><br><span class="line">source/</span><br><span class="line">themes/</span><br></pre></td></tr></table></figure></p><p>把这些文件复制到新电脑上的新建文件夹里，如：hexo文件夹</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>新电脑上需先安装有node环境</li><li><p>全局安装hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// mac环境</span><br><span class="line">sudo npm install -g hexo</span><br></pre></td></tr></table></figure></li><li><p>进入hexo目录，依次执行以下安装命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure></li><li><p>检查：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>此时可访问浏览器：<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 就可以看到博客了。整个过程还是很简单的，不确定是否所有情况都可以成功，但可一试。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;感觉好久没更新博客了，最近换了台新电脑，开心的同时就是要把一些数据做迁移了，其中最惦记的就是hexo博客怎么迁移，参考了网上的一些文章后，终
      
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>了解react中的虚拟DOM</title>
    <link href="http://yoursite.com/2018/07/12/react08/"/>
    <id>http://yoursite.com/2018/07/12/react08/</id>
    <published>2018-07-12T10:15:49.000Z</published>
    <updated>2018-11-13T15:37:47.531Z</updated>
    
    <content type="html"><![CDATA[<p>在我学习vue框架的时候，就时常听到虚拟DOM的概念，后来了解到vue2.0新增了虚拟DOM，那时我并不知道这会有什么意义，因为我只想关心怎么使用框架。时至今日，我在学习react，在网上浏览react相关文章的时候，虚拟DOM这一词汇也是被时常提及，可能是因为react框架是使用虚拟DOM的先行者吧。于是我就花了一些时间，简单地了解了一下，如果不去追究代码的实现，我也可以简单说说我的理解。</p><h2 id="为什么需要虚拟DOM？"><a href="#为什么需要虚拟DOM？" class="headerlink" title="为什么需要虚拟DOM？"></a>为什么需要虚拟DOM？</h2><p>可能本来我应该先说说什么是虚拟DOM，但这其实没啥可说的，我们就可以把它定义为js对象，但真要说起来可能也有很多东西可以说，关于这个网上已有一大堆好文，我就不去照搬了。我就想说说为啥需要虚拟DOM？其实很多像我这样的人可能不了解虚拟DOM，但是我们却知道它可以提高性能，那么它到底是怎么提高性能呢？</p><h3 id="设计一个框架"><a href="#设计一个框架" class="headerlink" title="设计一个框架"></a>设计一个框架</h3><p>在这里，我不写代码，我们来假设一下，如果我们自己来实现一个react框架，那么我们会怎么来实现？好吧，我们先借鉴一下react框架，来理个思路：</p><ol><li>state（数据层），本着不直接操作DOM而是操作数据的原则，我们会有一个数据存放的地方；</li><li>jsx（模板），模板最终会生成DOM结构用于展示，其实jsx语法实现的内容就相当于模板；</li><li>数据 + 模板 结合，生成DOM结构，用于显示；</li><li>state数据发生变化；</li><li>数据 + 模板 结合，生成新的DOM结构，并替换掉原先的DOM结构。</li></ol><p>按照上面这五个步骤去设计我们的框架，这完全是没有大问题的。功能是可以实现了，但缺点也是很明显的，很多时候页面只会变化一小部分，如果每次变化都要重新渲染整个DOM结构，这显然大大消耗了性能。要知道我们在使用js时都是尽量避免直接操作DOM的，所以我们需要尝试改进。</p><h3 id="改进框架"><a href="#改进框架" class="headerlink" title="改进框架"></a>改进框架</h3><p>我们知道上面步骤中需要改进的地方就是最后一步，我们不应该在数据变化时替换掉整个DOM结构，而是替换需要更改的地方，于是我们可以按如下步骤实现：</p><ol><li>state（数据层），本着不直接操作DOM而是操作数据的原则，我们会有一个数据存放的地方；</li><li>jsx（模板），模板最终会生成DOM结构用于展示，其实jsx语法实现的内容就相当于模板；</li><li>数据 + 模板 结合，生成DOM结构，用于显示；</li><li>state数据发生变化；</li><li>数据 + 模板 结合，生成新的DOM结构，不直接替换原先的DOM结构；</li><li>新的DOM和原始DOM作对比，找出差异部分；</li><li>找到差异的部分后，只替换需要变化的DOM结构；</li></ol><p>上面的步骤，前四步还和以前一样，到了第五步时，我们先不直接替换整个DOM，而是在接下来比较新旧DOM，找到需要变更的地方，然后实现部分更新替换。现在，我们解决了这个整体替换DOM结构的大隐患，实现了局部更新，这听起来似乎性能嗖嗖的上去了。然鹅~聪明的你一定发现了，这里面有一个步骤似乎并不讨喜，那就是第六步，新旧DOM做对比。对比啥？是在对比DOM结构啊！这也是相当消耗性能的。搞了半天，其实性能并没有提升多少，说不定还下降了。所以，我们还需要改进！</p><h3 id="虚拟DOM的引入"><a href="#虚拟DOM的引入" class="headerlink" title="虚拟DOM的引入"></a>虚拟DOM的引入</h3><p>吁~终于扯到虚拟DOM上了，没错，接下来我们就加入虚拟DOM的概念来改进我们的框架。还记得我上面开始说的嘛，虚拟DOM你可以理解为就是一个js对象，不过这个对象里保存了DOM信息，我们一步一步看。</p><p>首先，前两步我们总是需要的：</p><ol><li>state（数据层）；</li><li>jsx（模板）；</li></ol><p>接下来，我们要结合数据和模板，但是这次我们先不直接生成DOM结构，而是生成虚拟DOM：</p><ol start="3"><li><p>数据 + 模板 生成虚拟DOM （虚拟DOM是js对象，用来描述真实DOM信息），如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[&apos;div&apos;,&#123;id:&apos;root&apos;&#125;,[&apos;span&apos;,&#123;&#125;,&apos;hello world&apos;]]</span><br><span class="line"></span><br><span class="line">//上面对象所描述的信息就是：&lt;div id=&quot;root&quot;&gt; &lt;span&gt;hello world&lt;/span&gt; &lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>用虚拟DOM结构生成真实的DOM结构，来显示，即</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;root&quot;&gt; &lt;span&gt;hello world&lt;/span&gt; &lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>state发生变化；</p></li><li><p>数据 + 模板 生成新的虚拟DOM，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[&apos;div&apos;,&#123;id:&apos;root&apos;&#125;,[&apos;span&apos;,&#123;&#125;,&apos;hi&apos;]]</span><br><span class="line"></span><br><span class="line">//hello world 变成 hi</span><br></pre></td></tr></table></figure></li><li><p>比较原始虚拟DOM和新的虚拟DOM，区别就是span中内容的变更；</p></li><li>直接改变DOM中span中的内容。</li></ol><p>看到这，我想你对虚拟DOM有了大概的了解了。查看上面步骤，你可能也会疑问，生成虚拟DOM这里不会消耗性能吗？其实肯定会消耗一些性能的，但相比较直接生成真实DOM结构，肯定是大大降低消耗的，而且后面的对比差异就是直接对比js对象，不涉及DOM操作，这里也是大大提升了效率的。</p><p>以上就是我对虚拟DOM的简单理解，一些地方可能说的不太对，但我的意思应该是明显的吧，嘿嘿~</p><p>最近在忙找新工作的事，其实也不忙。虽然收到几个offer，但不是自己喜欢的，哎，大家还是对应届生的能力有所怀疑啊，我表示无力，只能说我能力还是不足啊。多学学，继续加油。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在我学习vue框架的时候，就时常听到虚拟DOM的概念，后来了解到vue2.0新增了虚拟DOM，那时我并不知道这会有什么意义，因为我只想关心怎么使用框架。时至今日，我在学习react，在网上浏览react相关文章的时候，虚拟DOM这一词汇也是被时常提及，可能是因为react框
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>redux体验</title>
    <link href="http://yoursite.com/2018/06/18/react07/"/>
    <id>http://yoursite.com/2018/06/18/react07/</id>
    <published>2018-06-18T08:01:45.000Z</published>
    <updated>2018-07-12T10:16:44.200Z</updated>
    
    <content type="html"><![CDATA[<p>在网上看过不少资料文档后，确认redux基础概念并不是想象中的难，为啥这么说呢，因为在我还没接触react时就到处听人说redux很难，所以我一直以为它很难上手。但在实际接触后，发现基本的概念并不难，甚至比当初刚接触vuex时更简单。当然了，难的我也还没接触到，现在只说最基础的。</p><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><p>关于redux的概念其实我也讲不好的，为了好理解，我尽量用自己的话描述下，到底对不对，说不好~</p><ul><li><p>store：可以看成是一个容器，保存数据的地方，要注意的是，整个应用只能有一个 Store</p></li><li><p>state：包含具体的数据，通过store.getState()可以拿到当前的数据，并且一个 State 对应一个 View</p></li><li><p>action：state的变化会导致view的更新，页面中我们是不能直接接触state的，应该是触发view才能导致state变化，可以理解为action就是view发出的通知，表示state要变化了</p></li><li><p>reducer：在发出action通知后，要更新state了，这个更新state的过程就是reducer，它是一个函数，接收action和state作为参数，对应更新state</p></li></ul><p>我知道，刚来就看这么多概念是没用的，可以结合下面说的例子慢慢看。</p><h2 id="感受一下redux"><a href="#感受一下redux" class="headerlink" title="感受一下redux"></a>感受一下redux</h2><p>通常人们都把redux和react在一起说，但事实上这两个是解耦的，redux不一定要用在react应用上。为了演示方便，我们还是使用<code>create-react-app</code>脚手架，不过开始时，我们不结合react，而是单独看看它的使用。</p><p>将脚手架<code>src</code>目录下的所有文件全删除，新建一个index.js文件，写入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 引入createStore，用以创建store</span><br><span class="line">import &#123;createStore&#125; from &apos;redux&apos;</span><br><span class="line"></span><br><span class="line">// 创建reducer</span><br><span class="line">function reducer(state=0, action)&#123;</span><br><span class="line">   switch(action.type)&#123;</span><br><span class="line">       case &apos;ADD&apos;:</span><br><span class="line">         return state+1</span><br><span class="line">       case &apos;REMOVE&apos;:</span><br><span class="line">         return state-1</span><br><span class="line">       default:</span><br><span class="line">         return 10</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 新建store</span><br><span class="line">const store = createStore(reducer)</span><br><span class="line"></span><br><span class="line">//查看当前state</span><br><span class="line">console.log(store.getState())</span><br></pre></td></tr></table></figure></p><p>当你敲完这些代码，运行后，可以在控制台看到输出了10。我们来一行行看。</p><p>首先，引入了createStore，只看名字我们也知道了，是用来创建store的，它是一个函数，传入reducer作为参数即可创建出store。</p><p>再来看reducer函数，它并不是一定要以reducer作为函数名的，你可以自定义。它有两个参数，一个是state，它就是包含具体数据的，可以初始化为0，它可以是字符串，对象等多种类型。第二个参数action是view层传过来的，它包含通知信息，保存在type属性中，它的type属性值也是我们自己定义的，根据传来的信息进行不同的state更新。上面代码还没涉及到action的分发，后面再说。</p><p>接下来，就是把新建的reducer作为参数传入到createStore中，从而创建store了，store中的getState方法可以拿到当前state。输出的结果是10，因为我们并没有发送action来提示更新state，所以默认返回了10，这些看代码也很好理解。那么接下来，我们尝试发送一次更新需求：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 发送ADD需求</span><br><span class="line">store.dispatch(&#123;type:&apos;ADD&apos;&#125;)</span><br><span class="line"></span><br><span class="line">// 再查看当前state</span><br><span class="line">console.log(store.getState())</span><br></pre></td></tr></table></figure></p><p>结合reducer的代码，也可以明白现在打印的就是11了，action就是通过dispatch发送的，它本质上就是一个对象，一般type属性必写，之后也可以自定义其他属性。好了，现在redux的基本概念已经走了一遍，当然实际中不可能这么简单，这里只做演示。接下来，我们结合react再来写一个实际的小例子。</p><h2 id="简单计数器"><a href="#简单计数器" class="headerlink" title="简单计数器"></a>简单计数器</h2><p>结合react来做一个简单的计数器吧，把index.js文件改成如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;</span><br><span class="line">import ReactDOM from &apos;react-dom&apos;</span><br><span class="line">import &#123;createStore&#125; from &apos;redux&apos;</span><br><span class="line">import reducer from &apos;./reducer.js&apos;</span><br><span class="line"></span><br><span class="line">const store = createStore(reducer)</span><br><span class="line"></span><br><span class="line">class App extends React.Component&#123;</span><br><span class="line">    remove()&#123;</span><br><span class="line">        store.dispatch(&#123;</span><br><span class="line">            type:&apos;REMOVE&apos;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    add()&#123;</span><br><span class="line">        store.dispatch(&#123;</span><br><span class="line">            type:&apos;ADD&apos;,</span><br><span class="line">            text:2</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">              &lt;input type=&quot;button&quot; value=&quot;-&quot; onClick=&#123;this.remove.bind(this)&#125;/&gt;</span><br><span class="line">              &lt;span&gt;&#123;store.getState()&#125;&lt;/span&gt;</span><br><span class="line">              &lt;input type=&quot;button&quot; value=&quot;+&quot; onClick=&#123;this.add.bind(this)&#125;/&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;App/&gt;,document.getElementById(&apos;root&apos;))</span><br></pre></td></tr></table></figure></p><p>上面代码也没有啥可说的，都看得懂，注意的是我在add函数中的action里多加了一个text属性，这个属性也是能被传到reducer里的，可以用于state的计算。</p><p>再来新建一个reducer.js文件，用来写reducer文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">export default function reducer(state=0,action)&#123;</span><br><span class="line">    switch(action.type)&#123;</span><br><span class="line">      case &apos;ADD&apos;:</span><br><span class="line">        return state + action.text</span><br><span class="line">      case &apos;REMOVE&apos;:</span><br><span class="line">        return state - 1</span><br><span class="line">      default:</span><br><span class="line">        return state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在运行浏览器，可以看到页面效果了，但点击按钮时，你会发现数字并没有增加，打开控制台，也没有报错。这是什么原因呢？</p><p>原因是在于没有监听state的变化，view是不会自动更新state的，我们需要手动监听state的变化，这时我们需要<code>store.subscribe</code>这个方法，Store 允许使用store.subscribe方法设置监听函数，一旦 State 发生变化，就自动执行这个函数。那么想一想，我们监听谁呢？</p><p>其实监听的方式不止一种，在这里有一种比较好理解的。每当state变化时，监听函数就会自动执行，那我们让组件重新渲染不就行了，重新渲染的组件一定是最新的state，所以我们可以将index.js文件的最后改造一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function render()&#123;</span><br><span class="line">    ReactDOM.render(&lt;App/&gt;,document.getElementById(&apos;root&apos;))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render()</span><br><span class="line"></span><br><span class="line">store.subscribe(render)</span><br></pre></td></tr></table></figure><p>这时，我们就可以在页面中执行数字的加减了。注意到，当点击加时，会加2个数，是因为执行加的时候，是加上了<code>action.text</code>，参考代码。</p><p>好了，redux的基本使用就这些了，一些更高级的用法以后再说。（其实看我懒不懒了~）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在网上看过不少资料文档后，确认redux基础概念并不是想象中的难，为啥这么说呢，因为在我还没接触react时就到处听人说redux很难，所以我一直以为它很难上手。但在实际接触后，发现基本的概念并不难，甚至比当初刚接触vuex时更简单。当然了，难的我也还没接触到，现在只说最基
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="Redux" scheme="http://yoursite.com/tags/Redux/"/>
    
  </entry>
  
  <entry>
    <title>react路由</title>
    <link href="http://yoursite.com/2018/06/14/react06/"/>
    <id>http://yoursite.com/2018/06/14/react06/</id>
    <published>2018-06-14T14:27:52.000Z</published>
    <updated>2018-06-18T08:06:28.617Z</updated>
    
    <content type="html"><![CDATA[<p>react与vue一样，做SPA就要用到路由功能。我们做WEB端路由，需要用到的是<code>react-router-dom</code>这个库，它帮助我们实现react路由功能。另外，为了方便起见，代码演示使用react脚手架<code>create-react-app</code>。关于脚手架的使用可自己搜索。废话不多说，直接撸~</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>首先我修改下脚手架，将<code>/src/index.js</code>入口文件清空，用来写我们的演示代码，将<code>/public/index.html</code>模板文件删掉不必要的干扰代码，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;theme-color&quot; content=&quot;#000000&quot;&gt;</span><br><span class="line">    &lt;title&gt;React App&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>切换到index.js文件，首先引入我们需要的模块：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import ReactDOM from &apos;react-dom&apos;;</span><br><span class="line">import &#123;BrowserRouter as Router, Route, Link&#125; from &apos;react-router-dom&apos;</span><br></pre></td></tr></table></figure></p><p>前两个不必多说了，而第三个就是我们要用到的路由库，在引入前别忘记下载了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save react-router-dom</span><br></pre></td></tr></table></figure></p><p>我们在<code>react-router-dom</code>中引入了三个东西，其中，Router是容器，它里面就包含了我们的路由内容，Route是定义真正路由组件的，而Link就是定义切换链接的，类似vue中的<code>router-link</code>，简单使用如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// 首页组件</span><br><span class="line">const Home = () =&gt; (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;这是首页&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 用户页组件</span><br><span class="line">const User = () =&gt; (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;这是用户页&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;Router&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line"></span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">              &lt;li&gt;&lt;Link to=&quot;/home&quot;&gt;首页&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">              &lt;li&gt;&lt;Link to=&quot;/user&quot;&gt;用户页&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">          &lt;Route path=&quot;/home&quot; component=&#123;Home&#125;&gt;&lt;/Route&gt;</span><br><span class="line">          &lt;Route path=&quot;/user&quot; component=&#123;User&#125;&gt;&lt;/Route&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        </span><br><span class="line">    &lt;/Router&gt;, document.getElementById(&apos;root&apos;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>代码中也可以看到，<code>Router</code>起到容器作用，其本身也是一个组件，需要注意的是，Router下只能有一个根元素，这里即<code>div</code>。先看<code>Link</code>，它有一<code>to</code>属性，很明显代表的是要链接的地址，再看<code>Route</code>，它的<code>path</code>属性表明路由的路径，与<code>Link</code>的<code>to</code>属性值要对应起来，而component属性指出当前路径所对应的界面（其本质就是对应到一个组件，当链接到当前路径后，展示组件内容）。</p><p>怎么样，react路由是不是很简单？其实刚接触时，我有点不习惯这种写法，毕竟受vue影响大了，哈哈~不过当我再写一遍时，我觉得react的路由上手更简单点，至少很直观 ，也许当初我先学react的话，会对vue的路由更不习惯。</p><h2 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h2><p>如果说当初刚学vue路由时，我可能不知道怎么定义嵌套路由，但是现在初学react路由时，我自己按着想法，却也把嵌套路由搞出来了，一切也是因为它很直观。因为react路由也是组件形式，那么我在父路由组件里，再写一个子路由不就行了嘛，形式都是一样的，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// xiaoming</span><br><span class="line">const Xiaoming = () =&gt; (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        我是小明</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// xiaohong</span><br><span class="line">const Xiaohong = () =&gt; (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        我是小红</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 用户页组件</span><br><span class="line">const User = () =&gt; (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;这是用户页&lt;/h1&gt;</span><br><span class="line">        </span><br><span class="line">        &lt;Router&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                  &lt;li&gt;&lt;Link to=&quot;/user/xiaoming&quot;&gt;小明&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">                  &lt;li&gt;&lt;Link to=&quot;/user/xiaohong&quot;&gt;小红&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">                &lt;Route path=&quot;/user/xiaoming&quot; component=&#123;Xiaoming&#125;&gt;&lt;/Route&gt;</span><br><span class="line">                &lt;Route path=&quot;/user/xiaohong&quot; component=&#123;Xiaohong&#125;&gt;&lt;/Route&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/Router&gt; </span><br><span class="line">          </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>如上，我在<code>/user</code>路由组件里，再写了两个子路由，形式和父路由完全一样，这样就完成了嵌套路由的实现，同理也可继续嵌套下去。而嵌套路由在vue里的实现是配置children，很明显刚学时，我肯定是不知道是要配置children的。不过用这么久vue了，我还是很喜欢vue这个框架的，也习惯了它的设计思想，而react让我看到了不同的设计思想。我相信存在即合理，这两种模式我都喜欢，哈哈又扯多了。</p><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p>react的动态路由匹配与vue的基本类似，也是以冒号开头加参数。我们将上述例子中的<code>user</code>子路由修改下，我们不明确指向是<code>xiaoming</code>还是<code>xiaohong</code>，而是使用动态路由来自动识别，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">const Person = () =&gt; (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        // ....</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">&lt;Route path=&quot;/user/:name&quot; component=&#123;Person&#125; &gt;&lt;/Route&gt;</span><br></pre></td></tr></table></figure></p><p>现在，我要求输入不同的name时，浏览器会显示不同的内容。其实关键就是<code>Person</code>组件该怎么写了，再进一步就是怎么拿到name的值了，这时候我们也会想到react应该会替我们做好这些的。其实，name参数值会被传入到Person组件里，存在props里，而函数定义的组件中，props是以参数形式传进去的。我们可以打印props就会知道name值存在<code>props.match.params</code>中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const Person = (props) =&gt; (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &#123;props.match.params.name&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>知道了怎么获得动态参数，我们就把这个例子完善好：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">const Person = (props) =&gt; &#123;</span><br><span class="line">    if(props.match.params.name === &apos;xiaoming&apos;)&#123;</span><br><span class="line">        var a = &apos;我是小明&apos;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        var a = &apos;我是小红&apos;</span><br><span class="line">    &#125;</span><br><span class="line">    return (</span><br><span class="line">        &lt;div&gt;&#123;a&#125;&lt;/div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">// 用户页组件</span><br><span class="line">const User = () =&gt; (</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1&gt;这是用户页&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Router&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                  &lt;li&gt;&lt;Link to=&quot;/user/xiaoming&quot;&gt;小明&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">                  &lt;li&gt;&lt;Link to=&quot;/user/xiaohong&quot;&gt;小红&lt;/Link&gt;&lt;/li&gt;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">                &lt;Route path=&quot;/user/:name&quot; component=&#123;Person&#125; &gt;&lt;/Route&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/Router&gt; </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>上述代码的功能与之前写的一样，只是用动态路由来实现的。当然我这种写法是很 low的，实际开发中应该不会这么写，我只是把过程讲出来，方便理解。</p><p>react路由就先讲这么多了，我也实在讲不出花来~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;react与vue一样，做SPA就要用到路由功能。我们做WEB端路由，需要用到的是&lt;code&gt;react-router-dom&lt;/code&gt;这个库，它帮助我们实现react路由功能。另外，为了方便起见，代码演示使用react脚手架&lt;code&gt;create-react-app
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React React-Router" scheme="http://yoursite.com/tags/React-React-Router/"/>
    
  </entry>
  
  <entry>
    <title>react组件设置样式</title>
    <link href="http://yoursite.com/2018/06/03/react05/"/>
    <id>http://yoursite.com/2018/06/03/react05/</id>
    <published>2018-06-03T11:42:21.000Z</published>
    <updated>2018-06-03T11:43:52.147Z</updated>
    
    <content type="html"><![CDATA[<p>本篇主要介绍给组件设置样式时，准确说是给JSX里的标签设置样式时要注意的地方。</p><h2 id="class"><a href="#class" class="headerlink" title="class"></a>class</h2><p>当要给组件添加class时，不能直接写成class，应该写成className:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Demo extends React.Component&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return &lt;div className=&apos;div1&apos;&gt;&lt;/div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这主要因为class是JavaScript的保留字。而且JSX 的特性更接近 JavaScript 而不是 HTML , 所以 React DOM 使用 camelCase 小驼峰命名来定义属性的名称，而不是使用 HTML 的属性名称。</p><h2 id="style"><a href="#style" class="headerlink" title="style"></a>style</h2><p>除了通过添加class来设置样式外，我们也可以使用style内联样式。只不过这跟以往写的有些不同，你需要将样式内容用双花括号包起来，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Demo extends React.Component&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return &lt;div style=&#123;&#123;color:&apos;white&apos;,fontSize:&apos;16px&apos;&#125;&#125;&gt;&lt;/div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这跟vue里的mustache语法很像，也是双大括号，但是这里应该理解为一层花括号里包含一个对象，react将这个对象渲染为内联样式。另外你需要注意的是，遇到<code>font-size</code>这种的要写成小驼峰命名形式，不然会出错。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇主要介绍给组件设置样式时，准确说是给JSX里的标签设置样式时要注意的地方。&lt;/p&gt;
&lt;h2 id=&quot;class&quot;&gt;&lt;a href=&quot;#class&quot; class=&quot;headerlink&quot; title=&quot;class&quot;&gt;&lt;/a&gt;class&lt;/h2&gt;&lt;p&gt;当要给组件添加clas
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>react组件通信</title>
    <link href="http://yoursite.com/2018/06/01/react04/"/>
    <id>http://yoursite.com/2018/06/01/react04/</id>
    <published>2018-06-01T10:22:38.000Z</published>
    <updated>2018-06-01T10:27:07.563Z</updated>
    
    <content type="html"><![CDATA[<p>说到组件，那就不能不说组件通信。个人觉得相对于vue，react的通信比较容易理解。</p><h2 id="父组件向子组件通信"><a href="#父组件向子组件通信" class="headerlink" title="父组件向子组件通信"></a>父组件向子组件通信</h2><p>react是单向数据流，数据主要从父节点传递到子节点（通过props）。这种传递方式也是比较简单：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">class Son extends React.Component&#123;</span><br><span class="line">          render()&#123;</span><br><span class="line">              return &lt;div&gt;&#123;this.props.title&#125;&lt;/div&gt;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">// 父组件</span><br><span class="line">class Parent extends React.Component&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">      return &lt;Son title=&quot;我是父组件传给子组件的值&quot;/&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Parent/&gt;,app)</span><br></pre></td></tr></table></figure></p><h2 id="子组件向父组件通信"><a href="#子组件向父组件通信" class="headerlink" title="子组件向父组件通信"></a>子组件向父组件通信</h2><p>因为react是单向数据流，数据只能有父组件传递到子组件，所以要想从子组件更新父组件，需要一个取巧的方法，那就是利用回调函数，简单概述就是：<strong>父组件通过props传递一个回调函数到子组件中，这个回调函数可以更新父组件，子组件就是通过触发这个回调函数，从而使父组件得到更新</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line">    class Son extends React.Component&#123;</span><br><span class="line">        render()&#123;</span><br><span class="line">            return &lt;button onClick=&#123;this.props.handleChange&#125;&gt;点我可以改变父组件的状态值&lt;/button&gt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   // 父组件</span><br><span class="line">    class Parent extends React.Component&#123;</span><br><span class="line">        constructor()&#123;</span><br><span class="line">            super()</span><br><span class="line">            this.state=&#123;</span><br><span class="line">                val:0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        change()&#123;</span><br><span class="line">          let newVal = this.state.val + 1</span><br><span class="line">          this.setState(&#123;</span><br><span class="line">              val:newVal</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        render()&#123;</span><br><span class="line">            return &lt;div&gt;</span><br><span class="line">                     &lt;Son handleChange=&#123;this.change.bind(this)&#125;/&gt;</span><br><span class="line">                     &lt;p&gt;&#123;this.state.val&#125;&lt;/p&gt;</span><br><span class="line">                   &lt;/div&gt;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这次，父组件通过props传一个回调函数给子组件，子组件通过触发这个回调函数来更新父组件的状态。</p><p>除了这两种最普遍的通信外，还有其他情况的通信，比如兄弟组件等，这里先不说了，准备等我遇到了再说。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;说到组件，那就不能不说组件通信。个人觉得相对于vue，react的通信比较容易理解。&lt;/p&gt;
&lt;h2 id=&quot;父组件向子组件通信&quot;&gt;&lt;a href=&quot;#父组件向子组件通信&quot; class=&quot;headerlink&quot; title=&quot;父组件向子组件通信&quot;&gt;&lt;/a&gt;父组件向子组件通信
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>react事件</title>
    <link href="http://yoursite.com/2018/05/30/react03/"/>
    <id>http://yoursite.com/2018/05/30/react03/</id>
    <published>2018-05-30T14:25:35.000Z</published>
    <updated>2018-05-30T14:35:41.541Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h2><p>React 元素的事件处理和 DOM元素很相似，主要有两点不同：</p><ul><li>React事件绑定属性的命名采用驼峰式写法，而不是小写</li><li>如果采用 JSX 的语法你需要传入一个函数作为事件处理函数，而不是一个字符串(DOM元素的写法)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//DOM元素</span><br><span class="line">&lt;button onclick=&quot;test()&quot;&gt;&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//react</span><br><span class="line">&lt;button onClick=&#123;test&#125;&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure><p>写个小例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Demo extends React.Component&#123;</span><br><span class="line"></span><br><span class="line">         show()&#123;</span><br><span class="line">             alert(&apos;hello&apos;)</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">          render()&#123;</span><br><span class="line">              return &lt;button onClick=&#123;this.show&#125;&gt;点击&lt;/button&gt;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Demo/&gt;,app)</span><br></pre></td></tr></table></figure></p><p>上例中，当点击按钮时，调用 show函数，注意要用this调用，this指向组件本身。关于this，来单独说下。</p><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>我们来改变一下上面的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Demo extends React.Component&#123;</span><br><span class="line">       constructor()&#123;</span><br><span class="line">           super()</span><br><span class="line">           this.state = &#123;</span><br><span class="line">               val:0</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">        show()&#123;</span><br><span class="line">            this.setState(&#123;</span><br><span class="line">                val:this.state.val+1</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">         render()&#123;</span><br><span class="line">             return &lt;div&gt;</span><br><span class="line">                      &lt;button onClick=&#123;this.show&#125;&gt;点击&lt;/button&gt;</span><br><span class="line">                      &lt;p&gt;&#123;this.state.val&#125;&lt;/p&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>此例中，我们为组件添加状态，并显示在页面中，当点击按钮时，状态的数值加1。不过运行的结果可能不会如意，报一个错误：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">...Cannot read property &apos;setState&apos; of undefined</span><br></pre></td></tr></table></figure></p><p>提示setState未定义，为了验证，我们在show函数里打印一下this，结果显示时 undefined。到这里，其实我开始也是比较迷惑的，函数里的this指向undefined还是第一次见。</p><p>在查看文档后才知道，原来在react里，类的方法默认是不会绑定 this 的，也就是说我们必须手动绑定this。绑定到哪？我们的一切操作都是基于这个组件的，所以应该绑定到当前类上。怎么绑定？直接在JSX 回调函数上绑定，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;this.show.bind(this)&#125;&gt;点击&lt;/button&gt;</span><br></pre></td></tr></table></figure></p><p>这里的this还是指向当前类的，只是类的方法不会默认绑定this而已。</p><h2 id="默认行为和事件冒泡"><a href="#默认行为和事件冒泡" class="headerlink" title="默认行为和事件冒泡"></a>默认行为和事件冒泡</h2><p>说到事件，就不得不说默认行为和事件冒泡，因这两点在react里也有些不同。</p><h3 id="取消默认行为"><a href="#取消默认行为" class="headerlink" title="取消默认行为"></a>取消默认行为</h3><p>在react里，必须明确的使用 preventDefault来取消默认行为，像<code>return false</code>是没用的。</p><p>写个例子，阻止a标签的跳转：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">handleClick(e)&#123;</span><br><span class="line">        e.preventDefault()</span><br><span class="line">        console.log(&apos;hello&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line">  return &lt;a href=&quot;https://www.baidu.com&quot; onClick=&#123;this.handleClick&#125;&gt;点击&lt;/a&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p>在react里，使用e.stopPropagation()阻止事件冒泡可能会没效，因为这里的冒泡分为三种情况，情况不同方法也不同，在这里我找到一篇文章，说的很详细，我就不多啰嗦了，其实是偷懒，哈哈~<br><a href="https://zhuanlan.zhihu.com/p/26742034" target="_blank" rel="noopener">传送门</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;事件处理&quot;&gt;&lt;a href=&quot;#事件处理&quot; class=&quot;headerlink&quot; title=&quot;事件处理&quot;&gt;&lt;/a&gt;事件处理&lt;/h2&gt;&lt;p&gt;React 元素的事件处理和 DOM元素很相似，主要有两点不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;React事件绑定属性的命名采用
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>react组件</title>
    <link href="http://yoursite.com/2018/05/29/react02/"/>
    <id>http://yoursite.com/2018/05/29/react02/</id>
    <published>2018-05-29T05:02:58.000Z</published>
    <updated>2018-11-13T15:30:23.002Z</updated>
    
    <content type="html"><![CDATA[<p>学习react应该就是学习它的组件化开发了，看看它和vue的组件相比有何不同？</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>react组件有两种，分别是函数定义和类定义。 </p><h3 id="函数定义组件"><a href="#函数定义组件" class="headerlink" title="函数定义组件"></a>函数定义组件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function Demo()&#123;</span><br><span class="line">    return &lt;h1&gt;hello world&lt;/h1&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码就创建了一个有效的组件，它是用函数返回了一个React元素，这种类型的组件为函数定义组件，我们可以正常使用它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">   &lt;Demo/&gt;,</span><br><span class="line">   app</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>记住ReactDOM.render()的第一个参数是要渲染的内容，组件不就是要展示的内容吗？只是组件的使用应写成标签形式，这点应该很熟悉，跟vue的一样。</p><p>这里有一个特别需要注意的地方，那就是<strong>组件名称必须以大写字母开头</strong>，不然无法渲染。</p><p>看到上面的代码，不知道你会不会有一种想法，一种下意识的想法，看代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function Demo()&#123;</span><br><span class="line">    return &lt;h1&gt;hello world&lt;/h1&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(Demo(),app)</span><br></pre></td></tr></table></figure></p><p>看到了吗？我不把Demo写成标签形式，而是直接调用了，结果依然正确渲染了。细想下，这本该如此啊，因为函数返回的是JSX啊，这与直接写JSX并没有本事区别。此时，你要是把函数名写成小写也不会有影响了，因为它已经不是一个组件了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function demo()&#123;</span><br><span class="line">    return &lt;h1&gt;hello world&lt;/h1&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(demo(),app)</span><br></pre></td></tr></table></figure></p><h3 id="类定义组件"><a href="#类定义组件" class="headerlink" title="类定义组件"></a>类定义组件</h3><p>相对于函数定义组件，类定义组件才是最常用的，因为它允许我们更多的扩展。</p><p>类定义组件，其实就是es6中定义类的方法，只是react加入了一些东西：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Demo extends React.Component&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        return &lt;h1&gt;hello world&lt;/h1&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Demo/&gt;,app)</span><br></pre></td></tr></table></figure></p><p>上面就是类定义组件，熟悉es6的话，应该比较熟悉这种形式，在定义一个组件时，我们必须让它继承React.Component这个类，这样才能使用react的一些功能。</p><p>关于类定义组件，要讲得东西其实还是有几个的，在这之前，我们要了解两个和组件息息相关的概念：属性和状态。</p><h2 id="组件的属性和状态"><a href="#组件的属性和状态" class="headerlink" title="组件的属性和状态"></a>组件的属性和状态</h2><p>组件有属性和状态，分别表示为props和state，它们的区别：</p><ul><li>属性是由父组件传递给子组件的</li><li>状态是子组件内部维护的数据，当状态发生变化的同时，组件也会进行更新。当状态发生转换时会触发不同的钩子函数，从而让开发者有机会做出相应</li></ul><h3 id="属性（props）"><a href="#属性（props）" class="headerlink" title="属性（props）"></a>属性（props）</h3><p>属性是写在父组件上的，可以传递给子组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function Demo(props)&#123;</span><br><span class="line">    return &lt;h1&gt;&#123;props.msg&#125;&lt;/h1&gt;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(&lt;Demo msg=&apos;hello world&apos;/&gt;,app)</span><br></pre></td></tr></table></figure></p><p>上面是函数定义组件的属性传递写法，Demo函数接收一个单一的“props”对象，这里包含了所有的父组件的属性，我们多写几个属性，打印props看看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function Demo(props)&#123;</span><br><span class="line">   console.log(props)</span><br><span class="line">    return &lt;h1&gt;&#123;props.msg&#125;&lt;/h1&gt;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(&lt;Demo msg=&apos;hello world&apos; name=&apos;wj&apos; age=&apos;18&apos;/&gt;,app)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//props打印结果</span><br><span class="line">&#123;</span><br><span class="line">age:&quot;18&quot;,</span><br><span class="line">msg:&quot;hello world&quot;,</span><br><span class="line">name:&quot;wj&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要注意的是，在react里要输出数据到模板里，用一个花括号即可，在vue里是两个花括号。</p><p>属性不仅仅可以是字符串，还可以是js的表达式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const num = 5</span><br><span class="line">ReactDOM.render(&lt;Demo msg=&#123;num&gt;3?&apos;大于3&apos;:&apos;小于3&apos;&#125; name=&apos;wj&apos; age=&apos;18&apos;/&gt;,app)</span><br></pre></td></tr></table></figure></p><p>这里就不多说了，react相对于vue，做了更少的限制，大胆去尝试吧，很多你觉得可以的，在react确实可以做到。</p><p>再来看看在类定义组件里使用props：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Demo extends React.Component&#123;</span><br><span class="line">      render()&#123;</span><br><span class="line">          return &lt;h1&gt;&#123;this.props.msg&#125;&lt;/h1&gt;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Demo msg=&apos;hello world&apos; /&gt;,app)</span><br></pre></td></tr></table></figure></p><p>这里使用props的唯一区别就是要使用this来调用，其他跟函数定义组件一样。</p><p>props有一个限制，那就是它的只读性，无论是使用函数或是类来声明一个组件，它决不能修改它自己的props。如果需要改变props值来更新视图显然是不行的。这就需要state状态。</p><h3 id="状态（state）"><a href="#状态（state）" class="headerlink" title="状态（state）"></a>状态（state）</h3><p>状态适用于类定义的组件，状态是私有的，完全受控于当前组件。我们需要使用状态，则需要定义类组件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Demo extends React.Component&#123;</span><br><span class="line">      constructor()&#123;</span><br><span class="line">        super()</span><br><span class="line">        this.state=&#123;</span><br><span class="line">            msg:&apos;hello world&apos;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;       // 注意这里不要写逗号，详见es6之class</span><br><span class="line">      render()&#123;</span><br><span class="line">          return &lt;div&gt;&#123;this.state.msg&#125;&lt;/div&gt;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Demo/&gt;,app)</span><br></pre></td></tr></table></figure></p><p>上面代码添加了状态，在这里你可能需要知道一些es6的class知识，推荐阮一峰老师的es6教程。我们知道Demo类式继承React.Component这个类的，算子类，它必须在constructor方法中调用super方法，否则新建实例时会报错。这是因为子类自己的this对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用super方法，子类就得不到this对象。</p><p>在this对象上添加状态state，这个状态是属于Demo私有的，使用this.state.xxx的方式调用。</p><p>状态受控于当前组件，是可以改变的，这里我们来改变下状态，注意这里会使用到事件，以后会详细介绍react事件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">change()&#123;</span><br><span class="line">  this.state.msg = &apos;改变了&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render()&#123;</span><br><span class="line">  return &lt;div&gt;</span><br><span class="line">           &lt;input type=&apos;button&apos; value=&apos;改变&apos; onClick=&#123;this.change.bind(this)&#125; /&gt;&lt;br/&gt;</span><br><span class="line">           &lt;p&gt;&#123;this.state.msg&#125;&lt;/p&gt;</span><br><span class="line">         &lt;/div&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面代码中，当我们点击按钮时，state数据会改变，同时视图也会更新。但是当你运行后，会发现视图并不会更新。原因在哪里？</p><p>其实问题就出在了this.state上，我们不能直接使用this.state来变更状态，这样不会重新渲染组件，我们需要使用setState()方法来更新状态：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">change()&#123;</span><br><span class="line">   //this.state.msg = &apos;改变了&apos;</span><br><span class="line">   </span><br><span class="line">   this.setState(&#123;</span><br><span class="line">       msg:&apos;改变了&apos;</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样，当状态更新后，组件才会重新渲染。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我也不知道怎么总结了，很多细节我也没说到，这算是自己的一个回顾吧。与vue相比，react似乎限制地更少，这也意味着我们可以更灵活地组织我们的代码。学习过程中应该大胆尝试，你想到的，react作者们可能也想到了。另外在vue里，组件不是必须的，更多的关注点是在数据层上，但在react里，组件是不可缺少的，一切开发都是基于组件的（至少现在我是这么觉得），这也反映了两大框架的不同思想吧，不管如何，多学学总不会差。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;学习react应该就是学习它的组件化开发了，看看它和vue的组件相比有何不同？&lt;/p&gt;
&lt;h2 id=&quot;组件&quot;&gt;&lt;a href=&quot;#组件&quot; class=&quot;headerlink&quot; title=&quot;组件&quot;&gt;&lt;/a&gt;组件&lt;/h2&gt;&lt;p&gt;react组件有两种，分别是函数定义和类定义。
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>react初体验</title>
    <link href="http://yoursite.com/2018/05/28/react01/"/>
    <id>http://yoursite.com/2018/05/28/react01/</id>
    <published>2018-05-28T12:34:52.000Z</published>
    <updated>2018-11-13T15:30:20.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在我的日常开发中，我用的只有vue，对于大名鼎鼎的react和angular，我一点都不了解。想当初开始学框架时，纠结许久，无非是react更具挑战性，学会了再学vue更容易，而vue简单易上手且功能也不输react。当然这些都是从度娘听说的。 </p><p>使用vue许久，感觉还是很爽的，虽然开始时有点困难，毕竟那时es6也不熟悉。我不止一次庆幸我学的是vue，不仅是因为它易学易用，关键是它的生态也越来越好，国内很多新东西出来，都是先基于vue的，比如现在很火的mpvue小程序框架，就是基于vue的，这使得我学会一个vue就可以容易地做很多事。</p><p>之所以有庆幸学的是vue的心态，可能也是因为不了解其他两大框架，先入为主地觉得vue才是王道。我不知道其他两个框架是否很难入手，是否更加强大，但是vue已经能够解决我的日常开发了，我本来也不想去接触react和angular的，可能觉得舍易求难是浪费时间。不过另一方面，我又很好奇，它们真的那么难吗？和vue比到底有什么区别？思来想去，我觉得还是直接试水比较好，不就是一个框架吗？想学就学咯！于是，我选择了react，因为angula似乎真的难点！</p><h2 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h2><p>当初学vue时，我只要引入一个文件vue.js就好了，学react，我竟然要引入三个文件，天啊，我第一想法就是这个好复杂啊。</p><ul><li>react.js：实现React核心逻辑，且于具体的渲染引擎无关，从而可以跨平台公用。</li><li>react-dom.js：包含了具体的DOM渲染更新逻辑，以及服务端渲染的逻辑，与浏览器相关。</li><li>browser.js：支持JSX语法必须。</li></ul><p>在这里，我用的react是15.6.2版本，听说稳定点，browser.js是5.8.38版本，莫名不敢用新的，哈哈~</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">        &lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script src=&quot;./common/react.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;./common/react-dom.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">        &lt;script src=&quot;./common/browser.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script type=&quot;text/babel&quot;&gt;</span><br><span class="line">          ReactDOM.render(</span><br><span class="line">              &lt;h1&gt;hello world&lt;/h1&gt;,</span><br><span class="line">              document.getElementById(&apos;app&apos;)</span><br><span class="line">          )</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：script标签的type属性应写成text/babel，不然识别不了react语法</p></blockquote><p>上面代码是截取body部分，此时已经可以在浏览器里输出hello world了。虽然这段代码看起来很简单，但是我开始写时，我是恐慌的，因为ReactDOM.render()看起来很复杂的样子，为啥不是vue那样，直接两个花括号写到html里呢，那样多简单。</p><p>确实很容易受vue影响，对于这种方法有点接受不了，但这其实并不复杂。ReactDOM.render()的第一参数很明显就是我们要输出到浏览器的内容，那么第二个参数其实是要输出到的位置。</p><p>当我们明白两个参数的意义时，可能觉得懂了，其实不然。这里面可是有一个核心的东西，那就是JSX。在我还没接触JSX，总是听别人说JSX时，我觉得它可能是一个很复杂的语法。但当我接触后才知道，这货很“纯”，是一个奇怪的变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var ele = &lt;h1&gt;hello world&lt;/h1&gt;</span><br></pre></td></tr></table></figure></p><p>这种看起来可能有些奇怪的标签语法既不是字符串也不是 HTML，它就是JSX。那么不禁想问，它到底是什么数据类型？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(typeof ele)</span><br><span class="line"></span><br><span class="line">//object</span><br></pre></td></tr></table></figure></p><p>显然，它是一个对象，这么看的话，JavaScript是在内部给它处理了。事实也确实如此：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">    React.createElement(&apos;h1&apos;,null,&apos;hello world&apos;),</span><br><span class="line">    document.getElementById(&apos;app&apos;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;h1&gt;hello world&lt;/h1&gt;,</span><br><span class="line">    document.getElementById(&apos;app&apos;)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>上面两种方法结果完全相同。React.createElement()的第一个参数是标签，第二个参数是标签属性，第三个参数是标签内容。很显然这样写比较繁琐，且不直观。所以我们应该直接使用JSX语法，这也是官方建议的。</p><p>其实我们直接写JSX语法，Babel 转译器也会把 JSX 转换成为 React.createElement() 方法的调用，而这个方法会返回一个对象，类似这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  type: &apos;h1&apos;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    children: &apos;Hello, world&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样的对象被称为 “React 元素”。它代表所有你在屏幕上看到的东西。React 通过读取这些对象来构建 DOM 并保持数据内容一致。</p><p>关于JSX还有两点需要注意：    </p><ol><li><p>当有多个标签时，在最外层需加上一个包裹标签，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const ele = &lt;div&gt;&lt;span&gt;&lt;/span&gt;&lt;p&gt;&lt;/p&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li><li><p>JSX允许自由分段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const ele = &lt;div&gt;</span><br><span class="line">              &lt;span&gt;&lt;/span&gt;</span><br><span class="line">              &lt;p&gt;&lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在react里使用ReactDOM.render()来向页面渲染内容，它有两个参数，第一个参数是渲染内容，第二个参数是渲染位置。</p><p>JSX是JavaScript的一种扩展语法，让一个变量直接赋值为标签。它与React.createElement()方法调用的结果是一样的，返回一个对象，叫做“React元素”。react推荐使用JSX语法。</p><p>啰嗦一大堆，其实是表达自己的心情，初见react让我觉得复杂不好用，但是越接触越发现它是有它独特的魅力的。不管哪一个框架，我们都没资格去评定好不好，只有适不适合自己。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在我的日常开发中，我用的只有vue，对于大名鼎鼎的react和angular，我一点都不了解。想当初开始学框架时，纠结许久，无非是react
      
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>koa初体验</title>
    <link href="http://yoursite.com/2018/05/23/koa/"/>
    <id>http://yoursite.com/2018/05/23/koa/</id>
    <published>2018-05-23T08:08:58.000Z</published>
    <updated>2018-05-23T08:20:25.190Z</updated>
    
    <content type="html"><![CDATA[<p>出于对koa的好奇，于是想要了解下。</p><blockquote><p>koa 是由 Express 原班人马打造的，致力于成为一个更小、更富有表现力、更健壮的 Web 框架。 </p></blockquote><p>如果说koa是下一代web开发框架，那么上一代毫无疑问就是express了，其实用哪个都无所谓啦，只要自己用的顺手就好。反正我哪个都用不到，至少目前是的，哈哈。</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>新建一个文件夹koaDemo，其内执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br><span class="line"></span><br><span class="line">npm install koa</span><br></pre></td></tr></table></figure></p><p>我们讨论的是koa2。而koa默认安装的就是2的版本，所以无需指定为koa2。</p><p>用koa来输出“hello world”，新建一个文件server.js，输入以下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const Koa = require(&apos;koa&apos;)</span><br><span class="line">const app = new Koa()</span><br><span class="line"></span><br><span class="line">app.use(async ctx =&gt; &#123;</span><br><span class="line">    ctx.body = &apos;hello world&apos;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(3000)</span><br></pre></td></tr></table></figure></p><p><code>node server.js</code>执行文件，此时打开浏览器，访问：<a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a>，熟悉的hello world就显示出来啦。</p><p>可以看到，koa真的很精简，短短几行就能启动一个服务，虽然这些express都能办到，但是koa肯定也是有它的独到之处的。其中之一就是使用 async+await 处理异步，上面代码中已用到了async，接下来就介绍下async和await。</p><h2 id="async与await"><a href="#async与await" class="headerlink" title="async与await"></a>async与await</h2><p>koa的一大优点就是No Callback，很多人使用koa也是因为这个。没有回调得力于async和await的使用，关于它们的概念我也讲不好，网上有很多文档可以参考，你只需要知道它可以解决回调地狱的问题，使异步操作更优雅。具体怎么个优雅法，我们来慢慢看。</p><h3 id="回调函数处理异步"><a href="#回调函数处理异步" class="headerlink" title="回调函数处理异步"></a>回调函数处理异步</h3><p>在最初的时候，我们使用回调函数来处理异步，来看个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function test() &#123;</span><br><span class="line">    setTimeout(()=&gt;&#123;</span><br><span class="line">        console.log(&apos;执行了&apos;)</span><br><span class="line">    &#125;, 2000)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test()</span><br><span class="line">console.log(&apos;结束&apos;)</span><br><span class="line"></span><br><span class="line">// 执行结果</span><br><span class="line">结束</span><br><span class="line">执行了</span><br></pre></td></tr></table></figure></p><p>上面代码的执行结果显然不符合预期的，所以我们需要借助回调函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">function test(fn) &#123;</span><br><span class="line">    setTimeout(()=&gt;&#123;</span><br><span class="line">        console.log(&apos;执行了&apos;)</span><br><span class="line">        fn()</span><br><span class="line">    &#125;, 2000)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(()=&gt;&#123;</span><br><span class="line">    console.log(&apos;结束&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 执行结果</span><br><span class="line">执行了</span><br><span class="line">结束</span><br></pre></td></tr></table></figure></p><p>显然，这才是我们想要的结果，回调虽然看起来很简单，但是当业务逻辑多起来时，容易形成回调地狱，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ajax(()=&gt;&#123;</span><br><span class="line">    ajax(()=&gt;&#123;</span><br><span class="line">        ajax(()=&gt;&#123;</span><br><span class="line">            // ...</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>三层，不能再多了！三层都快受不了了，更别说更复杂的了，当维护这样的代码时，是真的难受。所以后来es6给了一个好的解决方法，那就是promise。</p><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><p>关于promise诞生的前前后后我就不介绍了，因为我也不太熟悉啊，不过它的使用方法我们还是要掌握的，推荐阮一峰老师的es6教程，传送门：<a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="noopener">promise</a></p><p>来写一个promise的例子，假设三个异步操作，依次执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">function delay(val)&#123;</span><br><span class="line">    return new Promise((resolve, reject)=&gt;&#123;</span><br><span class="line">        setTimeout(()=&gt;&#123;</span><br><span class="line">            resolve(val)</span><br><span class="line">        &#125;,2000)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">delay(&apos;第一步执行&apos;)</span><br><span class="line"> .then((val)=&gt;&#123;</span><br><span class="line">     console.log(val)</span><br><span class="line">     return delay(&apos;第二步执行&apos;)</span><br><span class="line"> &#125;)</span><br><span class="line"> .then((val)=&gt;&#123;</span><br><span class="line">     console.log(val)</span><br><span class="line">     return delay(&apos;第三步执行&apos;)</span><br><span class="line"> &#125;)</span><br><span class="line"> .then((val)=&gt;&#123;</span><br><span class="line">     console.log(val)</span><br><span class="line"> &#125;)</span><br><span class="line"> </span><br><span class="line"> // 结果</span><br><span class="line">第一步执行</span><br><span class="line">第二步执行</span><br><span class="line">第三步执行</span><br></pre></td></tr></table></figure></p><p>promise的使用，解决了一层层回调嵌套的窘境，这很大程度上解决了回调地狱的问题，清晰的代码结构也容易维护。</p><p>promise很好用，但是代码量还是有点的，如果可以，何不试试async+await呢？</p><h3 id="async-await"><a href="#async-await" class="headerlink" title="async+await"></a>async+await</h3><p>虽然我也想把这两个概念讲的很明白，但是我不能啊，网上有大佬讲的很清楚，在这我就简单说下。</p><p>你需要知道的是，async用来定义一个异步函数，它总会返回异步对象，即promise，而await必须在async内部使用，用来处理异步结果。</p><p>说不如做，就拿上面的例子来试下async的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">function delay(val)&#123;</span><br><span class="line">    return new Promise((resolve, reject)=&gt;&#123;</span><br><span class="line">        setTimeout(()=&gt;&#123;</span><br><span class="line">            resolve(val)</span><br><span class="line">        &#125;,2000)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">async function start()&#123; </span><br><span class="line">  let result1 = await delay(&apos;第一次执行&apos;)</span><br><span class="line">  console.log(result1)</span><br><span class="line"></span><br><span class="line">  let result2 = await delay(&apos;第二次执行&apos;)</span><br><span class="line">  console.log(result2)</span><br><span class="line"></span><br><span class="line">  let result3 = await delay(&apos;第三次执行&apos;)</span><br><span class="line">  console.log(result3)</span><br><span class="line">&#125;</span><br><span class="line">start()</span><br><span class="line"></span><br><span class="line"> // 结果</span><br><span class="line">第一步执行</span><br><span class="line">第二步执行</span><br><span class="line">第三步执行</span><br></pre></td></tr></table></figure></p><p>如上代码，同步的方式写异步，再也看不到回调了，是不是很爽。在koa中，重点使用async+await的方式，所以不懂得童鞋还得加把劲啊。即使不用koa，但这么炫酷的方法你确定不试试？</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>写完后才发现，我不是介绍koa的，反而介绍了async，虽然没讲得明白。麻雀虽小五脏俱全，koa的更多使用，下次再说咯。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;出于对koa的好奇，于是想要了解下。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;koa 是由 Express 原班人马打造的，致力于成为一个更小、更富有表现力、更健壮的 Web 框架。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果说koa是下一代web开发框架，那么上一代
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="koa" scheme="http://yoursite.com/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>express中实现文件上传</title>
    <link href="http://yoursite.com/2018/03/19/upload-file/"/>
    <id>http://yoursite.com/2018/03/19/upload-file/</id>
    <published>2018-03-19T14:11:12.000Z</published>
    <updated>2018-03-19T14:14:55.709Z</updated>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>之所以要单独说下文件上传，是因为<code>body-parser</code>中间件不支持文件类型获取。我们平时都是用这个中间件去获取post数据，但是如果post过来的是一个文件，那它就不管用了。所以，我们需要新的中间件，那就是<code>multer</code>。</p><h2 id="multer"><a href="#multer" class="headerlink" title="multer"></a>multer</h2><p>Multer 是一个 node.js 中间件，用于处理 multipart/form-data 类型的表单数据，它主要用于上传文件。</p><p>关于它的用法，可以参考文档：<a href="https://www.npmjs.com/package/multer" target="_blank" rel="noopener">multer</a></p><p>注意：Multer 不会处理任何非 multipart/form-data 类型的表单数据。</p><h3 id="什么是-multipart-form-data类型？"><a href="#什么是-multipart-form-data类型？" class="headerlink" title="什么是 multipart/form-data类型？"></a>什么是 multipart/form-data类型？</h3><p>表单标签form上有一个enctype属性，它有三种值：</p><ul><li>application/x-www-form-urlencoded：在发送前编码所有字符（默认）</li><li>multipart/form-data：不对字符编码。在使用包含文件上传控件的表单时，必须使用该值。</li><li>text/plain：空格转换为 “+” 加号，但不对特殊字符编码。</li></ul><h2 id="上传一个文件"><a href="#上传一个文件" class="headerlink" title="上传一个文件"></a>上传一个文件</h2><p>现在就来实现一个文件上传。在这之前，确保你已经安装了<code>express</code>和<code>multer</code>。</p><p>app.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&apos;express&apos;)</span><br><span class="line">const app = express()</span><br><span class="line"></span><br><span class="line">//引入multer</span><br><span class="line">const multer = require(&apos;multer&apos;)</span><br><span class="line"></span><br><span class="line">//注册一个对象，dest里放的是上传的文件存储的位置，可以在当前目录下，建立一个static目录，上传的文件都放在这里</span><br><span class="line">const upload = multer(&#123;dest: &apos;./static/&apos;&#125;)</span><br><span class="line"></span><br><span class="line">//使用中间件，没有挂载路径，应用的每个请求都会执行该中间件。any表示接受一切，具体参考文档。</span><br><span class="line">app.use(upload.any())</span><br><span class="line"></span><br><span class="line">//在req.files中获取文件数据</span><br><span class="line">app.post(&apos;/&apos;,function(req, res)&#123;</span><br><span class="line"></span><br><span class="line">console.log(req.files)</span><br><span class="line"></span><br><span class="line">res.send(&apos;上传成功&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.listen(3000)</span><br></pre></td></tr></table></figure></p><p>现在准备一个表单<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=&quot;http://localhost:3000/&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span><br><span class="line">选择文件：</span><br><span class="line">&lt;input type=&quot;file&quot; name=&quot;file1&quot;&gt;&lt;br&gt;</span><br><span class="line">&lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>注意：在form里的enctype属性上必须填”multipart/form-data”。</p><p>现在执行app.js文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node app.js</span><br></pre></td></tr></table></figure></p><p>在浏览器打开表单html文件，并上传一个文件，我上传了一张图片，然后在命令行里可以看到打印的数据，比如我的是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[ &#123; fieldname: &apos;file1&apos;,</span><br><span class="line">    originalname: &apos;html5.jpg&apos;,</span><br><span class="line">    encoding: &apos;7bit&apos;,</span><br><span class="line">    mimetype: &apos;image/jpeg&apos;,</span><br><span class="line">    destination: &apos;./static/&apos;,</span><br><span class="line">    filename: &apos;2047b375bfaa68f984af6ac19e8df455&apos;,</span><br><span class="line">    path: &apos;static\\2047b375bfaa68f984af6ac19e8df455&apos;,</span><br><span class="line">    size: 9029 &#125; ]</span><br></pre></td></tr></table></figure></p><p>可以看到req.files是一个数组，因为可能不止传一个文件，每个文件的信息也很清晰就不多介绍了。</p><p>需要注意的是<code>filename</code>这个属性，它就是上传后的文件名，可以到static目录里去看，它就是这样一个文件名且没有后缀，我们现在打不开它的，如果加上后缀，就可以打开了。我的图片是jpg格式，我在文件名后面加上<code>.jpg</code>就可以正常打开了。</p><p>手动添加后缀名太麻烦了，既然用了node，那我们何不进一步处理，直接拿到有后缀名的文件呢？</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>其实思路很简单，看打印出的文件信息，我们可以从<code>originalname</code>里拿到文件后缀名，又可以在<code>path</code>里拿到文件路径。好了，要做的无非就是拿到后缀名再重命名嘛。使用node中的<code>path</code>和<code>fs</code>模块，很容易实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">const express = require(&apos;express&apos;)</span><br><span class="line">const app = express()</span><br><span class="line">const multer = require(&apos;multer&apos;)</span><br><span class="line"></span><br><span class="line">//引入 path 和 fs</span><br><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const fs = require(&apos;fs&apos;)</span><br><span class="line"></span><br><span class="line">const upload = multer(&#123;dest: &apos;./static/&apos;&#125;)</span><br><span class="line"></span><br><span class="line">app.use(upload.any())</span><br><span class="line"></span><br><span class="line">app.post(&apos;/&apos;,function(req, res)&#123;</span><br><span class="line">console.log(req.files)</span><br><span class="line"></span><br><span class="line">//拿到后缀名</span><br><span class="line">var extname = path.extname(req.files[0].originalname);</span><br><span class="line"></span><br><span class="line">//拼接新的文件路径，文件加上后缀名</span><br><span class="line">var newPath = req.files[0].path + extname;</span><br><span class="line"></span><br><span class="line">//重命名</span><br><span class="line">fs.rename(req.files[0].path, newPath, function(err)&#123;</span><br><span class="line">if(err)&#123;</span><br><span class="line">res.send(&apos;上传失败&apos;)</span><br><span class="line">&#125;else&#123;</span><br><span class="line">res.send(&apos;上传成功&apos;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.listen(3000)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;之所以要单独说下文件上传，是因为&lt;code&gt;body-parser&lt;/code&gt;中间件不支持文件类型获取。我们平时都是用这个中间件去获取po
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="express" scheme="http://yoursite.com/tags/express/"/>
    
  </entry>
  
</feed>
